
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08009050  08009050  0000a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009758  08009758  0000b1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009760  08009760  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009768  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  200001f4  0800995c  0000b1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800995c  0000ba20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011819  00000000  00000000  0000b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c44  00000000  00000000  0001ca36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e00  00000000  00000000  00020848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184f1  00000000  00000000  00021648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c3d  00000000  00000000  00039b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901f8  00000000  00000000  0004f776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df96e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f14  00000000  00000000  000df9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e58c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009034 	.word	0x08009034

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009034 	.word	0x08009034

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2lz>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	2200      	movs	r2, #0
 8000acc:	2300      	movs	r3, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	460d      	mov	r5, r1
 8000ad2:	f7ff ff73 	bl	80009bc <__aeabi_dcmplt>
 8000ad6:	b928      	cbnz	r0, 8000ae4 <__aeabi_d2lz+0x1c>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4629      	mov	r1, r5
 8000adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae0:	f000 b80a 	b.w	8000af8 <__aeabi_d2ulz>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000aea:	f000 f805 	bl	8000af8 <__aeabi_d2ulz>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2ulz>:
 8000af8:	b5d0      	push	{r4, r6, r7, lr}
 8000afa:	2200      	movs	r2, #0
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <__aeabi_d2ulz+0x34>)
 8000afe:	4606      	mov	r6, r0
 8000b00:	460f      	mov	r7, r1
 8000b02:	f7ff fce9 	bl	80004d8 <__aeabi_dmul>
 8000b06:	f7ff ffbf 	bl	8000a88 <__aeabi_d2uiz>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	f7ff fc6a 	bl	80003e4 <__aeabi_ui2d>
 8000b10:	2200      	movs	r2, #0
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <__aeabi_d2ulz+0x38>)
 8000b14:	f7ff fce0 	bl	80004d8 <__aeabi_dmul>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	4639      	mov	r1, r7
 8000b20:	f7ff fb22 	bl	8000168 <__aeabi_dsub>
 8000b24:	f7ff ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b2c:	3df00000 	.word	0x3df00000
 8000b30:	41f00000 	.word	0x41f00000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b35      	ldr	r3, [pc, #212]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a34      	ldr	r2, [pc, #208]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b32      	ldr	r3, [pc, #200]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2e      	ldr	r2, [pc, #184]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b96:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000b98:	f001 fd58 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2138      	movs	r1, #56	@ 0x38
 8000ba0:	4821      	ldr	r0, [pc, #132]	@ (8000c28 <MX_GPIO_Init+0xf4>)
 8000ba2:	f001 fd53 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ba6:	23f0      	movs	r3, #240	@ 0xf0
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xf8>)
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481a      	ldr	r0, [pc, #104]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000bba:	f001 fbc3 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000bd8:	f001 fbb4 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bdc:	2338      	movs	r3, #56	@ 0x38
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_GPIO_Init+0xf4>)
 8000bf4:	f001 fba6 	bl	8002344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f001 fab8 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fad1 	bl	80021aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	2017      	movs	r0, #23
 8000c0e:	f001 fab0 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c12:	2017      	movs	r0, #23
 8000c14:	f001 fac9 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	10110000 	.word	0x10110000

08000c30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_I2C1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c6e:	f001 fd1d 	bl	80026ac <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 fcac 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000210 	.word	0x20000210
 8000c84:	40005400 	.word	0x40005400
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <HAL_I2C_MspInit+0x70>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d123      	bne.n	8000cf4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc4:	23c0      	movs	r3, #192	@ 0xc0
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <HAL_I2C_MspInit+0x78>)
 8000cd8:	f001 fb34 	bl	8002344 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce6:	61d3      	str	r3, [r2, #28]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 f8f8 	bl	8001f00 <HAL_Init>

  /* USER CODE BEGIN Init */
  Frequency_Light=(int)(Func/Set_LightFrequency);
 8000d10:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <main+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb75 	bl	8000404 <__aeabi_i2d>
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <main+0xac>)
 8000d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d20:	f7ff fd04 	bl	800072c <__aeabi_ddiv>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fe84 	bl	8000a38 <__aeabi_d2iz>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <main+0xb0>)
 8000d34:	6013      	str	r3, [r2, #0]
  Frequency_Sound=(int)(Func/Set_SoundFrequency);
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <main+0xa8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb62 	bl	8000404 <__aeabi_i2d>
 8000d40:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <main+0xb4>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	f7ff fcf1 	bl	800072c <__aeabi_ddiv>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fe71 	bl	8000a38 <__aeabi_d2iz>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <main+0xb8>)
 8000d5a:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f83c 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff fee8 	bl	8000b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f7ff ff64 	bl	8000c30 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d68:	f000 fec6 	bl	8001af8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d6c:	f000 ff12 	bl	8001b94 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d70:	f000 ffb8 	bl	8001ce4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 ffe0 	bl	8001d38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d78:	f000 fe70 	bl	8001a5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000d7c:	f000 fc58 	bl	8001630 <OLED_Init>
  OLED_DisPlay_On();
 8000d80:	f000 fcb2 	bl	80016e8 <OLED_DisPlay_On>
  //Bluetooth_Init();
  HAL_TIM_Base_Start_IT(&htim2);
 8000d84:	480f      	ldr	r0, [pc, #60]	@ (8000dc4 <main+0xbc>)
 8000d86:	f002 fda5 	bl	80038d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d8a:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <main+0xc0>)
 8000d8c:	f002 fda2 	bl	80038d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d90:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <main+0xc4>)
 8000d92:	f002 fd9f 	bl	80038d4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY)
 8000d96:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <main+0xc8>)
 8000d98:	f003 fcf1 	bl	800477e <HAL_UART_GetState>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b20      	cmp	r3, #32
 8000da0:	d1f9      	bne.n	8000d96 <main+0x8e>
    {
      HAL_UART_Receive_IT(&huart1,UART_str,30);
 8000da2:	221e      	movs	r2, #30
 8000da4:	490b      	ldr	r1, [pc, #44]	@ (8000dd4 <main+0xcc>)
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <main+0xc8>)
 8000da8:	f003 fa15 	bl	80041d6 <HAL_UART_Receive_IT>
    if (HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY)
 8000dac:	e7f3      	b.n	8000d96 <main+0x8e>
 8000dae:	bf00      	nop
 8000db0:	2000001c 	.word	0x2000001c
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000026c 	.word	0x2000026c
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	20000270 	.word	0x20000270
 8000dc4:	20000768 	.word	0x20000768
 8000dc8:	200007b0 	.word	0x200007b0
 8000dcc:	200007f8 	.word	0x200007f8
 8000dd0:	20000840 	.word	0x20000840
 8000dd4:	2000028c 	.word	0x2000028c

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b090      	sub	sp, #64	@ 0x40
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2228      	movs	r2, #40	@ 0x28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 fbc7 	bl	800657a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e16:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 f8f7 	bl	8003014 <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e2c:	f000 fbd2 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fb64 	bl	8003518 <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e56:	f000 fbbd 	bl	80015d4 <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3740      	adds	r7, #64	@ 0x40
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <BTDecode>:

/* USER CODE BEGIN 4 */
void BTDecode(){
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b0bf      	sub	sp, #252	@ 0xfc
 8000e68:	af06      	add	r7, sp, #24
  char *tmp=strstr(UART_str,"Display");
 8000e6a:	4983      	ldr	r1, [pc, #524]	@ (8001078 <BTDecode+0x214>)
 8000e6c:	4883      	ldr	r0, [pc, #524]	@ (800107c <BTDecode+0x218>)
 8000e6e:	f005 fb9e 	bl	80065ae <strstr>
 8000e72:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d04c      	beq.n	8000f18 <BTDecode+0xb4>
  {
    char str[180],at_str[30];
    memset(str,0,sizeof(str));
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	22b4      	movs	r2, #180	@ 0xb4
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fb78 	bl	800657a <memset>
    memset(at_str,0,sizeof(at_str));
 8000e8a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000e8e:	221e      	movs	r2, #30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 fb71 	bl	800657a <memset>
    sprintf(at_str,"AT+BTSPPSEND=0,%d\r\n",sizeof(str));
 8000e98:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000e9c:	22b4      	movs	r2, #180	@ 0xb4
 8000e9e:	4978      	ldr	r1, [pc, #480]	@ (8001080 <BTDecode+0x21c>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fb07 	bl	80064b4 <siprintf>
    HAL_UART_Transmit(&huart1,at_str,sizeof(at_str),50);
 8000ea6:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000eaa:	2332      	movs	r3, #50	@ 0x32
 8000eac:	221e      	movs	r2, #30
 8000eae:	4875      	ldr	r0, [pc, #468]	@ (8001084 <BTDecode+0x220>)
 8000eb0:	f003 f90e 	bl	80040d0 <HAL_UART_Transmit>
    sprintf(str,"LightFrequency:%lf\r\nSoundFrequency:%lf\r\nLightValue:%d\r\nSoundValue:%d\r\nTimeLeft:%d\r\n",Set_LightFrequency,Set_SoundFrequency,Value_Light,Value_Sound,Time_Left);
 8000eb4:	4b74      	ldr	r3, [pc, #464]	@ (8001088 <BTDecode+0x224>)
 8000eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eba:	4b74      	ldr	r3, [pc, #464]	@ (800108c <BTDecode+0x228>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	4c73      	ldr	r4, [pc, #460]	@ (8001090 <BTDecode+0x22c>)
 8000ec2:	6824      	ldr	r4, [r4, #0]
 8000ec4:	4d73      	ldr	r5, [pc, #460]	@ (8001094 <BTDecode+0x230>)
 8000ec6:	682d      	ldr	r5, [r5, #0]
 8000ec8:	4e73      	ldr	r6, [pc, #460]	@ (8001098 <BTDecode+0x234>)
 8000eca:	6836      	ldr	r6, [r6, #0]
 8000ecc:	f107 0c04 	add.w	ip, r7, #4
 8000ed0:	9604      	str	r6, [sp, #16]
 8000ed2:	9503      	str	r5, [sp, #12]
 8000ed4:	9402      	str	r4, [sp, #8]
 8000ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	496f      	ldr	r1, [pc, #444]	@ (800109c <BTDecode+0x238>)
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	f005 fae7 	bl	80064b4 <siprintf>
    uint16_t t=3127*200;
 8000ee6:	f648 23f8 	movw	r3, #35576	@ 0x8af8
 8000eea:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    while(t--);
 8000eee:	bf00      	nop
 8000ef0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	f8a7 20de 	strh.w	r2, [r7, #222]	@ 0xde
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f8      	bne.n	8000ef0 <BTDecode+0x8c>
    HAL_UART_Transmit(&huart1,str,sizeof(str),50);
 8000efe:	1d39      	adds	r1, r7, #4
 8000f00:	2332      	movs	r3, #50	@ 0x32
 8000f02:	22b4      	movs	r2, #180	@ 0xb4
 8000f04:	485f      	ldr	r0, [pc, #380]	@ (8001084 <BTDecode+0x220>)
 8000f06:	f003 f8e3 	bl	80040d0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,"+++",sizeof("+++"),50);
 8000f0a:	2332      	movs	r3, #50	@ 0x32
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	4964      	ldr	r1, [pc, #400]	@ (80010a0 <BTDecode+0x23c>)
 8000f10:	485c      	ldr	r0, [pc, #368]	@ (8001084 <BTDecode+0x220>)
 8000f12:	f003 f8dd 	bl	80040d0 <HAL_UART_Transmit>
 8000f16:	e0ab      	b.n	8001070 <BTDecode+0x20c>
    return;
  }
  tmp=strstr(UART_str,"LightFrequency");
 8000f18:	4962      	ldr	r1, [pc, #392]	@ (80010a4 <BTDecode+0x240>)
 8000f1a:	4858      	ldr	r0, [pc, #352]	@ (800107c <BTDecode+0x218>)
 8000f1c:	f005 fb47 	bl	80065ae <strstr>
 8000f20:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d024      	beq.n	8000f76 <BTDecode+0x112>
  {
    Set_LightFrequency=atof(tmp+14*sizeof(char));
 8000f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f30:	330e      	adds	r3, #14
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 ff10 	bl	8004d58 <atof>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4952      	ldr	r1, [pc, #328]	@ (8001088 <BTDecode+0x224>)
 8000f3e:	e9c1 2300 	strd	r2, r3, [r1]
    Frequency_Light=(int)(Func/Set_LightFrequency);
 8000f42:	4b59      	ldr	r3, [pc, #356]	@ (80010a8 <BTDecode+0x244>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fa5c 	bl	8000404 <__aeabi_i2d>
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001088 <BTDecode+0x224>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fbeb 	bl	800072c <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fd6b 	bl	8000a38 <__aeabi_d2iz>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a51      	ldr	r2, [pc, #324]	@ (80010ac <BTDecode+0x248>)
 8000f66:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"LightFrequencySet",sizeof("LightFrequencySet"),50);
 8000f68:	2332      	movs	r3, #50	@ 0x32
 8000f6a:	2212      	movs	r2, #18
 8000f6c:	4950      	ldr	r1, [pc, #320]	@ (80010b0 <BTDecode+0x24c>)
 8000f6e:	4851      	ldr	r0, [pc, #324]	@ (80010b4 <BTDecode+0x250>)
 8000f70:	f003 f8ae 	bl	80040d0 <HAL_UART_Transmit>
    return;
 8000f74:	e07c      	b.n	8001070 <BTDecode+0x20c>
  }
  tmp=strstr(UART_str,"SoundFrequency");
 8000f76:	4950      	ldr	r1, [pc, #320]	@ (80010b8 <BTDecode+0x254>)
 8000f78:	4840      	ldr	r0, [pc, #256]	@ (800107c <BTDecode+0x218>)
 8000f7a:	f005 fb18 	bl	80065ae <strstr>
 8000f7e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d024      	beq.n	8000fd4 <BTDecode+0x170>
  {
    Set_SoundFrequency=atof(tmp+14*sizeof(char));
 8000f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f8e:	330e      	adds	r3, #14
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fee1 	bl	8004d58 <atof>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	493c      	ldr	r1, [pc, #240]	@ (800108c <BTDecode+0x228>)
 8000f9c:	e9c1 2300 	strd	r2, r3, [r1]
    Frequency_Sound=(int)(Func/Set_SoundFrequency);
 8000fa0:	4b41      	ldr	r3, [pc, #260]	@ (80010a8 <BTDecode+0x244>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa2d 	bl	8000404 <__aeabi_i2d>
 8000faa:	4b38      	ldr	r3, [pc, #224]	@ (800108c <BTDecode+0x228>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fbbc 	bl	800072c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fd3c 	bl	8000a38 <__aeabi_d2iz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80010bc <BTDecode+0x258>)
 8000fc4:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"SoundFrequencySet",sizeof("SoundFrequencySet"),50);
 8000fc6:	2332      	movs	r3, #50	@ 0x32
 8000fc8:	2212      	movs	r2, #18
 8000fca:	493d      	ldr	r1, [pc, #244]	@ (80010c0 <BTDecode+0x25c>)
 8000fcc:	4839      	ldr	r0, [pc, #228]	@ (80010b4 <BTDecode+0x250>)
 8000fce:	f003 f87f 	bl	80040d0 <HAL_UART_Transmit>
    return;
 8000fd2:	e04d      	b.n	8001070 <BTDecode+0x20c>
  }
  tmp=strstr(UART_str,"LightValue");
 8000fd4:	493b      	ldr	r1, [pc, #236]	@ (80010c4 <BTDecode+0x260>)
 8000fd6:	4829      	ldr	r0, [pc, #164]	@ (800107c <BTDecode+0x218>)
 8000fd8:	f005 fae9 	bl	80065ae <strstr>
 8000fdc:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00f      	beq.n	8001008 <BTDecode+0x1a4>
  {
    Value_Light=atoi(tmp+10*sizeof(char));
 8000fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000fec:	330a      	adds	r3, #10
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 feb5 	bl	8004d5e <atoi>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a26      	ldr	r2, [pc, #152]	@ (8001090 <BTDecode+0x22c>)
 8000ff8:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"LightValueSet",sizeof("LightValueSet"),50);
 8000ffa:	2332      	movs	r3, #50	@ 0x32
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4932      	ldr	r1, [pc, #200]	@ (80010c8 <BTDecode+0x264>)
 8001000:	482c      	ldr	r0, [pc, #176]	@ (80010b4 <BTDecode+0x250>)
 8001002:	f003 f865 	bl	80040d0 <HAL_UART_Transmit>
    return;
 8001006:	e033      	b.n	8001070 <BTDecode+0x20c>
  }
  tmp=strstr(UART_str,"SoundValue");
 8001008:	4930      	ldr	r1, [pc, #192]	@ (80010cc <BTDecode+0x268>)
 800100a:	481c      	ldr	r0, [pc, #112]	@ (800107c <BTDecode+0x218>)
 800100c:	f005 facf 	bl	80065ae <strstr>
 8001010:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8001014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00f      	beq.n	800103c <BTDecode+0x1d8>
  {
    Value_Sound=atoi(tmp+10*sizeof(char));
 800101c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001020:	330a      	adds	r3, #10
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fe9b 	bl	8004d5e <atoi>
 8001028:	4603      	mov	r3, r0
 800102a:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <BTDecode+0x230>)
 800102c:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"SoundValueSet",sizeof("SoundValueSet"),50);
 800102e:	2332      	movs	r3, #50	@ 0x32
 8001030:	220e      	movs	r2, #14
 8001032:	4927      	ldr	r1, [pc, #156]	@ (80010d0 <BTDecode+0x26c>)
 8001034:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <BTDecode+0x250>)
 8001036:	f003 f84b 	bl	80040d0 <HAL_UART_Transmit>
    return;
 800103a:	e019      	b.n	8001070 <BTDecode+0x20c>
  }
  tmp=strstr(UART_str,"WorkTime");
 800103c:	4925      	ldr	r1, [pc, #148]	@ (80010d4 <BTDecode+0x270>)
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <BTDecode+0x218>)
 8001040:	f005 fab5 	bl	80065ae <strstr>
 8001044:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8001048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00f      	beq.n	8001070 <BTDecode+0x20c>
  {
    Time_Left=atoi(tmp+8*sizeof(char));
 8001050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001054:	3308      	adds	r3, #8
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fe81 	bl	8004d5e <atoi>
 800105c:	4603      	mov	r3, r0
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <BTDecode+0x234>)
 8001060:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"TimeLeftSet",sizeof("TimeLeftSet"),50);
 8001062:	2332      	movs	r3, #50	@ 0x32
 8001064:	220c      	movs	r2, #12
 8001066:	491c      	ldr	r1, [pc, #112]	@ (80010d8 <BTDecode+0x274>)
 8001068:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <BTDecode+0x250>)
 800106a:	f003 f831 	bl	80040d0 <HAL_UART_Transmit>
    return;
 800106e:	bf00      	nop
  }
}
 8001070:	37e4      	adds	r7, #228	@ 0xe4
 8001072:	46bd      	mov	sp, r7
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001076:	bf00      	nop
 8001078:	08009050 	.word	0x08009050
 800107c:	2000028c 	.word	0x2000028c
 8001080:	08009058 	.word	0x08009058
 8001084:	20000840 	.word	0x20000840
 8001088:	20000008 	.word	0x20000008
 800108c:	20000010 	.word	0x20000010
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004
 8001098:	20000018 	.word	0x20000018
 800109c:	0800906c 	.word	0x0800906c
 80010a0:	080090c0 	.word	0x080090c0
 80010a4:	080090c4 	.word	0x080090c4
 80010a8:	2000001c 	.word	0x2000001c
 80010ac:	2000026c 	.word	0x2000026c
 80010b0:	080090d4 	.word	0x080090d4
 80010b4:	20000888 	.word	0x20000888
 80010b8:	080090e8 	.word	0x080090e8
 80010bc:	20000270 	.word	0x20000270
 80010c0:	080090f8 	.word	0x080090f8
 80010c4:	0800910c 	.word	0x0800910c
 80010c8:	08009118 	.word	0x08009118
 80010cc:	08009128 	.word	0x08009128
 80010d0:	08009134 	.word	0x08009134
 80010d4:	08009144 	.word	0x08009144
 80010d8:	08009150 	.word	0x08009150

080010dc <Decode>:
void Decode(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  char *tmp=strstr(UART_str,"BTDATA");
 80010e2:	4907      	ldr	r1, [pc, #28]	@ (8001100 <Decode+0x24>)
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <Decode+0x28>)
 80010e6:	f005 fa62 	bl	80065ae <strstr>
 80010ea:	6078      	str	r0, [r7, #4]
  if (tmp!=NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <Decode+0x1a>
  {
    BTDecode();
 80010f2:	f7ff feb7 	bl	8000e64 <BTDecode>
  }
  
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800915c 	.word	0x0800915c
 8001104:	2000028c 	.word	0x2000028c

08001108 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if (huart==&huart1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_UART_RxCpltCallback+0x28>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_UART_RxCpltCallback+0x14>
  {
    Decode();
 8001118:	f7ff ffe0 	bl	80010dc <Decode>
  }
  memset(UART_str,0,sizeof(UART_str));
 800111c:	2250      	movs	r2, #80	@ 0x50
 800111e:	2100      	movs	r1, #0
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <HAL_UART_RxCpltCallback+0x2c>)
 8001122:	f005 fa2a 	bl	800657a <memset>
  //HAL_UART_Receive_IT(&huart1,UART_str,30);
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000840 	.word	0x20000840
 8001134:	2000028c 	.word	0x2000028c

08001138 <HAL_TIM_PeriodElapsedCallback>:
        break;
    }
  }
  OLED_ShowFrame();
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001148:	d10a      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    Time_Left--;
 800114a:	4b50      	ldr	r3, [pc, #320]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a4e      	ldr	r2, [pc, #312]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001152:	6013      	str	r3, [r2, #0]
    if (!Time_Left)
 8001154:	4b4d      	ldr	r3, [pc, #308]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
     HAL_PWR_EnterSTANDBYMode(); 
 800115c:	f001 ff42 	bl	8002fe4 <HAL_PWR_EnterSTANDBYMode>
    }
  }
  if (htim->Instance==TIM3)//htim3的周期：7.28*1e-5s
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4a      	ldr	r2, [pc, #296]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d153      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0xda>
  {
    Counter_Flag_Light++;
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a48      	ldr	r2, [pc, #288]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001172:	6013      	str	r3, [r2, #0]
    Counter_Flag_Sound++;
 8001174:	4b48      	ldr	r3, [pc, #288]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a47      	ldr	r2, [pc, #284]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800117c:	6013      	str	r3, [r2, #0]
    if (Counter_Flag_Light>(int)(0.5*Frequency_Light))
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f93e 	bl	8000404 <__aeabi_i2d>
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b44      	ldr	r3, [pc, #272]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fc4d 	bl	8000a38 <__aeabi_d2iz>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	da03      	bge.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
      Signal_Set_Light=0;
 80011a8:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e002      	b.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x7e>
    } else
    {
      Signal_Set_Light=1;
 80011b0:	4b3c      	ldr	r3, [pc, #240]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Sound>(int)(0.5*Frequency_Sound))
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f922 	bl	8000404 <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc31 	bl	8000a38 <__aeabi_d2iz>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	da03      	bge.n	80011e8 <HAL_TIM_PeriodElapsedCallback+0xb0>
    {
      Signal_Set_Sound=0;
 80011e0:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x174>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e002      	b.n	80011ee <HAL_TIM_PeriodElapsedCallback+0xb6>
    } else
    {
      Signal_Set_Sound=1;
 80011e8:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x174>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Light==Frequency_Light)
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d102      	bne.n	8001200 <HAL_TIM_PeriodElapsedCallback+0xc8>
    {
      Counter_Flag_Light=0;
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Sound==Frequency_Sound)
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d102      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0xda>
    {
      Counter_Flag_Sound=0;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
    }
  }
  if (htim->Instance==TIM4)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d133      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x14c>
  {
    Counter_Flag_TIM4++;
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a24      	ldr	r2, [pc, #144]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001224:	6013      	str	r3, [r2, #0]
    if (Counter_Flag_TIM4>Value_Light)
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dd05      	ble.n	800123e <HAL_TIM_PeriodElapsedCallback+0x106>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	4821      	ldr	r0, [pc, #132]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001238:	f001 fa08 	bl	800264c <HAL_GPIO_WritePin>
 800123c:	e007      	b.n	800124e <HAL_TIM_PeriodElapsedCallback+0x116>
    } else
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,Signal_Set_Light);
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	2110      	movs	r1, #16
 8001248:	481c      	ldr	r0, [pc, #112]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800124a:	f001 f9ff 	bl	800264c <HAL_GPIO_WritePin>
    }
    if (Counter_Flag_TIM4>Value_Sound)
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	dd05      	ble.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x12e>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001260:	f001 f9f4 	bl	800264c <HAL_GPIO_WritePin>
 8001264:	e007      	b.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x13e>
    } else
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,Signal_Set_Light);
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	2120      	movs	r1, #32
 8001270:	4812      	ldr	r0, [pc, #72]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001272:	f001 f9eb 	bl	800264c <HAL_GPIO_WritePin>
    }
    if (Counter_Flag_TIM4==10)
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d102      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x14c>
    {
      Counter_Flag_TIM4=0;
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000018 	.word	0x20000018
 8001290:	40000400 	.word	0x40000400
 8001294:	20000264 	.word	0x20000264
 8001298:	20000268 	.word	0x20000268
 800129c:	2000026c 	.word	0x2000026c
 80012a0:	3fe00000 	.word	0x3fe00000
 80012a4:	20000278 	.word	0x20000278
 80012a8:	20000270 	.word	0x20000270
 80012ac:	2000027c 	.word	0x2000027c
 80012b0:	40000800 	.word	0x40000800
 80012b4:	20000274 	.word	0x20000274
 80012b8:	20000000 	.word	0x20000000
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	20000004 	.word	0x20000004
 80012c4:	00000000 	.word	0x00000000

080012c8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  uint_fast32_t Now_Tick=HAL_GetTick();
 80012d2:	f000 fe6d 	bl	8001fb0 <HAL_GetTick>
 80012d6:	60f8      	str	r0, [r7, #12]
  if(Now_Tick-Last_Tick<10){
 80012d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x250>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d803      	bhi.n	80012ec <HAL_GPIO_EXTI_Callback+0x24>
    Last_Tick=Now_Tick;
 80012e4:	4a8c      	ldr	r2, [pc, #560]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x250>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6013      	str	r3, [r2, #0]
    return;
 80012ea:	e161      	b.n	80015b0 <HAL_GPIO_EXTI_Callback+0x2e8>
  }
  Last_Tick=Now_Tick;
 80012ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x250>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6013      	str	r3, [r2, #0]
  if (GPIO_Pin==GPIO_PIN_4&&Menu_State)
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d17c      	bne.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
 80012f8:	4b88      	ldr	r3, [pc, #544]	@ (800151c <HAL_GPIO_EXTI_Callback+0x254>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d078      	beq.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
  {
    switch (State)
 8001300:	4b87      	ldr	r3, [pc, #540]	@ (8001520 <HAL_GPIO_EXTI_Callback+0x258>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d873      	bhi.n	80013f0 <HAL_GPIO_EXTI_Callback+0x128>
 8001308:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <HAL_GPIO_EXTI_Callback+0x48>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001325 	.word	0x08001325
 8001314:	0800136b 	.word	0x0800136b
 8001318:	080013b1 	.word	0x080013b1
 800131c:	080013cb 	.word	0x080013cb
 8001320:	080013e5 	.word	0x080013e5
    {
      case 0:
        Set_LightFrequency+=0.1;
 8001324:	4b7f      	ldr	r3, [pc, #508]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132a:	a379      	add	r3, pc, #484	@ (adr r3, 8001510 <HAL_GPIO_EXTI_Callback+0x248>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7fe ff1c 	bl	800016c <__adddf3>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	497a      	ldr	r1, [pc, #488]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
        Set_LightFrequency=Set_LightFrequency>40?40:Set_LightFrequency;
 800133e:	4b79      	ldr	r3, [pc, #484]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b77      	ldr	r3, [pc, #476]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x260>)
 800134a:	f7ff fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_EXTI_Callback+0x94>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x260>)
 800135a:	e002      	b.n	8001362 <HAL_GPIO_EXTI_Callback+0x9a>
 800135c:	4b71      	ldr	r3, [pc, #452]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	4970      	ldr	r1, [pc, #448]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001368:	e043      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
      case 1:
        Set_SoundFrequency+=0.1;
 800136a:	4b70      	ldr	r3, [pc, #448]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	a367      	add	r3, pc, #412	@ (adr r3, 8001510 <HAL_GPIO_EXTI_Callback+0x248>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7fe fef9 	bl	800016c <__adddf3>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	496b      	ldr	r1, [pc, #428]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 8001380:	e9c1 2300 	strd	r2, r3, [r1]
        Set_SoundFrequency=Set_SoundFrequency>40?40:Set_SoundFrequency;
 8001384:	4b69      	ldr	r3, [pc, #420]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 8001386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x260>)
 8001390:	f7ff fb32 	bl	80009f8 <__aeabi_dcmpgt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_EXTI_Callback+0xda>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <HAL_GPIO_EXTI_Callback+0x260>)
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_EXTI_Callback+0xe0>
 80013a2:	4b62      	ldr	r3, [pc, #392]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	4960      	ldr	r1, [pc, #384]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80013ae:	e020      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
      case 2:
        Value_Light++;
 80013b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80013b8:	6013      	str	r3, [r2, #0]
        Value_Light=Value_Light>10?10:Value_Light;
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	bfa8      	it	ge
 80013c2:	230a      	movge	r3, #10
 80013c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80013c6:	6013      	str	r3, [r2, #0]
        break;
 80013c8:	e013      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
      case 3:
        Value_Sound++;
 80013ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a58      	ldr	r2, [pc, #352]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013d2:	6013      	str	r3, [r2, #0]
        Value_Sound=Value_Sound>10?10:Value_Sound;
 80013d4:	4b57      	ldr	r3, [pc, #348]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b0a      	cmp	r3, #10
 80013da:	bfa8      	it	ge
 80013dc:	230a      	movge	r3, #10
 80013de:	4a55      	ldr	r2, [pc, #340]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013e0:	6013      	str	r3, [r2, #0]
        break;
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
      case 4:
        Time_Left++;
 80013e4:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x270>)
 80013ec:	6013      	str	r3, [r2, #0]
        break;
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0x12a>
      default:
        break;
 80013f0:	bf00      	nop
    }
  }
  if (GPIO_Pin==GPIO_PIN_5&&Menu_State)
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	d17a      	bne.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
 80013f8:	4b48      	ldr	r3, [pc, #288]	@ (800151c <HAL_GPIO_EXTI_Callback+0x254>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d076      	beq.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
  {
    switch (State)
 8001400:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <HAL_GPIO_EXTI_Callback+0x258>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d871      	bhi.n	80014ec <HAL_GPIO_EXTI_Callback+0x224>
 8001408:	a201      	add	r2, pc, #4	@ (adr r2, 8001410 <HAL_GPIO_EXTI_Callback+0x148>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001425 	.word	0x08001425
 8001414:	0800146b 	.word	0x0800146b
 8001418:	080014b1 	.word	0x080014b1
 800141c:	080014c9 	.word	0x080014c9
 8001420:	080014e1 	.word	0x080014e1
    {
      case 0:
        Set_LightFrequency-=0.1;
 8001424:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142a:	a339      	add	r3, pc, #228	@ (adr r3, 8001510 <HAL_GPIO_EXTI_Callback+0x248>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7fe fe9a 	bl	8000168 <__aeabi_dsub>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	493a      	ldr	r1, [pc, #232]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
        Set_LightFrequency=Set_LightFrequency<37?37:Set_LightFrequency;
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <HAL_GPIO_EXTI_Callback+0x274>)
 800144a:	f7ff fab7 	bl	80009bc <__aeabi_dcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_EXTI_Callback+0x194>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_GPIO_EXTI_Callback+0x274>)
 800145a:	e002      	b.n	8001462 <HAL_GPIO_EXTI_Callback+0x19a>
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4930      	ldr	r1, [pc, #192]	@ (8001524 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001464:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001468:	e041      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
      case 1:
        Set_SoundFrequency-=0.1;
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 800146c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001470:	a327      	add	r3, pc, #156	@ (adr r3, 8001510 <HAL_GPIO_EXTI_Callback+0x248>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7fe fe77 	bl	8000168 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	492b      	ldr	r1, [pc, #172]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 8001480:	e9c1 2300 	strd	r2, r3, [r1]
        Set_SoundFrequency=Set_SoundFrequency<37?37:Set_SoundFrequency;
 8001484:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 8001486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_GPIO_EXTI_Callback+0x274>)
 8001490:	f7ff fa94 	bl	80009bc <__aeabi_dcmplt>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_EXTI_Callback+0x1da>
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_GPIO_EXTI_Callback+0x274>)
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_EXTI_Callback+0x1e0>
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	4920      	ldr	r1, [pc, #128]	@ (800152c <HAL_GPIO_EXTI_Callback+0x264>)
 80014aa:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80014ae:	e01e      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
      case 2:
        Value_Light--;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80014b8:	6013      	str	r3, [r2, #0]
        Value_Light=Value_Light<0?0:Value_Light;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80014c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <HAL_GPIO_EXTI_Callback+0x268>)
 80014c4:	6013      	str	r3, [r2, #0]
        break;
 80014c6:	e012      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
      case 3:
        Value_Sound--;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80014d0:	6013      	str	r3, [r2, #0]
        Value_Sound=Value_Sound<0?0:Value_Sound;
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80014da:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x26c>)
 80014dc:	6013      	str	r3, [r2, #0]
        break;
 80014de:	e006      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
      case 4:
        Time_Left--;
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x270>)
 80014e8:	6013      	str	r3, [r2, #0]
        break;
 80014ea:	e000      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x226>
      default:
        break;
 80014ec:	bf00      	nop
    }
  }
  if (GPIO_Pin==GPIO_PIN_6&&Menu_State)
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	2b40      	cmp	r3, #64	@ 0x40
 80014f2:	d12a      	bne.n	800154a <HAL_GPIO_EXTI_Callback+0x282>
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_GPIO_EXTI_Callback+0x254>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d026      	beq.n	800154a <HAL_GPIO_EXTI_Callback+0x282>
  {
    if (State+1==5)
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_GPIO_EXTI_Callback+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d11d      	bne.n	8001540 <HAL_GPIO_EXTI_Callback+0x278>
    {
      State=0;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_GPIO_EXTI_Callback+0x258>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e01e      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x282>
 800150c:	f3af 8000 	nop.w
 8001510:	9999999a 	.word	0x9999999a
 8001514:	3fb99999 	.word	0x3fb99999
 8001518:	20000288 	.word	0x20000288
 800151c:	20000284 	.word	0x20000284
 8001520:	20000280 	.word	0x20000280
 8001524:	20000008 	.word	0x20000008
 8001528:	40440000 	.word	0x40440000
 800152c:	20000010 	.word	0x20000010
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	20000018 	.word	0x20000018
 800153c:	40428000 	.word	0x40428000
    } else
    {
      State++;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001548:	6013      	str	r3, [r2, #0]
    }
  }
  if (GPIO_Pin==GPIO_PIN_7)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b80      	cmp	r3, #128	@ 0x80
 800154e:	d109      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x29c>
  {
    Menu_State=!Menu_State;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001562:	601a      	str	r2, [r3, #0]
  }
  Frequency_Light=(int)(Func/Set_LightFrequency);
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff4b 	bl	8000404 <__aeabi_i2d>
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f8da 	bl	800072c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa5a 	bl	8000a38 <__aeabi_d2iz>
 8001584:	4603      	mov	r3, r0
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001588:	6013      	str	r3, [r2, #0]
  Frequency_Sound=(int)(Func/Set_SoundFrequency);
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff38 	bl	8000404 <__aeabi_i2d>
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_GPIO_EXTI_Callback+0x304>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f8c7 	bl	800072c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa47 	bl	8000a38 <__aeabi_d2iz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_GPIO_EXTI_Callback+0x308>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000280 	.word	0x20000280
 80015bc:	20000284 	.word	0x20000284
 80015c0:	2000001c 	.word	0x2000001c
 80015c4:	20000008 	.word	0x20000008
 80015c8:	2000026c 	.word	0x2000026c
 80015cc:	20000010 	.word	0x20000010
 80015d0:	20000270 	.word	0x20000270

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x8>

080015e0 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	2178      	movs	r1, #120	@ 0x78
 80015fa:	4803      	ldr	r0, [pc, #12]	@ (8001608 <OLED_Send+0x28>)
 80015fc:	f001 f99a 	bl	8002934 <HAL_I2C_Master_Transmit>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000210 	.word	0x20000210

0800160c <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <OLED_SendCmd+0x20>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 800161c:	2102      	movs	r1, #2
 800161e:	4803      	ldr	r0, [pc, #12]	@ (800162c <OLED_SendCmd+0x20>)
 8001620:	f7ff ffde 	bl	80015e0 <OLED_Send>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200006dc 	.word	0x200006dc

08001630 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001634:	20ae      	movs	r0, #174	@ 0xae
 8001636:	f7ff ffe9 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x20);
 800163a:	2020      	movs	r0, #32
 800163c:	f7ff ffe6 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001640:	2010      	movs	r0, #16
 8001642:	f7ff ffe3 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001646:	20b0      	movs	r0, #176	@ 0xb0
 8001648:	f7ff ffe0 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 800164c:	20c8      	movs	r0, #200	@ 0xc8
 800164e:	f7ff ffdd 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff ffda 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001658:	2010      	movs	r0, #16
 800165a:	f7ff ffd7 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x40);
 800165e:	2040      	movs	r0, #64	@ 0x40
 8001660:	f7ff ffd4 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001664:	2081      	movs	r0, #129	@ 0x81
 8001666:	f7ff ffd1 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 800166a:	20df      	movs	r0, #223	@ 0xdf
 800166c:	f7ff ffce 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001670:	20a1      	movs	r0, #161	@ 0xa1
 8001672:	f7ff ffcb 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001676:	20a6      	movs	r0, #166	@ 0xa6
 8001678:	f7ff ffc8 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 800167c:	20a8      	movs	r0, #168	@ 0xa8
 800167e:	f7ff ffc5 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001682:	203f      	movs	r0, #63	@ 0x3f
 8001684:	f7ff ffc2 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001688:	20a4      	movs	r0, #164	@ 0xa4
 800168a:	f7ff ffbf 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 800168e:	20d3      	movs	r0, #211	@ 0xd3
 8001690:	f7ff ffbc 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff ffb9 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 800169a:	20d5      	movs	r0, #213	@ 0xd5
 800169c:	f7ff ffb6 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80016a0:	20f0      	movs	r0, #240	@ 0xf0
 80016a2:	f7ff ffb3 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80016a6:	20d9      	movs	r0, #217	@ 0xd9
 80016a8:	f7ff ffb0 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80016ac:	2022      	movs	r0, #34	@ 0x22
 80016ae:	f7ff ffad 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80016b2:	20da      	movs	r0, #218	@ 0xda
 80016b4:	f7ff ffaa 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80016b8:	2012      	movs	r0, #18
 80016ba:	f7ff ffa7 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80016be:	20db      	movs	r0, #219	@ 0xdb
 80016c0:	f7ff ffa4 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80016c4:	2020      	movs	r0, #32
 80016c6:	f7ff ffa1 	bl	800160c <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80016ca:	208d      	movs	r0, #141	@ 0x8d
 80016cc:	f7ff ff9e 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80016d0:	2014      	movs	r0, #20
 80016d2:	f7ff ff9b 	bl	800160c <OLED_SendCmd>

  OLED_NewFrame();
 80016d6:	f000 f815 	bl	8001704 <OLED_NewFrame>
  OLED_ShowFrame();
 80016da:	f000 f81f 	bl	800171c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80016de:	20af      	movs	r0, #175	@ 0xaf
 80016e0:	f7ff ff94 	bl	800160c <OLED_SendCmd>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <OLED_DisPlay_On>:

/**
 * @brief 开启OLED显示
 */
void OLED_DisPlay_On()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  OLED_SendCmd(0x8D); // 电荷泵使能
 80016ec:	208d      	movs	r0, #141	@ 0x8d
 80016ee:	f7ff ff8d 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0x14); // 开启电荷泵
 80016f2:	2014      	movs	r0, #20
 80016f4:	f7ff ff8a 	bl	800160c <OLED_SendCmd>
  OLED_SendCmd(0xAF); // 点亮屏幕
 80016f8:	20af      	movs	r0, #175	@ 0xaf
 80016fa:	f7ff ff87 	bl	800160c <OLED_SendCmd>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001708:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170c:	2100      	movs	r1, #0
 800170e:	4802      	ldr	r0, [pc, #8]	@ (8001718 <OLED_NewFrame+0x14>)
 8001710:	f004 ff33 	bl	800657a <memset>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002dc 	.word	0x200002dc

0800171c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <OLED_ShowFrame+0x5c>)
 8001724:	2240      	movs	r2, #64	@ 0x40
 8001726:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	e01b      	b.n	8001766 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3b50      	subs	r3, #80	@ 0x50
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff69 	bl	800160c <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff ff66 	bl	800160c <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001740:	2010      	movs	r0, #16
 8001742:	f7ff ff63 	bl	800160c <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <OLED_ShowFrame+0x60>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <OLED_ShowFrame+0x64>)
 800174e:	4413      	add	r3, r2
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	4619      	mov	r1, r3
 8001754:	f004 ffc7 	bl	80066e6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001758:	2181      	movs	r1, #129	@ 0x81
 800175a:	4807      	ldr	r0, [pc, #28]	@ (8001778 <OLED_ShowFrame+0x5c>)
 800175c:	f7ff ff40 	bl	80015e0 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	3301      	adds	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b07      	cmp	r3, #7
 800176a:	d9e0      	bls.n	800172e <OLED_ShowFrame+0x12>
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200006e0 	.word	0x200006e0
 800177c:	200006e1 	.word	0x200006e1
 8001780:	200002dc 	.word	0x200002dc

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <HAL_MspInit+0x5c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_MspInit+0x60>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_MspInit+0x60>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <NMI_Handler+0x4>

080017f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <MemManage_Handler+0x4>

08001800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <UsageFault_Handler+0x4>

08001810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 fba8 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001844:	2010      	movs	r0, #16
 8001846:	f000 ff19 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}

0800184e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001852:	2020      	movs	r0, #32
 8001854:	f000 ff12 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001858:	2040      	movs	r0, #64	@ 0x40
 800185a:	f000 ff0f 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800185e:	2080      	movs	r0, #128	@ 0x80
 8001860:	f000 ff0c 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM2_IRQHandler+0x10>)
 800186e:	f002 f883 	bl	8003978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000768 	.word	0x20000768

0800187c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM3_IRQHandler+0x10>)
 8001882:	f002 f879 	bl	8003978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200007b0 	.word	0x200007b0

08001890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM4_IRQHandler+0x10>)
 8001896:	f002 f86f 	bl	8003978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200007f8 	.word	0x200007f8

080018a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <USART1_IRQHandler+0x10>)
 80018aa:	f002 fcb9 	bl	8004220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000840 	.word	0x20000840

080018b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <USART2_IRQHandler+0x10>)
 80018be:	f002 fcaf 	bl	8004220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000888 	.word	0x20000888

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <_kill>:

int _kill(int pid, int sig)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e4:	f004 fec4 	bl	8006670 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2216      	movs	r2, #22
 80018ec:	601a      	str	r2, [r3, #0]
  return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_exit>:

void _exit (int status)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001902:	f04f 31ff 	mov.w	r1, #4294967295
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffe7 	bl	80018da <_kill>
  while (1) {}    /* Make sure we hang here */
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <_exit+0x12>

08001910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e00a      	b.n	8001938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001922:	f3af 8000 	nop.w
 8001926:	4601      	mov	r1, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf0      	blt.n	8001922 <_read+0x12>
  }

  return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e009      	b.n	8001970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf1      	blt.n	800195c <_write+0x12>
  }
  return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:

int _close(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a8:	605a      	str	r2, [r3, #4]
  return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f004 fe2c 	bl	8006670 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20005000 	.word	0x20005000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20000764 	.word	0x20000764
 8001a4c:	20000a20 	.word	0x20000a20

08001a50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a82:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8001a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001aa4:	f001 fec6 	bl	8003834 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aae:	f7ff fd91 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001ac0:	f002 f862 	bl	8003b88 <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aca:	f7ff fd83 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_TIM2_Init+0x98>)
 8001adc:	f002 fa38 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ae6:	f7ff fd75 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000768 	.word	0x20000768

08001af8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b16:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <MX_TIM3_Init+0x98>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1311;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b1c:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3a:	4814      	ldr	r0, [pc, #80]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b3c:	f001 fe7a 	bl	8003834 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b46:	f7ff fd45 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b58:	f002 f816 	bl	8003b88 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b62:	f7ff fd37 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <MX_TIM3_Init+0x94>)
 8001b74:	f002 f9ec 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b7e:	f7ff fd29 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200007b0 	.word	0x200007b0
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <MX_TIM4_Init+0x94>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bb8:	223c      	movs	r2, #60	@ 0x3c
 8001bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bc4:	223c      	movs	r2, #60	@ 0x3c
 8001bc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bd4:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bd6:	f001 fe2d 	bl	8003834 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001be0:	f7ff fcf8 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001bf2:	f001 ffc9 	bl	8003b88 <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001bfc:	f7ff fcea 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_TIM4_Init+0x90>)
 8001c0e:	f002 f99f 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001c18:	f7ff fcdc 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200007f8 	.word	0x200007f8
 8001c28:	40000800 	.word	0x40000800

08001c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3c:	d114      	bne.n	8001c68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	201c      	movs	r0, #28
 8001c5c:	f000 fa89 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c60:	201c      	movs	r0, #28
 8001c62:	f000 faa2 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c66:	e032      	b.n	8001cce <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <HAL_TIM_Base_MspInit+0xb0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d114      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201d      	movs	r0, #29
 8001c90:	f000 fa6f 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c94:	201d      	movs	r0, #29
 8001c96:	f000 fa88 	bl	80021aa <HAL_NVIC_EnableIRQ>
}
 8001c9a:	e018      	b.n	8001cce <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce0 <HAL_TIM_Base_MspInit+0xb4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d113      	bne.n	8001cce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_TIM_Base_MspInit+0xac>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201e      	movs	r0, #30
 8001cc4:	f000 fa55 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cc8:	201e      	movs	r0, #30
 8001cca:	f000 fa6e 	bl	80021aa <HAL_NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800

08001ce4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <MX_USART1_UART_Init+0x50>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	f002 f988 	bl	8004030 <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d26:	f7ff fc55 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000840 	.word	0x20000840
 8001d34:	40013800 	.word	0x40013800

08001d38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f002 f95e 	bl	8004030 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f7ff fc2b 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000888 	.word	0x20000888
 8001d88:	40004400 	.word	0x40004400

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <HAL_UART_MspInit+0x118>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d13a      	bne.n	8001e22 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a37      	ldr	r2, [pc, #220]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b35      	ldr	r3, [pc, #212]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	4619      	mov	r1, r3
 8001df0:	482e      	ldr	r0, [pc, #184]	@ (8001eac <HAL_UART_MspInit+0x120>)
 8001df2:	f000 faa7 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4828      	ldr	r0, [pc, #160]	@ (8001eac <HAL_UART_MspInit+0x120>)
 8001e0c:	f000 fa9a 	bl	8002344 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2025      	movs	r0, #37	@ 0x25
 8001e16:	f000 f9ac 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e1a:	2025      	movs	r0, #37	@ 0x25
 8001e1c:	f000 f9c5 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e20:	e03c      	b.n	8001e9c <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a22      	ldr	r2, [pc, #136]	@ (8001eb0 <HAL_UART_MspInit+0x124>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d137      	bne.n	8001e9c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e36:	61d3      	str	r3, [r2, #28]
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_UART_MspInit+0x11c>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0318 	add.w	r3, r7, #24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480f      	ldr	r0, [pc, #60]	@ (8001eac <HAL_UART_MspInit+0x120>)
 8001e70:	f000 fa68 	bl	8002344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e74:	2308      	movs	r3, #8
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0318 	add.w	r3, r7, #24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <HAL_UART_MspInit+0x120>)
 8001e88:	f000 fa5c 	bl	8002344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2026      	movs	r0, #38	@ 0x26
 8001e92:	f000 f96e 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e96:	2026      	movs	r0, #38	@ 0x26
 8001e98:	f000 f987 	bl	80021aa <HAL_NVIC_EnableIRQ>
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff fdcc 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eba:	490c      	ldr	r1, [pc, #48]	@ (8001eec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed0:	4c09      	ldr	r4, [pc, #36]	@ (8001ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f004 fbcd 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee2:	f7fe ff11 	bl	8000d08 <main>
  bx lr
 8001ee6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ef0:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 8001ef4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001ef8:	20000a20 	.word	0x20000a20

08001efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC1_2_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x28>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x28>)
 8001f0a:	f043 0310 	orr.w	r3, r3, #16
 8001f0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f923 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	200f      	movs	r0, #15
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fc32 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f93b 	bl	80021c6 <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f903 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000020 	.word	0x20000020
 8001f84:	20000028 	.word	0x20000028
 8001f88:	20000024 	.word	0x20000024

08001f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_IncTick+0x1c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_IncTick+0x20>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a03      	ldr	r2, [pc, #12]	@ (8001fac <HAL_IncTick+0x20>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000028 	.word	0x20000028
 8001fac:	200008d0 	.word	0x200008d0

08001fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_GetTick+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	200008d0 	.word	0x200008d0

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	@ (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	@ (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff90 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff2d 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff42 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff35 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d008      	beq.n	8002208 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e020      	b.n	800224a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 020e 	bic.w	r2, r2, #14
 8002216:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d005      	beq.n	8002278 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2204      	movs	r2, #4
 8002270:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e051      	b.n	800231c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020e 	bic.w	r2, r2, #14
 8002286:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <HAL_DMA_Abort_IT+0xd4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d029      	beq.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a21      	ldr	r2, [pc, #132]	@ (800232c <HAL_DMA_Abort_IT+0xd8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_DMA_Abort_IT+0x9e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <HAL_DMA_Abort_IT+0xdc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01a      	beq.n	80022ec <HAL_DMA_Abort_IT+0x98>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002334 <HAL_DMA_Abort_IT+0xe0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d012      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x92>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002338 <HAL_DMA_Abort_IT+0xe4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00a      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x8c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1b      	ldr	r2, [pc, #108]	@ (800233c <HAL_DMA_Abort_IT+0xe8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d102      	bne.n	80022da <HAL_DMA_Abort_IT+0x86>
 80022d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022d8:	e00e      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022de:	e00b      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e4:	e008      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	e005      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f0:	e002      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022f2:	2310      	movs	r3, #16
 80022f4:	e000      	b.n	80022f8 <HAL_DMA_Abort_IT+0xa4>
 80022f6:	2301      	movs	r3, #1
 80022f8:	4a11      	ldr	r2, [pc, #68]	@ (8002340 <HAL_DMA_Abort_IT+0xec>)
 80022fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
    } 
  }
  return status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020008 	.word	0x40020008
 800232c:	4002001c 	.word	0x4002001c
 8002330:	40020030 	.word	0x40020030
 8002334:	40020044 	.word	0x40020044
 8002338:	40020058 	.word	0x40020058
 800233c:	4002006c 	.word	0x4002006c
 8002340:	40020000 	.word	0x40020000

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b08b      	sub	sp, #44	@ 0x2c
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e169      	b.n	800262c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002358:	2201      	movs	r2, #1
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 8158 	bne.w	8002626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a9a      	ldr	r2, [pc, #616]	@ (80025e4 <HAL_GPIO_Init+0x2a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d05e      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002380:	4a98      	ldr	r2, [pc, #608]	@ (80025e4 <HAL_GPIO_Init+0x2a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d875      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002386:	4a98      	ldr	r2, [pc, #608]	@ (80025e8 <HAL_GPIO_Init+0x2a4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d058      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 800238c:	4a96      	ldr	r2, [pc, #600]	@ (80025e8 <HAL_GPIO_Init+0x2a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d86f      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002392:	4a96      	ldr	r2, [pc, #600]	@ (80025ec <HAL_GPIO_Init+0x2a8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d052      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002398:	4a94      	ldr	r2, [pc, #592]	@ (80025ec <HAL_GPIO_Init+0x2a8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d869      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 800239e:	4a94      	ldr	r2, [pc, #592]	@ (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04c      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023a4:	4a92      	ldr	r2, [pc, #584]	@ (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d863      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023aa:	4a92      	ldr	r2, [pc, #584]	@ (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d046      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023b0:	4a90      	ldr	r2, [pc, #576]	@ (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d85d      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d82a      	bhi.n	8002410 <HAL_GPIO_Init+0xcc>
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d859      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <HAL_GPIO_Init+0x80>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	08002419 	.word	0x08002419
 80023cc:	0800242b 	.word	0x0800242b
 80023d0:	0800246d 	.word	0x0800246d
 80023d4:	08002473 	.word	0x08002473
 80023d8:	08002473 	.word	0x08002473
 80023dc:	08002473 	.word	0x08002473
 80023e0:	08002473 	.word	0x08002473
 80023e4:	08002473 	.word	0x08002473
 80023e8:	08002473 	.word	0x08002473
 80023ec:	08002473 	.word	0x08002473
 80023f0:	08002473 	.word	0x08002473
 80023f4:	08002473 	.word	0x08002473
 80023f8:	08002473 	.word	0x08002473
 80023fc:	08002473 	.word	0x08002473
 8002400:	08002473 	.word	0x08002473
 8002404:	08002473 	.word	0x08002473
 8002408:	08002421 	.word	0x08002421
 800240c:	08002435 	.word	0x08002435
 8002410:	4a79      	ldr	r2, [pc, #484]	@ (80025f8 <HAL_GPIO_Init+0x2b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002416:	e02c      	b.n	8002472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	623b      	str	r3, [r7, #32]
          break;
 800241e:	e029      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e024      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	3308      	adds	r3, #8
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e01f      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	330c      	adds	r3, #12
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e01a      	b.n	8002474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002446:	2304      	movs	r3, #4
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e013      	b.n	8002474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	611a      	str	r2, [r3, #16]
          break;
 800245e:	e009      	b.n	8002474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002460:	2308      	movs	r3, #8
 8002462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	615a      	str	r2, [r3, #20]
          break;
 800246a:	e003      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
          break;
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x130>
          break;
 8002472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2bff      	cmp	r3, #255	@ 0xff
 8002478:	d801      	bhi.n	800247e <HAL_GPIO_Init+0x13a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_Init+0x13e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2bff      	cmp	r3, #255	@ 0xff
 8002488:	d802      	bhi.n	8002490 <HAL_GPIO_Init+0x14c>
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x152>
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	3b08      	subs	r3, #8
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	210f      	movs	r1, #15
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	6a39      	ldr	r1, [r7, #32]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	431a      	orrs	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80b1 	beq.w	8002626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c4:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <HAL_GPIO_Init+0x2b8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	@ (80025fc <HAL_GPIO_Init+0x2b8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b4a      	ldr	r3, [pc, #296]	@ (80025fc <HAL_GPIO_Init+0x2b8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024dc:	4a48      	ldr	r2, [pc, #288]	@ (8002600 <HAL_GPIO_Init+0x2bc>)
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a40      	ldr	r2, [pc, #256]	@ (8002604 <HAL_GPIO_Init+0x2c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1ec>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3f      	ldr	r2, [pc, #252]	@ (8002608 <HAL_GPIO_Init+0x2c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1e8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3e      	ldr	r2, [pc, #248]	@ (800260c <HAL_GPIO_Init+0x2c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1e4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <HAL_GPIO_Init+0x2cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1e0>
 8002520:	2303      	movs	r3, #3
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002524:	2304      	movs	r3, #4
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002528:	2302      	movs	r3, #2
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	492f      	ldr	r1, [pc, #188]	@ (8002600 <HAL_GPIO_Init+0x2bc>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	492c      	ldr	r1, [pc, #176]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4928      	ldr	r1, [pc, #160]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4922      	ldr	r1, [pc, #136]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	491e      	ldr	r1, [pc, #120]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4918      	ldr	r1, [pc, #96]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4914      	ldr	r1, [pc, #80]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d021      	beq.n	8002618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	490e      	ldr	r1, [pc, #56]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e021      	b.n	8002626 <HAL_GPIO_Init+0x2e2>
 80025e2:	bf00      	nop
 80025e4:	10320000 	.word	0x10320000
 80025e8:	10310000 	.word	0x10310000
 80025ec:	10220000 	.word	0x10220000
 80025f0:	10210000 	.word	0x10210000
 80025f4:	10120000 	.word	0x10120000
 80025f8:	10110000 	.word	0x10110000
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	40010800 	.word	0x40010800
 8002608:	40010c00 	.word	0x40010c00
 800260c:	40011000 	.word	0x40011000
 8002610:	40011400 	.word	0x40011400
 8002614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_GPIO_Init+0x304>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4909      	ldr	r1, [pc, #36]	@ (8002648 <HAL_GPIO_Init+0x304>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae8e 	bne.w	8002358 <HAL_GPIO_Init+0x14>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	372c      	adds	r7, #44	@ 0x2c
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fe14 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12b      	b.n	8002916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fada 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f001 f84a 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a81      	ldr	r2, [pc, #516]	@ (8002920 <HAL_I2C_Init+0x274>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a80      	ldr	r2, [pc, #512]	@ (8002924 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a7d      	ldr	r2, [pc, #500]	@ (8002928 <HAL_I2C_Init+0x27c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e7      	b.n	8002916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a78      	ldr	r2, [pc, #480]	@ (800292c <HAL_I2C_Init+0x280>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a6a      	ldr	r2, [pc, #424]	@ (8002920 <HAL_I2C_Init+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a69      	ldr	r2, [pc, #420]	@ (8002930 <HAL_I2C_Init+0x284>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	495c      	ldr	r1, [pc, #368]	@ (8002920 <HAL_I2C_Init+0x274>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d819      	bhi.n	80027e8 <HAL_I2C_Init+0x13c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_I2C_Init+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	e051      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e04f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_I2C_Init+0x168>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_I2C_Init+0x18e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	0099      	lsls	r1, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x196>
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <HAL_I2C_Init+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e58      	subs	r0, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	fbb0 f3f3 	udiv	r3, r0, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6911      	ldr	r1, [r2, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	000186a0 	.word	0x000186a0
 8002924:	001e847f 	.word	0x001e847f
 8002928:	003d08ff 	.word	0x003d08ff
 800292c:	431bde83 	.word	0x431bde83
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	461a      	mov	r2, r3
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
 8002944:	4613      	mov	r3, r2
 8002946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fb32 	bl	8001fb0 <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 80e0 	bne.w	8002b1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	4970      	ldr	r1, [pc, #448]	@ (8002b28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f964 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e0d3      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x50>
 8002980:	2302      	movs	r3, #2
 8002982:	e0cc      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	@ 0x21
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a50      	ldr	r2, [pc, #320]	@ (8002b2c <HAL_I2C_Master_Transmit+0x1f8>)
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f89c 	bl	8002b30 <I2C_MasterRequestWrite>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e08d      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a18:	e066      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa22 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06b      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11b      	bne.n	8002abc <HAL_I2C_Master_Transmit+0x188>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa19 	bl	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d194      	bne.n	8002a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00100002 	.word	0x00100002
 8002b2c:	ffff0000 	.word	0xffff0000

08002b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestWrite+0x2a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d107      	bne.n	8002b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f84f 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e035      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e01b      	b.n	8002c0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	490e      	ldr	r1, [pc, #56]	@ (8002c2c <I2C_MasterRequestWrite+0xfc>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f898 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e010      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <I2C_MasterRequestWrite+0x100>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f888 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010008 	.word	0x00010008
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e048      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d044      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7ff f9af 	bl	8001fb0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d139      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	e00c      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d116      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e023      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d093      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d36:	e071      	b.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	d123      	bne.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e067      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d041      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7ff f90a 	bl	8001fb0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d136      	bne.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e00b      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e021      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10c      	bne.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e00b      	b.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af6d 	bne.w	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e034      	b.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f886 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e034      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d028      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff f88f 	bl	8001fb0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11d      	bne.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eae:	2b80      	cmp	r3, #128	@ 0x80
 8002eb0:	d016      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b80      	cmp	r3, #128	@ 0x80
 8002eec:	d1c3      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f83e 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d028      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7ff f847 	bl	8001fb0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11d      	bne.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d016      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d1c3      	bne.n	8002f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9e:	d11b      	bne.n	8002fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002fe8:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a07      	ldr	r2, [pc, #28]	@ (800300c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003000:	bf30      	wfi
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40007000 	.word	0x40007000
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e272      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	4b92      	ldr	r3, [pc, #584]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4b8f      	ldr	r3, [pc, #572]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b89      	ldr	r3, [pc, #548]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e24c      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b80      	ldr	r3, [pc, #512]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7f      	ldr	r2, [pc, #508]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b78      	ldr	r3, [pc, #480]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b72      	ldr	r3, [pc, #456]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b68      	ldr	r3, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff5e 	bl	8001fb0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe ff5a 	bl	8001fb0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e200      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe ff4a 	bl	8001fb0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe ff46 	bl	8001fb0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1ec      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314e:	4b4c      	ldr	r3, [pc, #304]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800315a:	4b49      	ldr	r3, [pc, #292]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1c0      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4939      	ldr	r1, [pc, #228]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe feff 	bl	8001fb0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe fefb 	bl	8001fb0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4927      	ldr	r1, [pc, #156]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe fede 	bl	8001fb0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe feda 	bl	8001fb0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e180      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe febe 	bl	8001fb0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe feba 	bl	8001fb0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e160      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 face 	bl	80037f8 <RCC_Delay>
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe fea4 	bl	8001fb0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	e00f      	b.n	800328c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe fea0 	bl	8001fb0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e146      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b92      	ldr	r3, [pc, #584]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e9      	bne.n	800326c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b8b      	ldr	r3, [pc, #556]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a87      	ldr	r2, [pc, #540]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b82      	ldr	r3, [pc, #520]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fe61 	bl	8001fb0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fe5d 	bl	8001fb0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	@ 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e103      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b75      	ldr	r3, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a6e      	ldr	r2, [pc, #440]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e02d      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x334>
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a69      	ldr	r2, [pc, #420]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	4b67      	ldr	r3, [pc, #412]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a66      	ldr	r2, [pc, #408]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x356>
 8003350:	4b61      	ldr	r3, [pc, #388]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 800336a:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a5a      	ldr	r2, [pc, #360]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a57      	ldr	r2, [pc, #348]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe fe11 	bl	8001fb0 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fe0d 	bl	8001fb0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0b1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fdfb 	bl	8001fb0 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fdf7 	bl	8001fb0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e09b      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b40      	ldr	r3, [pc, #256]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b3c      	ldr	r3, [pc, #240]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8087 	beq.w	800350a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d061      	beq.n	80034cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d146      	bne.n	800349e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b33      	ldr	r3, [pc, #204]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fdcb 	bl	8001fb0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fdc7 	bl	8001fb0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e06d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	4b29      	ldr	r3, [pc, #164]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4921      	ldr	r1, [pc, #132]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a19      	ldr	r1, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	491b      	ldr	r1, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fd9b 	bl	8001fb0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe fd97 	bl	8001fb0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
 800349c:	e035      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fd84 	bl	8001fb0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fd80 	bl	8001fb0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e026      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
 80034ca:	e01e      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e019      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x500>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d0      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4965      	ldr	r1, [pc, #404]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a58      	ldr	r2, [pc, #352]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800357e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d040      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e073      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06b      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4936      	ldr	r1, [pc, #216]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fe fcd2 	bl	8001fb0 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe fcce 	bl	8001fb0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e053      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d210      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0207 	bic.w	r2, r3, #7
 800364e:	4922      	ldr	r1, [pc, #136]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1cc>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fc30 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40022000 	.word	0x40022000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08009308 	.word	0x08009308
 80036e4:	20000020 	.word	0x20000020
 80036e8:	20000024 	.word	0x20000024

080036ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x30>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x36>
 800371a:	e027      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	613b      	str	r3, [r7, #16]
      break;
 8003720:	e027      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800373a:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0c5b      	lsrs	r3, r3, #17
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	613b      	str	r3, [r7, #16]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800376e:	613b      	str	r3, [r7, #16]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	693b      	ldr	r3, [r7, #16]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	08009320 	.word	0x08009320
 800378c:	08009330 	.word	0x08009330
 8003790:	003d0900 	.word	0x003d0900

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b02      	ldr	r3, [pc, #8]	@ (80037a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000020 	.word	0x20000020

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff2 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08009318 	.word	0x08009318

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffde 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08009318 	.word	0x08009318

080037f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <RCC_Delay+0x34>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <RCC_Delay+0x38>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0a5b      	lsrs	r3, r3, #9
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003814:	bf00      	nop
  }
  while (Delay --);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	60fa      	str	r2, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f9      	bne.n	8003814 <RCC_Delay+0x1c>
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	20000020 	.word	0x20000020
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e041      	b.n	80038ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fe f9e6 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 fa74 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e03a      	b.n	8003962 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a18      	ldr	r2, [pc, #96]	@ (800396c <HAL_TIM_Base_Start_IT+0x98>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00e      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x58>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003916:	d009      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x58>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a14      	ldr	r2, [pc, #80]	@ (8003970 <HAL_TIM_Base_Start_IT+0x9c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x58>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a13      	ldr	r2, [pc, #76]	@ (8003974 <HAL_TIM_Base_Start_IT+0xa0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d111      	bne.n	8003950 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b06      	cmp	r3, #6
 800393c:	d010      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	e007      	b.n	8003960 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800

08003978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0202 	mvn.w	r2, #2
 80039a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f9b4 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9a7 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f9b6 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0204 	mvn.w	r2, #4
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f98a 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f97d 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f98c 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0208 	mvn.w	r2, #8
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f960 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f953 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f962 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d122      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d11b      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0210 	mvn.w	r2, #16
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f936 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f929 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f938 	bl	8003d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10e      	bne.n	8003afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0201 	mvn.w	r2, #1
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fb1e 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d10e      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa7b 	bl	800401e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b40:	2b40      	cmp	r3, #64	@ 0x40
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8fc 	bl	8003d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0220 	mvn.w	r2, #32
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa46 	bl	800400c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0b4      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x186>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bdc:	d03e      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0xd4>
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be2:	f200 8087 	bhi.w	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bea:	f000 8086 	beq.w	8003cfa <HAL_TIM_ConfigClockSource+0x172>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf2:	d87f      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b70      	cmp	r3, #112	@ 0x70
 8003bf6:	d01a      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xa6>
 8003bf8:	2b70      	cmp	r3, #112	@ 0x70
 8003bfa:	d87b      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b60      	cmp	r3, #96	@ 0x60
 8003bfe:	d050      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c00:	2b60      	cmp	r3, #96	@ 0x60
 8003c02:	d877      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b50      	cmp	r3, #80	@ 0x50
 8003c06:	d03c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xfa>
 8003c08:	2b50      	cmp	r3, #80	@ 0x50
 8003c0a:	d873      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	d058      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c10:	2b40      	cmp	r3, #64	@ 0x40
 8003c12:	d86f      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b30      	cmp	r3, #48	@ 0x30
 8003c16:	d064      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	2b30      	cmp	r3, #48	@ 0x30
 8003c1a:	d86b      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d060      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d867      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05c      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d05a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c2c:	e062      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	f000 f968 	bl	8003f12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	609a      	str	r2, [r3, #8]
      break;
 8003c5a:	e04f      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c6c:	f000 f951 	bl	8003f12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c7e:	609a      	str	r2, [r3, #8]
      break;
 8003c80:	e03c      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 f8c8 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2150      	movs	r1, #80	@ 0x50
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f91f 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e02c      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 f8e6 	bl	8003e80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2160      	movs	r1, #96	@ 0x60
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f90f 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e01c      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 f8a8 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2140      	movs	r1, #64	@ 0x40
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f8ff 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e00c      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 f8f6 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003cf2:	e003      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e000      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
	...

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <TIM_Base_SetConfig+0xbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a25      	ldr	r2, [pc, #148]	@ (8003e20 <TIM_Base_SetConfig+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db0:	d007      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <TIM_Base_SetConfig+0xbc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <TIM_Base_SetConfig+0xc0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a07      	ldr	r2, [pc, #28]	@ (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800

08003e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0201 	bic.w	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f023 030a 	bic.w	r3, r3, #10
 8003e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f023 0210 	bic.w	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	031b      	lsls	r3, r3, #12
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f043 0307 	orr.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e046      	b.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb4:	d009      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a10      	ldr	r2, [pc, #64]	@ (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800

0800400c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e042      	b.n	80040c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fe98 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fde1 	bl	8004c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d16d      	bne.n	80041cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Transmit+0x2c>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e066      	b.n	80041ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	@ 0x21
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fd ff4f 	bl	8001fb0 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x6c>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004144:	e02a      	b.n	800419c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fb31 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e036      	b.n	80041ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	3302      	adds	r3, #2
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e007      	b.n	800418e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3301      	adds	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1cf      	bne.n	8004146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2140      	movs	r1, #64	@ 0x40
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb01 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d112      	bne.n	8004216 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_UART_Receive_IT+0x26>
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e00b      	b.n	8004218 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	461a      	mov	r2, r3
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fb41 	bl	8004894 <UART_Start_Receive_IT>
 8004212:	4603      	mov	r3, r0
 8004214:	e000      	b.n	8004218 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b0ba      	sub	sp, #232	@ 0xe8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800425e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_UART_IRQHandler+0x66>
 8004272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fc1e 	bl	8004ac0 <UART_Receive_IT>
      return;
 8004284:	e25b      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80de 	beq.w	800444c <HAL_UART_IRQHandler+0x22c>
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80d1 	beq.w	800444c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_UART_IRQHandler+0xae>
 80042b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xd2>
 80042da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_UART_IRQHandler+0xf6>
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <HAL_UART_IRQHandler+0x126>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0208 	orr.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 81f2 	beq.w	8004734 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_UART_IRQHandler+0x14e>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fba9 	bl	8004ac0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_UART_IRQHandler+0x17a>
 8004392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04f      	beq.n	800443a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fab3 	bl	8004906 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d041      	beq.n	8004432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3314      	adds	r3, #20
 80043d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1d9      	bne.n	80043ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d013      	beq.n	800442a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004406:	4a7e      	ldr	r2, [pc, #504]	@ (8004600 <HAL_UART_IRQHandler+0x3e0>)
 8004408:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd ff20 	bl	8002254 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00e      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f993 	bl	8004756 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00a      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f98f 	bl	8004756 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e006      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f98b 	bl	8004756 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004446:	e175      	b.n	8004734 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	bf00      	nop
    return;
 800444a:	e173      	b.n	8004734 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 814f 	bne.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8148 	beq.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8141 	beq.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80b6 	beq.w	8004604 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8145 	beq.w	8004738 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044b6:	429a      	cmp	r2, r3
 80044b8:	f080 813e 	bcs.w	8004738 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	f000 8088 	beq.w	80045e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004508:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1d9      	bne.n	80044d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800452c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004540:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004544:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004548:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e1      	bne.n	800451c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800456a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800456e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800457c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800457e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004582:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800458a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e3      	bne.n	8004558 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b0:	f023 0310 	bic.w	r3, r3, #16
 80045b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e3      	bne.n	800459e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd fdff 	bl	80021de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8b6 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fc:	e09c      	b.n	8004738 <HAL_UART_IRQHandler+0x518>
 80045fe:	bf00      	nop
 8004600:	080049cb 	.word	0x080049cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800460c:	b29b      	uxth	r3, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808e 	beq.w	800473c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8089 	beq.w	800473c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800464e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800465c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	623b      	str	r3, [r7, #32]
   return(result);
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3314      	adds	r3, #20
 8004682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004686:	633a      	str	r2, [r7, #48]	@ 0x30
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e3      	bne.n	8004662 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0310 	bic.w	r3, r3, #16
 80046be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e3      	bne.n	80046a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f83b 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046f2:	e023      	b.n	800473c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <HAL_UART_IRQHandler+0x4f4>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f970 	bl	80049f2 <UART_Transmit_IT>
    return;
 8004712:	e014      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <HAL_UART_IRQHandler+0x51e>
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f9af 	bl	8004a90 <UART_EndTransmit_IT>
    return;
 8004732:	e004      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
    return;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
      return;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
      return;
 800473c:	bf00      	nop
  }
}
 800473e:	37e8      	adds	r7, #232	@ 0xe8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b2db      	uxtb	r3, r3
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	@ 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c8:	e050      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d04c      	beq.n	800486c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d8:	f7fd fbea 	bl	8001fb0 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d241      	bcs.n	800486c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004808:	637a      	str	r2, [r7, #52]	@ 0x34
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800480e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3314      	adds	r3, #20
 8004822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	613b      	str	r3, [r7, #16]
   return(result);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800483c:	623a      	str	r2, [r7, #32]
 800483e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	69f9      	ldr	r1, [r7, #28]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	61bb      	str	r3, [r7, #24]
   return(result);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e00f      	b.n	800488c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	d09f      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3740      	adds	r7, #64	@ 0x40
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2222      	movs	r2, #34	@ 0x22
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0220 	orr.w	r2, r2, #32
 80048f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004906:	b480      	push	{r7}
 8004908:	b095      	sub	sp, #84	@ 0x54
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	61fb      	str	r3, [r7, #28]
   return(result);
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	2b01      	cmp	r3, #1
 800497c:	d119      	bne.n	80049b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	60bb      	str	r3, [r7, #8]
   return(result);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0310 	bic.w	r3, r3, #16
 8004994:	647b      	str	r3, [r7, #68]	@ 0x44
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800499e:	61ba      	str	r2, [r7, #24]
 80049a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	613b      	str	r3, [r7, #16]
   return(result);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049c0:	bf00      	nop
 80049c2:	3754      	adds	r7, #84	@ 0x54
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff feb6 	bl	8004756 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b21      	cmp	r3, #33	@ 0x21
 8004a04:	d13e      	bne.n	8004a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0e:	d114      	bne.n	8004a3a <UART_Transmit_IT+0x48>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d110      	bne.n	8004a3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]
 8004a38:	e008      	b.n	8004a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6211      	str	r1, [r2, #32]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fe47 	bl	8004744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	@ 0x30
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b22      	cmp	r3, #34	@ 0x22
 8004ad2:	f040 80ae 	bne.w	8004c32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ade:	d117      	bne.n	8004b10 <UART_Receive_IT+0x50>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b0e:	e026      	b.n	8004b5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b22:	d007      	beq.n	8004b34 <UART_Receive_IT+0x74>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <UART_Receive_IT+0x82>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e008      	b.n	8004b54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d15d      	bne.n	8004c2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0220 	bic.w	r2, r2, #32
 8004b80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d135      	bne.n	8004c24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f023 0310 	bic.w	r3, r3, #16
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bde:	623a      	str	r2, [r7, #32]
 8004be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	69f9      	ldr	r1, [r7, #28]
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e5      	bne.n	8004bbe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d10a      	bne.n	8004c16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fda3 	bl	8004768 <HAL_UARTEx_RxEventCallback>
 8004c22:	e002      	b.n	8004c2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fc fa6f 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e002      	b.n	8004c34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3730      	adds	r7, #48	@ 0x30
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c76:	f023 030c 	bic.w	r3, r3, #12
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d50 <UART_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe fd94 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	e002      	b.n	8004cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fd7c 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	4a22      	ldr	r2, [pc, #136]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	0119      	lsls	r1, r3, #4
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cea:	fba3 0302 	umull	r0, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2064      	movs	r0, #100	@ 0x64
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	@ 0x32
 8004cfc:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d08:	4419      	add	r1, r3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	@ 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	4a07      	ldr	r2, [pc, #28]	@ (8004d54 <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440a      	add	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40013800 	.word	0x40013800
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <atof>:
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f000 bdfd 	b.w	8005958 <strtod>

08004d5e <atoi>:
 8004d5e:	220a      	movs	r2, #10
 8004d60:	2100      	movs	r1, #0
 8004d62:	f000 be7f 	b.w	8005a64 <strtol>

08004d66 <sulp>:
 8004d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	4690      	mov	r8, r2
 8004d6e:	f003 fadb 	bl	8008328 <__ulp>
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	f1b8 0f00 	cmp.w	r8, #0
 8004d7a:	d011      	beq.n	8004da0 <sulp+0x3a>
 8004d7c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004d80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dd0b      	ble.n	8004da0 <sulp+0x3a>
 8004d88:	2400      	movs	r4, #0
 8004d8a:	051b      	lsls	r3, r3, #20
 8004d8c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004d90:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004d94:	4622      	mov	r2, r4
 8004d96:	462b      	mov	r3, r5
 8004d98:	f7fb fb9e 	bl	80004d8 <__aeabi_dmul>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	460d      	mov	r5, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004da8 <_strtod_l>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	b09f      	sub	sp, #124	@ 0x7c
 8004dae:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004db0:	2200      	movs	r2, #0
 8004db2:	460c      	mov	r4, r1
 8004db4:	921a      	str	r2, [sp, #104]	@ 0x68
 8004db6:	f04f 0a00 	mov.w	sl, #0
 8004dba:	f04f 0b00 	mov.w	fp, #0
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	9005      	str	r0, [sp, #20]
 8004dc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004dc4:	7811      	ldrb	r1, [r2, #0]
 8004dc6:	292b      	cmp	r1, #43	@ 0x2b
 8004dc8:	d048      	beq.n	8004e5c <_strtod_l+0xb4>
 8004dca:	d836      	bhi.n	8004e3a <_strtod_l+0x92>
 8004dcc:	290d      	cmp	r1, #13
 8004dce:	d830      	bhi.n	8004e32 <_strtod_l+0x8a>
 8004dd0:	2908      	cmp	r1, #8
 8004dd2:	d830      	bhi.n	8004e36 <_strtod_l+0x8e>
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	d039      	beq.n	8004e4c <_strtod_l+0xa4>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004ddc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004dde:	782a      	ldrb	r2, [r5, #0]
 8004de0:	2a30      	cmp	r2, #48	@ 0x30
 8004de2:	f040 80b1 	bne.w	8004f48 <_strtod_l+0x1a0>
 8004de6:	786a      	ldrb	r2, [r5, #1]
 8004de8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004dec:	2a58      	cmp	r2, #88	@ 0x58
 8004dee:	d16c      	bne.n	8004eca <_strtod_l+0x122>
 8004df0:	9302      	str	r3, [sp, #8]
 8004df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004df4:	4a8e      	ldr	r2, [pc, #568]	@ (8005030 <_strtod_l+0x288>)
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	ab1a      	add	r3, sp, #104	@ 0x68
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	9805      	ldr	r0, [sp, #20]
 8004dfe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004e00:	a919      	add	r1, sp, #100	@ 0x64
 8004e02:	f002 fb85 	bl	8007510 <__gethex>
 8004e06:	f010 060f 	ands.w	r6, r0, #15
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	d005      	beq.n	8004e1a <_strtod_l+0x72>
 8004e0e:	2e06      	cmp	r6, #6
 8004e10:	d126      	bne.n	8004e60 <_strtod_l+0xb8>
 8004e12:	2300      	movs	r3, #0
 8004e14:	3501      	adds	r5, #1
 8004e16:	9519      	str	r5, [sp, #100]	@ 0x64
 8004e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 8584 	bne.w	800592a <_strtod_l+0xb82>
 8004e22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e24:	b1bb      	cbz	r3, 8004e56 <_strtod_l+0xae>
 8004e26:	4650      	mov	r0, sl
 8004e28:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004e2c:	b01f      	add	sp, #124	@ 0x7c
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	2920      	cmp	r1, #32
 8004e34:	d1d0      	bne.n	8004dd8 <_strtod_l+0x30>
 8004e36:	3201      	adds	r2, #1
 8004e38:	e7c3      	b.n	8004dc2 <_strtod_l+0x1a>
 8004e3a:	292d      	cmp	r1, #45	@ 0x2d
 8004e3c:	d1cc      	bne.n	8004dd8 <_strtod_l+0x30>
 8004e3e:	2101      	movs	r1, #1
 8004e40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004e42:	1c51      	adds	r1, r2, #1
 8004e44:	9119      	str	r1, [sp, #100]	@ 0x64
 8004e46:	7852      	ldrb	r2, [r2, #1]
 8004e48:	2a00      	cmp	r2, #0
 8004e4a:	d1c7      	bne.n	8004ddc <_strtod_l+0x34>
 8004e4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004e4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 8568 	bne.w	8005926 <_strtod_l+0xb7e>
 8004e56:	4650      	mov	r0, sl
 8004e58:	4659      	mov	r1, fp
 8004e5a:	e7e7      	b.n	8004e2c <_strtod_l+0x84>
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	e7ef      	b.n	8004e40 <_strtod_l+0x98>
 8004e60:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004e62:	b13a      	cbz	r2, 8004e74 <_strtod_l+0xcc>
 8004e64:	2135      	movs	r1, #53	@ 0x35
 8004e66:	a81c      	add	r0, sp, #112	@ 0x70
 8004e68:	f003 fb4e 	bl	8008508 <__copybits>
 8004e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e6e:	9805      	ldr	r0, [sp, #20]
 8004e70:	f002 ff28 	bl	8007cc4 <_Bfree>
 8004e74:	3e01      	subs	r6, #1
 8004e76:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004e78:	2e04      	cmp	r6, #4
 8004e7a:	d806      	bhi.n	8004e8a <_strtod_l+0xe2>
 8004e7c:	e8df f006 	tbb	[pc, r6]
 8004e80:	201d0314 	.word	0x201d0314
 8004e84:	14          	.byte	0x14
 8004e85:	00          	.byte	0x00
 8004e86:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004e8a:	05e1      	lsls	r1, r4, #23
 8004e8c:	bf48      	it	mi
 8004e8e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004e92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1bd      	bne.n	8004e1a <_strtod_l+0x72>
 8004e9e:	f001 fbe7 	bl	8006670 <__errno>
 8004ea2:	2322      	movs	r3, #34	@ 0x22
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	e7b8      	b.n	8004e1a <_strtod_l+0x72>
 8004ea8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004eac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004eb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004eb4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004eb8:	e7e7      	b.n	8004e8a <_strtod_l+0xe2>
 8004eba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005034 <_strtod_l+0x28c>
 8004ebe:	e7e4      	b.n	8004e8a <_strtod_l+0xe2>
 8004ec0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004ec4:	f04f 3aff 	mov.w	sl, #4294967295
 8004ec8:	e7df      	b.n	8004e8a <_strtod_l+0xe2>
 8004eca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b30      	cmp	r3, #48	@ 0x30
 8004ed4:	d0f9      	beq.n	8004eca <_strtod_l+0x122>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d09f      	beq.n	8004e1a <_strtod_l+0x72>
 8004eda:	2301      	movs	r3, #1
 8004edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ede:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ee0:	220a      	movs	r2, #10
 8004ee2:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	461f      	mov	r7, r3
 8004ee8:	9308      	str	r3, [sp, #32]
 8004eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004eee:	7805      	ldrb	r5, [r0, #0]
 8004ef0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004ef4:	b2d9      	uxtb	r1, r3
 8004ef6:	2909      	cmp	r1, #9
 8004ef8:	d928      	bls.n	8004f4c <_strtod_l+0x1a4>
 8004efa:	2201      	movs	r2, #1
 8004efc:	494e      	ldr	r1, [pc, #312]	@ (8005038 <_strtod_l+0x290>)
 8004efe:	f001 fb44 	bl	800658a <strncmp>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d032      	beq.n	8004f6c <_strtod_l+0x1c4>
 8004f06:	2000      	movs	r0, #0
 8004f08:	462a      	mov	r2, r5
 8004f0a:	4681      	mov	r9, r0
 8004f0c:	463d      	mov	r5, r7
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2a65      	cmp	r2, #101	@ 0x65
 8004f12:	d001      	beq.n	8004f18 <_strtod_l+0x170>
 8004f14:	2a45      	cmp	r2, #69	@ 0x45
 8004f16:	d114      	bne.n	8004f42 <_strtod_l+0x19a>
 8004f18:	b91d      	cbnz	r5, 8004f22 <_strtod_l+0x17a>
 8004f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f1c:	4302      	orrs	r2, r0
 8004f1e:	d095      	beq.n	8004e4c <_strtod_l+0xa4>
 8004f20:	2500      	movs	r5, #0
 8004f22:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004f24:	1c62      	adds	r2, r4, #1
 8004f26:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f28:	7862      	ldrb	r2, [r4, #1]
 8004f2a:	2a2b      	cmp	r2, #43	@ 0x2b
 8004f2c:	d077      	beq.n	800501e <_strtod_l+0x276>
 8004f2e:	2a2d      	cmp	r2, #45	@ 0x2d
 8004f30:	d07b      	beq.n	800502a <_strtod_l+0x282>
 8004f32:	f04f 0c00 	mov.w	ip, #0
 8004f36:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004f3a:	2909      	cmp	r1, #9
 8004f3c:	f240 8082 	bls.w	8005044 <_strtod_l+0x29c>
 8004f40:	9419      	str	r4, [sp, #100]	@ 0x64
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	e0a2      	b.n	800508e <_strtod_l+0x2e6>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e7c7      	b.n	8004edc <_strtod_l+0x134>
 8004f4c:	2f08      	cmp	r7, #8
 8004f4e:	bfd5      	itete	le
 8004f50:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004f52:	9908      	ldrgt	r1, [sp, #32]
 8004f54:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f58:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004f5c:	f100 0001 	add.w	r0, r0, #1
 8004f60:	bfd4      	ite	le
 8004f62:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004f64:	9308      	strgt	r3, [sp, #32]
 8004f66:	3701      	adds	r7, #1
 8004f68:	9019      	str	r0, [sp, #100]	@ 0x64
 8004f6a:	e7bf      	b.n	8004eec <_strtod_l+0x144>
 8004f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f72:	785a      	ldrb	r2, [r3, #1]
 8004f74:	b37f      	cbz	r7, 8004fd6 <_strtod_l+0x22e>
 8004f76:	4681      	mov	r9, r0
 8004f78:	463d      	mov	r5, r7
 8004f7a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d912      	bls.n	8004fa8 <_strtod_l+0x200>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e7c4      	b.n	8004f10 <_strtod_l+0x168>
 8004f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f88:	3001      	adds	r0, #1
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f8e:	785a      	ldrb	r2, [r3, #1]
 8004f90:	2a30      	cmp	r2, #48	@ 0x30
 8004f92:	d0f8      	beq.n	8004f86 <_strtod_l+0x1de>
 8004f94:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	f200 84cb 	bhi.w	8005934 <_strtod_l+0xb8c>
 8004f9e:	4681      	mov	r9, r0
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fa6:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fa8:	3a30      	subs	r2, #48	@ 0x30
 8004faa:	f100 0301 	add.w	r3, r0, #1
 8004fae:	d02a      	beq.n	8005006 <_strtod_l+0x25e>
 8004fb0:	4499      	add	r9, r3
 8004fb2:	210a      	movs	r1, #10
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	eb00 0c05 	add.w	ip, r0, r5
 8004fba:	4563      	cmp	r3, ip
 8004fbc:	d10d      	bne.n	8004fda <_strtod_l+0x232>
 8004fbe:	1c69      	adds	r1, r5, #1
 8004fc0:	4401      	add	r1, r0
 8004fc2:	4428      	add	r0, r5
 8004fc4:	2808      	cmp	r0, #8
 8004fc6:	dc16      	bgt.n	8004ff6 <_strtod_l+0x24e>
 8004fc8:	230a      	movs	r3, #10
 8004fca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fcc:	fb03 2300 	mla	r3, r3, r0, r2
 8004fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e018      	b.n	8005008 <_strtod_l+0x260>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	e7da      	b.n	8004f90 <_strtod_l+0x1e8>
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	f103 0301 	add.w	r3, r3, #1
 8004fe0:	dc03      	bgt.n	8004fea <_strtod_l+0x242>
 8004fe2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004fe4:	434e      	muls	r6, r1
 8004fe6:	960a      	str	r6, [sp, #40]	@ 0x28
 8004fe8:	e7e7      	b.n	8004fba <_strtod_l+0x212>
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	bfde      	ittt	le
 8004fee:	9e08      	ldrle	r6, [sp, #32]
 8004ff0:	434e      	mulle	r6, r1
 8004ff2:	9608      	strle	r6, [sp, #32]
 8004ff4:	e7e1      	b.n	8004fba <_strtod_l+0x212>
 8004ff6:	280f      	cmp	r0, #15
 8004ff8:	dceb      	bgt.n	8004fd2 <_strtod_l+0x22a>
 8004ffa:	230a      	movs	r3, #10
 8004ffc:	9808      	ldr	r0, [sp, #32]
 8004ffe:	fb03 2300 	mla	r3, r3, r0, r2
 8005002:	9308      	str	r3, [sp, #32]
 8005004:	e7e5      	b.n	8004fd2 <_strtod_l+0x22a>
 8005006:	4629      	mov	r1, r5
 8005008:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800500a:	460d      	mov	r5, r1
 800500c:	1c50      	adds	r0, r2, #1
 800500e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005010:	7852      	ldrb	r2, [r2, #1]
 8005012:	4618      	mov	r0, r3
 8005014:	e7b1      	b.n	8004f7a <_strtod_l+0x1d2>
 8005016:	f04f 0900 	mov.w	r9, #0
 800501a:	2301      	movs	r3, #1
 800501c:	e77d      	b.n	8004f1a <_strtod_l+0x172>
 800501e:	f04f 0c00 	mov.w	ip, #0
 8005022:	1ca2      	adds	r2, r4, #2
 8005024:	9219      	str	r2, [sp, #100]	@ 0x64
 8005026:	78a2      	ldrb	r2, [r4, #2]
 8005028:	e785      	b.n	8004f36 <_strtod_l+0x18e>
 800502a:	f04f 0c01 	mov.w	ip, #1
 800502e:	e7f8      	b.n	8005022 <_strtod_l+0x27a>
 8005030:	08009348 	.word	0x08009348
 8005034:	7ff00000 	.word	0x7ff00000
 8005038:	08009332 	.word	0x08009332
 800503c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800503e:	1c51      	adds	r1, r2, #1
 8005040:	9119      	str	r1, [sp, #100]	@ 0x64
 8005042:	7852      	ldrb	r2, [r2, #1]
 8005044:	2a30      	cmp	r2, #48	@ 0x30
 8005046:	d0f9      	beq.n	800503c <_strtod_l+0x294>
 8005048:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800504c:	2908      	cmp	r1, #8
 800504e:	f63f af78 	bhi.w	8004f42 <_strtod_l+0x19a>
 8005052:	f04f 080a 	mov.w	r8, #10
 8005056:	3a30      	subs	r2, #48	@ 0x30
 8005058:	920e      	str	r2, [sp, #56]	@ 0x38
 800505a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800505c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800505e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005060:	1c56      	adds	r6, r2, #1
 8005062:	9619      	str	r6, [sp, #100]	@ 0x64
 8005064:	7852      	ldrb	r2, [r2, #1]
 8005066:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800506a:	f1be 0f09 	cmp.w	lr, #9
 800506e:	d939      	bls.n	80050e4 <_strtod_l+0x33c>
 8005070:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005072:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005076:	1a76      	subs	r6, r6, r1
 8005078:	2e08      	cmp	r6, #8
 800507a:	dc03      	bgt.n	8005084 <_strtod_l+0x2dc>
 800507c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800507e:	4588      	cmp	r8, r1
 8005080:	bfa8      	it	ge
 8005082:	4688      	movge	r8, r1
 8005084:	f1bc 0f00 	cmp.w	ip, #0
 8005088:	d001      	beq.n	800508e <_strtod_l+0x2e6>
 800508a:	f1c8 0800 	rsb	r8, r8, #0
 800508e:	2d00      	cmp	r5, #0
 8005090:	d14e      	bne.n	8005130 <_strtod_l+0x388>
 8005092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005094:	4308      	orrs	r0, r1
 8005096:	f47f aec0 	bne.w	8004e1a <_strtod_l+0x72>
 800509a:	2b00      	cmp	r3, #0
 800509c:	f47f aed6 	bne.w	8004e4c <_strtod_l+0xa4>
 80050a0:	2a69      	cmp	r2, #105	@ 0x69
 80050a2:	d028      	beq.n	80050f6 <_strtod_l+0x34e>
 80050a4:	dc25      	bgt.n	80050f2 <_strtod_l+0x34a>
 80050a6:	2a49      	cmp	r2, #73	@ 0x49
 80050a8:	d025      	beq.n	80050f6 <_strtod_l+0x34e>
 80050aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80050ac:	f47f aece 	bne.w	8004e4c <_strtod_l+0xa4>
 80050b0:	499a      	ldr	r1, [pc, #616]	@ (800531c <_strtod_l+0x574>)
 80050b2:	a819      	add	r0, sp, #100	@ 0x64
 80050b4:	f002 fc4e 	bl	8007954 <__match>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f43f aec7 	beq.w	8004e4c <_strtod_l+0xa4>
 80050be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b28      	cmp	r3, #40	@ 0x28
 80050c4:	d12e      	bne.n	8005124 <_strtod_l+0x37c>
 80050c6:	4996      	ldr	r1, [pc, #600]	@ (8005320 <_strtod_l+0x578>)
 80050c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80050ca:	a819      	add	r0, sp, #100	@ 0x64
 80050cc:	f002 fc56 	bl	800797c <__hexnan>
 80050d0:	2805      	cmp	r0, #5
 80050d2:	d127      	bne.n	8005124 <_strtod_l+0x37c>
 80050d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80050d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80050da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80050de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80050e2:	e69a      	b.n	8004e1a <_strtod_l+0x72>
 80050e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80050e6:	fb08 2101 	mla	r1, r8, r1, r2
 80050ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80050ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80050f0:	e7b5      	b.n	800505e <_strtod_l+0x2b6>
 80050f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80050f4:	e7da      	b.n	80050ac <_strtod_l+0x304>
 80050f6:	498b      	ldr	r1, [pc, #556]	@ (8005324 <_strtod_l+0x57c>)
 80050f8:	a819      	add	r0, sp, #100	@ 0x64
 80050fa:	f002 fc2b 	bl	8007954 <__match>
 80050fe:	2800      	cmp	r0, #0
 8005100:	f43f aea4 	beq.w	8004e4c <_strtod_l+0xa4>
 8005104:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005106:	4988      	ldr	r1, [pc, #544]	@ (8005328 <_strtod_l+0x580>)
 8005108:	3b01      	subs	r3, #1
 800510a:	a819      	add	r0, sp, #100	@ 0x64
 800510c:	9319      	str	r3, [sp, #100]	@ 0x64
 800510e:	f002 fc21 	bl	8007954 <__match>
 8005112:	b910      	cbnz	r0, 800511a <_strtod_l+0x372>
 8005114:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005116:	3301      	adds	r3, #1
 8005118:	9319      	str	r3, [sp, #100]	@ 0x64
 800511a:	f04f 0a00 	mov.w	sl, #0
 800511e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800532c <_strtod_l+0x584>
 8005122:	e67a      	b.n	8004e1a <_strtod_l+0x72>
 8005124:	4882      	ldr	r0, [pc, #520]	@ (8005330 <_strtod_l+0x588>)
 8005126:	f001 faed 	bl	8006704 <nan>
 800512a:	4682      	mov	sl, r0
 800512c:	468b      	mov	fp, r1
 800512e:	e674      	b.n	8004e1a <_strtod_l+0x72>
 8005130:	eba8 0309 	sub.w	r3, r8, r9
 8005134:	2f00      	cmp	r7, #0
 8005136:	bf08      	it	eq
 8005138:	462f      	moveq	r7, r5
 800513a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800513c:	2d10      	cmp	r5, #16
 800513e:	462c      	mov	r4, r5
 8005140:	9309      	str	r3, [sp, #36]	@ 0x24
 8005142:	bfa8      	it	ge
 8005144:	2410      	movge	r4, #16
 8005146:	f7fb f94d 	bl	80003e4 <__aeabi_ui2d>
 800514a:	2d09      	cmp	r5, #9
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	dc11      	bgt.n	8005176 <_strtod_l+0x3ce>
 8005152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	f43f ae60 	beq.w	8004e1a <_strtod_l+0x72>
 800515a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515c:	dd76      	ble.n	800524c <_strtod_l+0x4a4>
 800515e:	2b16      	cmp	r3, #22
 8005160:	dc5d      	bgt.n	800521e <_strtod_l+0x476>
 8005162:	4974      	ldr	r1, [pc, #464]	@ (8005334 <_strtod_l+0x58c>)
 8005164:	4652      	mov	r2, sl
 8005166:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800516a:	465b      	mov	r3, fp
 800516c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005170:	f7fb f9b2 	bl	80004d8 <__aeabi_dmul>
 8005174:	e7d9      	b.n	800512a <_strtod_l+0x382>
 8005176:	4b6f      	ldr	r3, [pc, #444]	@ (8005334 <_strtod_l+0x58c>)
 8005178:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800517c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005180:	f7fb f9aa 	bl	80004d8 <__aeabi_dmul>
 8005184:	4682      	mov	sl, r0
 8005186:	9808      	ldr	r0, [sp, #32]
 8005188:	468b      	mov	fp, r1
 800518a:	f7fb f92b 	bl	80003e4 <__aeabi_ui2d>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	f7fa ffe9 	bl	800016c <__adddf3>
 800519a:	2d0f      	cmp	r5, #15
 800519c:	4682      	mov	sl, r0
 800519e:	468b      	mov	fp, r1
 80051a0:	ddd7      	ble.n	8005152 <_strtod_l+0x3aa>
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	1b2c      	subs	r4, r5, r4
 80051a6:	441c      	add	r4, r3
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	f340 8096 	ble.w	80052da <_strtod_l+0x532>
 80051ae:	f014 030f 	ands.w	r3, r4, #15
 80051b2:	d00a      	beq.n	80051ca <_strtod_l+0x422>
 80051b4:	495f      	ldr	r1, [pc, #380]	@ (8005334 <_strtod_l+0x58c>)
 80051b6:	4652      	mov	r2, sl
 80051b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051c0:	465b      	mov	r3, fp
 80051c2:	f7fb f989 	bl	80004d8 <__aeabi_dmul>
 80051c6:	4682      	mov	sl, r0
 80051c8:	468b      	mov	fp, r1
 80051ca:	f034 040f 	bics.w	r4, r4, #15
 80051ce:	d073      	beq.n	80052b8 <_strtod_l+0x510>
 80051d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80051d4:	dd48      	ble.n	8005268 <_strtod_l+0x4c0>
 80051d6:	2400      	movs	r4, #0
 80051d8:	46a0      	mov	r8, r4
 80051da:	46a1      	mov	r9, r4
 80051dc:	940a      	str	r4, [sp, #40]	@ 0x28
 80051de:	2322      	movs	r3, #34	@ 0x22
 80051e0:	f04f 0a00 	mov.w	sl, #0
 80051e4:	9a05      	ldr	r2, [sp, #20]
 80051e6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800532c <_strtod_l+0x584>
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f43f ae13 	beq.w	8004e1a <_strtod_l+0x72>
 80051f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80051f6:	9805      	ldr	r0, [sp, #20]
 80051f8:	f002 fd64 	bl	8007cc4 <_Bfree>
 80051fc:	4649      	mov	r1, r9
 80051fe:	9805      	ldr	r0, [sp, #20]
 8005200:	f002 fd60 	bl	8007cc4 <_Bfree>
 8005204:	4641      	mov	r1, r8
 8005206:	9805      	ldr	r0, [sp, #20]
 8005208:	f002 fd5c 	bl	8007cc4 <_Bfree>
 800520c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800520e:	9805      	ldr	r0, [sp, #20]
 8005210:	f002 fd58 	bl	8007cc4 <_Bfree>
 8005214:	4621      	mov	r1, r4
 8005216:	9805      	ldr	r0, [sp, #20]
 8005218:	f002 fd54 	bl	8007cc4 <_Bfree>
 800521c:	e5fd      	b.n	8004e1a <_strtod_l+0x72>
 800521e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005220:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005224:	4293      	cmp	r3, r2
 8005226:	dbbc      	blt.n	80051a2 <_strtod_l+0x3fa>
 8005228:	4c42      	ldr	r4, [pc, #264]	@ (8005334 <_strtod_l+0x58c>)
 800522a:	f1c5 050f 	rsb	r5, r5, #15
 800522e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005232:	4652      	mov	r2, sl
 8005234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005238:	465b      	mov	r3, fp
 800523a:	f7fb f94d 	bl	80004d8 <__aeabi_dmul>
 800523e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005240:	1b5d      	subs	r5, r3, r5
 8005242:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005246:	e9d4 2300 	ldrd	r2, r3, [r4]
 800524a:	e791      	b.n	8005170 <_strtod_l+0x3c8>
 800524c:	3316      	adds	r3, #22
 800524e:	dba8      	blt.n	80051a2 <_strtod_l+0x3fa>
 8005250:	4b38      	ldr	r3, [pc, #224]	@ (8005334 <_strtod_l+0x58c>)
 8005252:	eba9 0808 	sub.w	r8, r9, r8
 8005256:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800525a:	4650      	mov	r0, sl
 800525c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005260:	4659      	mov	r1, fp
 8005262:	f7fb fa63 	bl	800072c <__aeabi_ddiv>
 8005266:	e760      	b.n	800512a <_strtod_l+0x382>
 8005268:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <_strtod_l+0x590>)
 800526a:	4650      	mov	r0, sl
 800526c:	9308      	str	r3, [sp, #32]
 800526e:	2300      	movs	r3, #0
 8005270:	4659      	mov	r1, fp
 8005272:	461e      	mov	r6, r3
 8005274:	1124      	asrs	r4, r4, #4
 8005276:	2c01      	cmp	r4, #1
 8005278:	dc21      	bgt.n	80052be <_strtod_l+0x516>
 800527a:	b10b      	cbz	r3, 8005280 <_strtod_l+0x4d8>
 800527c:	4682      	mov	sl, r0
 800527e:	468b      	mov	fp, r1
 8005280:	492d      	ldr	r1, [pc, #180]	@ (8005338 <_strtod_l+0x590>)
 8005282:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005286:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800528a:	4652      	mov	r2, sl
 800528c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005290:	465b      	mov	r3, fp
 8005292:	f7fb f921 	bl	80004d8 <__aeabi_dmul>
 8005296:	4b25      	ldr	r3, [pc, #148]	@ (800532c <_strtod_l+0x584>)
 8005298:	460a      	mov	r2, r1
 800529a:	400b      	ands	r3, r1
 800529c:	4927      	ldr	r1, [pc, #156]	@ (800533c <_strtod_l+0x594>)
 800529e:	4682      	mov	sl, r0
 80052a0:	428b      	cmp	r3, r1
 80052a2:	d898      	bhi.n	80051d6 <_strtod_l+0x42e>
 80052a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80052a8:	428b      	cmp	r3, r1
 80052aa:	bf86      	itte	hi
 80052ac:	f04f 3aff 	movhi.w	sl, #4294967295
 80052b0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005340 <_strtod_l+0x598>
 80052b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80052b8:	2300      	movs	r3, #0
 80052ba:	9308      	str	r3, [sp, #32]
 80052bc:	e07a      	b.n	80053b4 <_strtod_l+0x60c>
 80052be:	07e2      	lsls	r2, r4, #31
 80052c0:	d505      	bpl.n	80052ce <_strtod_l+0x526>
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fb f906 	bl	80004d8 <__aeabi_dmul>
 80052cc:	2301      	movs	r3, #1
 80052ce:	9a08      	ldr	r2, [sp, #32]
 80052d0:	3601      	adds	r6, #1
 80052d2:	3208      	adds	r2, #8
 80052d4:	1064      	asrs	r4, r4, #1
 80052d6:	9208      	str	r2, [sp, #32]
 80052d8:	e7cd      	b.n	8005276 <_strtod_l+0x4ce>
 80052da:	d0ed      	beq.n	80052b8 <_strtod_l+0x510>
 80052dc:	4264      	negs	r4, r4
 80052de:	f014 020f 	ands.w	r2, r4, #15
 80052e2:	d00a      	beq.n	80052fa <_strtod_l+0x552>
 80052e4:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <_strtod_l+0x58c>)
 80052e6:	4650      	mov	r0, sl
 80052e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ec:	4659      	mov	r1, fp
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb fa1b 	bl	800072c <__aeabi_ddiv>
 80052f6:	4682      	mov	sl, r0
 80052f8:	468b      	mov	fp, r1
 80052fa:	1124      	asrs	r4, r4, #4
 80052fc:	d0dc      	beq.n	80052b8 <_strtod_l+0x510>
 80052fe:	2c1f      	cmp	r4, #31
 8005300:	dd20      	ble.n	8005344 <_strtod_l+0x59c>
 8005302:	2400      	movs	r4, #0
 8005304:	46a0      	mov	r8, r4
 8005306:	46a1      	mov	r9, r4
 8005308:	940a      	str	r4, [sp, #40]	@ 0x28
 800530a:	2322      	movs	r3, #34	@ 0x22
 800530c:	9a05      	ldr	r2, [sp, #20]
 800530e:	f04f 0a00 	mov.w	sl, #0
 8005312:	f04f 0b00 	mov.w	fp, #0
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e768      	b.n	80051ec <_strtod_l+0x444>
 800531a:	bf00      	nop
 800531c:	08009496 	.word	0x08009496
 8005320:	08009334 	.word	0x08009334
 8005324:	0800948e 	.word	0x0800948e
 8005328:	080094c8 	.word	0x080094c8
 800532c:	7ff00000 	.word	0x7ff00000
 8005330:	08009754 	.word	0x08009754
 8005334:	08009640 	.word	0x08009640
 8005338:	08009618 	.word	0x08009618
 800533c:	7ca00000 	.word	0x7ca00000
 8005340:	7fefffff 	.word	0x7fefffff
 8005344:	f014 0310 	ands.w	r3, r4, #16
 8005348:	bf18      	it	ne
 800534a:	236a      	movne	r3, #106	@ 0x6a
 800534c:	4650      	mov	r0, sl
 800534e:	9308      	str	r3, [sp, #32]
 8005350:	4659      	mov	r1, fp
 8005352:	2300      	movs	r3, #0
 8005354:	4ea9      	ldr	r6, [pc, #676]	@ (80055fc <_strtod_l+0x854>)
 8005356:	07e2      	lsls	r2, r4, #31
 8005358:	d504      	bpl.n	8005364 <_strtod_l+0x5bc>
 800535a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	2301      	movs	r3, #1
 8005364:	1064      	asrs	r4, r4, #1
 8005366:	f106 0608 	add.w	r6, r6, #8
 800536a:	d1f4      	bne.n	8005356 <_strtod_l+0x5ae>
 800536c:	b10b      	cbz	r3, 8005372 <_strtod_l+0x5ca>
 800536e:	4682      	mov	sl, r0
 8005370:	468b      	mov	fp, r1
 8005372:	9b08      	ldr	r3, [sp, #32]
 8005374:	b1b3      	cbz	r3, 80053a4 <_strtod_l+0x5fc>
 8005376:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800537a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800537e:	2b00      	cmp	r3, #0
 8005380:	4659      	mov	r1, fp
 8005382:	dd0f      	ble.n	80053a4 <_strtod_l+0x5fc>
 8005384:	2b1f      	cmp	r3, #31
 8005386:	dd57      	ble.n	8005438 <_strtod_l+0x690>
 8005388:	2b34      	cmp	r3, #52	@ 0x34
 800538a:	bfd8      	it	le
 800538c:	f04f 33ff 	movle.w	r3, #4294967295
 8005390:	f04f 0a00 	mov.w	sl, #0
 8005394:	bfcf      	iteee	gt
 8005396:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800539a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800539e:	4093      	lslle	r3, r2
 80053a0:	ea03 0b01 	andle.w	fp, r3, r1
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4650      	mov	r0, sl
 80053aa:	4659      	mov	r1, fp
 80053ac:	f7fb fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d1a6      	bne.n	8005302 <_strtod_l+0x55a>
 80053b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053b6:	463a      	mov	r2, r7
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80053bc:	462b      	mov	r3, r5
 80053be:	9805      	ldr	r0, [sp, #20]
 80053c0:	f002 fce8 	bl	8007d94 <__s2b>
 80053c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f43f af05 	beq.w	80051d6 <_strtod_l+0x42e>
 80053cc:	2400      	movs	r4, #0
 80053ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053d0:	eba9 0308 	sub.w	r3, r9, r8
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	bfa8      	it	ge
 80053d8:	2300      	movge	r3, #0
 80053da:	46a0      	mov	r8, r4
 80053dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80053de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80053e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e6:	9805      	ldr	r0, [sp, #20]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	f002 fc2b 	bl	8007c44 <_Balloc>
 80053ee:	4681      	mov	r9, r0
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f43f aef4 	beq.w	80051de <_strtod_l+0x436>
 80053f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f8:	300c      	adds	r0, #12
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	f103 010c 	add.w	r1, r3, #12
 8005400:	3202      	adds	r2, #2
 8005402:	0092      	lsls	r2, r2, #2
 8005404:	f001 f96f 	bl	80066e6 <memcpy>
 8005408:	ab1c      	add	r3, sp, #112	@ 0x70
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4652      	mov	r2, sl
 8005412:	465b      	mov	r3, fp
 8005414:	9805      	ldr	r0, [sp, #20]
 8005416:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800541a:	f002 ffed 	bl	80083f8 <__d2b>
 800541e:	901a      	str	r0, [sp, #104]	@ 0x68
 8005420:	2800      	cmp	r0, #0
 8005422:	f43f aedc 	beq.w	80051de <_strtod_l+0x436>
 8005426:	2101      	movs	r1, #1
 8005428:	9805      	ldr	r0, [sp, #20]
 800542a:	f002 fd49 	bl	8007ec0 <__i2b>
 800542e:	4680      	mov	r8, r0
 8005430:	b948      	cbnz	r0, 8005446 <_strtod_l+0x69e>
 8005432:	f04f 0800 	mov.w	r8, #0
 8005436:	e6d2      	b.n	80051de <_strtod_l+0x436>
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	ea03 0a0a 	and.w	sl, r3, sl
 8005444:	e7ae      	b.n	80053a4 <_strtod_l+0x5fc>
 8005446:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005448:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800544a:	2d00      	cmp	r5, #0
 800544c:	bfab      	itete	ge
 800544e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005450:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005452:	18ef      	addge	r7, r5, r3
 8005454:	1b5e      	sublt	r6, r3, r5
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	bfa8      	it	ge
 800545a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800545c:	eba5 0503 	sub.w	r5, r5, r3
 8005460:	4415      	add	r5, r2
 8005462:	4b67      	ldr	r3, [pc, #412]	@ (8005600 <_strtod_l+0x858>)
 8005464:	f105 35ff 	add.w	r5, r5, #4294967295
 8005468:	bfb8      	it	lt
 800546a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800546c:	429d      	cmp	r5, r3
 800546e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005472:	da50      	bge.n	8005516 <_strtod_l+0x76e>
 8005474:	1b5b      	subs	r3, r3, r5
 8005476:	2b1f      	cmp	r3, #31
 8005478:	f04f 0101 	mov.w	r1, #1
 800547c:	eba2 0203 	sub.w	r2, r2, r3
 8005480:	dc3d      	bgt.n	80054fe <_strtod_l+0x756>
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005488:	2300      	movs	r3, #0
 800548a:	9310      	str	r3, [sp, #64]	@ 0x40
 800548c:	18bd      	adds	r5, r7, r2
 800548e:	9b08      	ldr	r3, [sp, #32]
 8005490:	42af      	cmp	r7, r5
 8005492:	4416      	add	r6, r2
 8005494:	441e      	add	r6, r3
 8005496:	463b      	mov	r3, r7
 8005498:	bfa8      	it	ge
 800549a:	462b      	movge	r3, r5
 800549c:	42b3      	cmp	r3, r6
 800549e:	bfa8      	it	ge
 80054a0:	4633      	movge	r3, r6
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bfc2      	ittt	gt
 80054a6:	1aed      	subgt	r5, r5, r3
 80054a8:	1af6      	subgt	r6, r6, r3
 80054aa:	1aff      	subgt	r7, r7, r3
 80054ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dd16      	ble.n	80054e0 <_strtod_l+0x738>
 80054b2:	4641      	mov	r1, r8
 80054b4:	461a      	mov	r2, r3
 80054b6:	9805      	ldr	r0, [sp, #20]
 80054b8:	f002 fdc0 	bl	800803c <__pow5mult>
 80054bc:	4680      	mov	r8, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d0b7      	beq.n	8005432 <_strtod_l+0x68a>
 80054c2:	4601      	mov	r1, r0
 80054c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80054c6:	9805      	ldr	r0, [sp, #20]
 80054c8:	f002 fd10 	bl	8007eec <__multiply>
 80054cc:	900e      	str	r0, [sp, #56]	@ 0x38
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f43f ae85 	beq.w	80051de <_strtod_l+0x436>
 80054d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054d6:	9805      	ldr	r0, [sp, #20]
 80054d8:	f002 fbf4 	bl	8007cc4 <_Bfree>
 80054dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054de:	931a      	str	r3, [sp, #104]	@ 0x68
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	dc1d      	bgt.n	8005520 <_strtod_l+0x778>
 80054e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd23      	ble.n	8005532 <_strtod_l+0x78a>
 80054ea:	4649      	mov	r1, r9
 80054ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80054ee:	9805      	ldr	r0, [sp, #20]
 80054f0:	f002 fda4 	bl	800803c <__pow5mult>
 80054f4:	4681      	mov	r9, r0
 80054f6:	b9e0      	cbnz	r0, 8005532 <_strtod_l+0x78a>
 80054f8:	f04f 0900 	mov.w	r9, #0
 80054fc:	e66f      	b.n	80051de <_strtod_l+0x436>
 80054fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005502:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005506:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800550a:	35e2      	adds	r5, #226	@ 0xe2
 800550c:	fa01 f305 	lsl.w	r3, r1, r5
 8005510:	9310      	str	r3, [sp, #64]	@ 0x40
 8005512:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005514:	e7ba      	b.n	800548c <_strtod_l+0x6e4>
 8005516:	2300      	movs	r3, #0
 8005518:	9310      	str	r3, [sp, #64]	@ 0x40
 800551a:	2301      	movs	r3, #1
 800551c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800551e:	e7b5      	b.n	800548c <_strtod_l+0x6e4>
 8005520:	462a      	mov	r2, r5
 8005522:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005524:	9805      	ldr	r0, [sp, #20]
 8005526:	f002 fde3 	bl	80080f0 <__lshift>
 800552a:	901a      	str	r0, [sp, #104]	@ 0x68
 800552c:	2800      	cmp	r0, #0
 800552e:	d1d9      	bne.n	80054e4 <_strtod_l+0x73c>
 8005530:	e655      	b.n	80051de <_strtod_l+0x436>
 8005532:	2e00      	cmp	r6, #0
 8005534:	dd07      	ble.n	8005546 <_strtod_l+0x79e>
 8005536:	4649      	mov	r1, r9
 8005538:	4632      	mov	r2, r6
 800553a:	9805      	ldr	r0, [sp, #20]
 800553c:	f002 fdd8 	bl	80080f0 <__lshift>
 8005540:	4681      	mov	r9, r0
 8005542:	2800      	cmp	r0, #0
 8005544:	d0d8      	beq.n	80054f8 <_strtod_l+0x750>
 8005546:	2f00      	cmp	r7, #0
 8005548:	dd08      	ble.n	800555c <_strtod_l+0x7b4>
 800554a:	4641      	mov	r1, r8
 800554c:	463a      	mov	r2, r7
 800554e:	9805      	ldr	r0, [sp, #20]
 8005550:	f002 fdce 	bl	80080f0 <__lshift>
 8005554:	4680      	mov	r8, r0
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f ae41 	beq.w	80051de <_strtod_l+0x436>
 800555c:	464a      	mov	r2, r9
 800555e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005560:	9805      	ldr	r0, [sp, #20]
 8005562:	f002 fe4d 	bl	8008200 <__mdiff>
 8005566:	4604      	mov	r4, r0
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f ae38 	beq.w	80051de <_strtod_l+0x436>
 800556e:	68c3      	ldr	r3, [r0, #12]
 8005570:	4641      	mov	r1, r8
 8005572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005574:	2300      	movs	r3, #0
 8005576:	60c3      	str	r3, [r0, #12]
 8005578:	f002 fe26 	bl	80081c8 <__mcmp>
 800557c:	2800      	cmp	r0, #0
 800557e:	da45      	bge.n	800560c <_strtod_l+0x864>
 8005580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005582:	ea53 030a 	orrs.w	r3, r3, sl
 8005586:	d16b      	bne.n	8005660 <_strtod_l+0x8b8>
 8005588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800558c:	2b00      	cmp	r3, #0
 800558e:	d167      	bne.n	8005660 <_strtod_l+0x8b8>
 8005590:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005594:	0d1b      	lsrs	r3, r3, #20
 8005596:	051b      	lsls	r3, r3, #20
 8005598:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800559c:	d960      	bls.n	8005660 <_strtod_l+0x8b8>
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	b913      	cbnz	r3, 80055a8 <_strtod_l+0x800>
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	dd5b      	ble.n	8005660 <_strtod_l+0x8b8>
 80055a8:	4621      	mov	r1, r4
 80055aa:	2201      	movs	r2, #1
 80055ac:	9805      	ldr	r0, [sp, #20]
 80055ae:	f002 fd9f 	bl	80080f0 <__lshift>
 80055b2:	4641      	mov	r1, r8
 80055b4:	4604      	mov	r4, r0
 80055b6:	f002 fe07 	bl	80081c8 <__mcmp>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	dd50      	ble.n	8005660 <_strtod_l+0x8b8>
 80055be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80055c2:	9a08      	ldr	r2, [sp, #32]
 80055c4:	0d1b      	lsrs	r3, r3, #20
 80055c6:	051b      	lsls	r3, r3, #20
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	d06a      	beq.n	80056a2 <_strtod_l+0x8fa>
 80055cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80055d0:	d867      	bhi.n	80056a2 <_strtod_l+0x8fa>
 80055d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80055d6:	f67f ae98 	bls.w	800530a <_strtod_l+0x562>
 80055da:	4650      	mov	r0, sl
 80055dc:	4659      	mov	r1, fp
 80055de:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <_strtod_l+0x85c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	f7fa ff79 	bl	80004d8 <__aeabi_dmul>
 80055e6:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <_strtod_l+0x860>)
 80055e8:	4682      	mov	sl, r0
 80055ea:	400b      	ands	r3, r1
 80055ec:	468b      	mov	fp, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f47f ae00 	bne.w	80051f4 <_strtod_l+0x44c>
 80055f4:	2322      	movs	r3, #34	@ 0x22
 80055f6:	9a05      	ldr	r2, [sp, #20]
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e5fb      	b.n	80051f4 <_strtod_l+0x44c>
 80055fc:	08009360 	.word	0x08009360
 8005600:	fffffc02 	.word	0xfffffc02
 8005604:	39500000 	.word	0x39500000
 8005608:	7ff00000 	.word	0x7ff00000
 800560c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005610:	d165      	bne.n	80056de <_strtod_l+0x936>
 8005612:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005618:	b35a      	cbz	r2, 8005672 <_strtod_l+0x8ca>
 800561a:	4a99      	ldr	r2, [pc, #612]	@ (8005880 <_strtod_l+0xad8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d12b      	bne.n	8005678 <_strtod_l+0x8d0>
 8005620:	9b08      	ldr	r3, [sp, #32]
 8005622:	4651      	mov	r1, sl
 8005624:	b303      	cbz	r3, 8005668 <_strtod_l+0x8c0>
 8005626:	465a      	mov	r2, fp
 8005628:	4b96      	ldr	r3, [pc, #600]	@ (8005884 <_strtod_l+0xadc>)
 800562a:	4013      	ands	r3, r2
 800562c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005630:	f04f 32ff 	mov.w	r2, #4294967295
 8005634:	d81b      	bhi.n	800566e <_strtod_l+0x8c6>
 8005636:	0d1b      	lsrs	r3, r3, #20
 8005638:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	4299      	cmp	r1, r3
 8005642:	d119      	bne.n	8005678 <_strtod_l+0x8d0>
 8005644:	4b90      	ldr	r3, [pc, #576]	@ (8005888 <_strtod_l+0xae0>)
 8005646:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005648:	429a      	cmp	r2, r3
 800564a:	d102      	bne.n	8005652 <_strtod_l+0x8aa>
 800564c:	3101      	adds	r1, #1
 800564e:	f43f adc6 	beq.w	80051de <_strtod_l+0x436>
 8005652:	f04f 0a00 	mov.w	sl, #0
 8005656:	4b8b      	ldr	r3, [pc, #556]	@ (8005884 <_strtod_l+0xadc>)
 8005658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800565a:	401a      	ands	r2, r3
 800565c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005660:	9b08      	ldr	r3, [sp, #32]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1b9      	bne.n	80055da <_strtod_l+0x832>
 8005666:	e5c5      	b.n	80051f4 <_strtod_l+0x44c>
 8005668:	f04f 33ff 	mov.w	r3, #4294967295
 800566c:	e7e8      	b.n	8005640 <_strtod_l+0x898>
 800566e:	4613      	mov	r3, r2
 8005670:	e7e6      	b.n	8005640 <_strtod_l+0x898>
 8005672:	ea53 030a 	orrs.w	r3, r3, sl
 8005676:	d0a2      	beq.n	80055be <_strtod_l+0x816>
 8005678:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800567a:	b1db      	cbz	r3, 80056b4 <_strtod_l+0x90c>
 800567c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800567e:	4213      	tst	r3, r2
 8005680:	d0ee      	beq.n	8005660 <_strtod_l+0x8b8>
 8005682:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005684:	4650      	mov	r0, sl
 8005686:	4659      	mov	r1, fp
 8005688:	9a08      	ldr	r2, [sp, #32]
 800568a:	b1bb      	cbz	r3, 80056bc <_strtod_l+0x914>
 800568c:	f7ff fb6b 	bl	8004d66 <sulp>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005698:	f7fa fd68 	bl	800016c <__adddf3>
 800569c:	4682      	mov	sl, r0
 800569e:	468b      	mov	fp, r1
 80056a0:	e7de      	b.n	8005660 <_strtod_l+0x8b8>
 80056a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80056a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80056aa:	f04f 3aff 	mov.w	sl, #4294967295
 80056ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80056b2:	e7d5      	b.n	8005660 <_strtod_l+0x8b8>
 80056b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056b6:	ea13 0f0a 	tst.w	r3, sl
 80056ba:	e7e1      	b.n	8005680 <_strtod_l+0x8d8>
 80056bc:	f7ff fb53 	bl	8004d66 <sulp>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056c8:	f7fa fd4e 	bl	8000168 <__aeabi_dsub>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4682      	mov	sl, r0
 80056d2:	468b      	mov	fp, r1
 80056d4:	f7fb f968 	bl	80009a8 <__aeabi_dcmpeq>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0c1      	beq.n	8005660 <_strtod_l+0x8b8>
 80056dc:	e615      	b.n	800530a <_strtod_l+0x562>
 80056de:	4641      	mov	r1, r8
 80056e0:	4620      	mov	r0, r4
 80056e2:	f002 fee1 	bl	80084a8 <__ratio>
 80056e6:	2200      	movs	r2, #0
 80056e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056ec:	4606      	mov	r6, r0
 80056ee:	460f      	mov	r7, r1
 80056f0:	f7fb f96e 	bl	80009d0 <__aeabi_dcmple>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d06d      	beq.n	80057d4 <_strtod_l+0xa2c>
 80056f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d178      	bne.n	80057f0 <_strtod_l+0xa48>
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	d156      	bne.n	80057b2 <_strtod_l+0xa0a>
 8005704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800570a:	2b00      	cmp	r3, #0
 800570c:	d158      	bne.n	80057c0 <_strtod_l+0xa18>
 800570e:	2200      	movs	r2, #0
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	4b5d      	ldr	r3, [pc, #372]	@ (800588c <_strtod_l+0xae4>)
 8005716:	f7fb f951 	bl	80009bc <__aeabi_dcmplt>
 800571a:	2800      	cmp	r0, #0
 800571c:	d157      	bne.n	80057ce <_strtod_l+0xa26>
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	2200      	movs	r2, #0
 8005724:	4b5a      	ldr	r3, [pc, #360]	@ (8005890 <_strtod_l+0xae8>)
 8005726:	f7fa fed7 	bl	80004d8 <__aeabi_dmul>
 800572a:	4606      	mov	r6, r0
 800572c:	460f      	mov	r7, r1
 800572e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005732:	9606      	str	r6, [sp, #24]
 8005734:	9307      	str	r3, [sp, #28]
 8005736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800573a:	4d52      	ldr	r5, [pc, #328]	@ (8005884 <_strtod_l+0xadc>)
 800573c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005742:	401d      	ands	r5, r3
 8005744:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <_strtod_l+0xaec>)
 8005746:	429d      	cmp	r5, r3
 8005748:	f040 80aa 	bne.w	80058a0 <_strtod_l+0xaf8>
 800574c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800574e:	4650      	mov	r0, sl
 8005750:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005754:	4659      	mov	r1, fp
 8005756:	f002 fde7 	bl	8008328 <__ulp>
 800575a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575e:	f7fa febb 	bl	80004d8 <__aeabi_dmul>
 8005762:	4652      	mov	r2, sl
 8005764:	465b      	mov	r3, fp
 8005766:	f7fa fd01 	bl	800016c <__adddf3>
 800576a:	460b      	mov	r3, r1
 800576c:	4945      	ldr	r1, [pc, #276]	@ (8005884 <_strtod_l+0xadc>)
 800576e:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <_strtod_l+0xaf0>)
 8005770:	4019      	ands	r1, r3
 8005772:	4291      	cmp	r1, r2
 8005774:	4682      	mov	sl, r0
 8005776:	d942      	bls.n	80057fe <_strtod_l+0xa56>
 8005778:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800577a:	4b43      	ldr	r3, [pc, #268]	@ (8005888 <_strtod_l+0xae0>)
 800577c:	429a      	cmp	r2, r3
 800577e:	d103      	bne.n	8005788 <_strtod_l+0x9e0>
 8005780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005782:	3301      	adds	r3, #1
 8005784:	f43f ad2b 	beq.w	80051de <_strtod_l+0x436>
 8005788:	f04f 3aff 	mov.w	sl, #4294967295
 800578c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005888 <_strtod_l+0xae0>
 8005790:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005792:	9805      	ldr	r0, [sp, #20]
 8005794:	f002 fa96 	bl	8007cc4 <_Bfree>
 8005798:	4649      	mov	r1, r9
 800579a:	9805      	ldr	r0, [sp, #20]
 800579c:	f002 fa92 	bl	8007cc4 <_Bfree>
 80057a0:	4641      	mov	r1, r8
 80057a2:	9805      	ldr	r0, [sp, #20]
 80057a4:	f002 fa8e 	bl	8007cc4 <_Bfree>
 80057a8:	4621      	mov	r1, r4
 80057aa:	9805      	ldr	r0, [sp, #20]
 80057ac:	f002 fa8a 	bl	8007cc4 <_Bfree>
 80057b0:	e618      	b.n	80053e4 <_strtod_l+0x63c>
 80057b2:	f1ba 0f01 	cmp.w	sl, #1
 80057b6:	d103      	bne.n	80057c0 <_strtod_l+0xa18>
 80057b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f43f ada5 	beq.w	800530a <_strtod_l+0x562>
 80057c0:	2200      	movs	r2, #0
 80057c2:	4b36      	ldr	r3, [pc, #216]	@ (800589c <_strtod_l+0xaf4>)
 80057c4:	2600      	movs	r6, #0
 80057c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057ca:	4f30      	ldr	r7, [pc, #192]	@ (800588c <_strtod_l+0xae4>)
 80057cc:	e7b3      	b.n	8005736 <_strtod_l+0x98e>
 80057ce:	2600      	movs	r6, #0
 80057d0:	4f2f      	ldr	r7, [pc, #188]	@ (8005890 <_strtod_l+0xae8>)
 80057d2:	e7ac      	b.n	800572e <_strtod_l+0x986>
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005890 <_strtod_l+0xae8>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f7fa fe7c 	bl	80004d8 <__aeabi_dmul>
 80057e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057e2:	4606      	mov	r6, r0
 80057e4:	460f      	mov	r7, r1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0a1      	beq.n	800572e <_strtod_l+0x986>
 80057ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80057ee:	e7a2      	b.n	8005736 <_strtod_l+0x98e>
 80057f0:	2200      	movs	r2, #0
 80057f2:	4b26      	ldr	r3, [pc, #152]	@ (800588c <_strtod_l+0xae4>)
 80057f4:	4616      	mov	r6, r2
 80057f6:	461f      	mov	r7, r3
 80057f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057fc:	e79b      	b.n	8005736 <_strtod_l+0x98e>
 80057fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005802:	9b08      	ldr	r3, [sp, #32]
 8005804:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1c1      	bne.n	8005790 <_strtod_l+0x9e8>
 800580c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005810:	0d1b      	lsrs	r3, r3, #20
 8005812:	051b      	lsls	r3, r3, #20
 8005814:	429d      	cmp	r5, r3
 8005816:	d1bb      	bne.n	8005790 <_strtod_l+0x9e8>
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f954 	bl	8000ac8 <__aeabi_d2lz>
 8005820:	f7fa fe2c 	bl	800047c <__aeabi_l2d>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f7fa fc9c 	bl	8000168 <__aeabi_dsub>
 8005830:	460b      	mov	r3, r1
 8005832:	4602      	mov	r2, r0
 8005834:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005838:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800583c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800583e:	ea46 060a 	orr.w	r6, r6, sl
 8005842:	431e      	orrs	r6, r3
 8005844:	d069      	beq.n	800591a <_strtod_l+0xb72>
 8005846:	a30a      	add	r3, pc, #40	@ (adr r3, 8005870 <_strtod_l+0xac8>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fb f8b6 	bl	80009bc <__aeabi_dcmplt>
 8005850:	2800      	cmp	r0, #0
 8005852:	f47f accf 	bne.w	80051f4 <_strtod_l+0x44c>
 8005856:	a308      	add	r3, pc, #32	@ (adr r3, 8005878 <_strtod_l+0xad0>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005860:	f7fb f8ca 	bl	80009f8 <__aeabi_dcmpgt>
 8005864:	2800      	cmp	r0, #0
 8005866:	d093      	beq.n	8005790 <_strtod_l+0x9e8>
 8005868:	e4c4      	b.n	80051f4 <_strtod_l+0x44c>
 800586a:	bf00      	nop
 800586c:	f3af 8000 	nop.w
 8005870:	94a03595 	.word	0x94a03595
 8005874:	3fdfffff 	.word	0x3fdfffff
 8005878:	35afe535 	.word	0x35afe535
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	000fffff 	.word	0x000fffff
 8005884:	7ff00000 	.word	0x7ff00000
 8005888:	7fefffff 	.word	0x7fefffff
 800588c:	3ff00000 	.word	0x3ff00000
 8005890:	3fe00000 	.word	0x3fe00000
 8005894:	7fe00000 	.word	0x7fe00000
 8005898:	7c9fffff 	.word	0x7c9fffff
 800589c:	bff00000 	.word	0xbff00000
 80058a0:	9b08      	ldr	r3, [sp, #32]
 80058a2:	b323      	cbz	r3, 80058ee <_strtod_l+0xb46>
 80058a4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80058a8:	d821      	bhi.n	80058ee <_strtod_l+0xb46>
 80058aa:	a327      	add	r3, pc, #156	@ (adr r3, 8005948 <_strtod_l+0xba0>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f7fb f88c 	bl	80009d0 <__aeabi_dcmple>
 80058b8:	b1a0      	cbz	r0, 80058e4 <_strtod_l+0xb3c>
 80058ba:	4639      	mov	r1, r7
 80058bc:	4630      	mov	r0, r6
 80058be:	f7fb f8e3 	bl	8000a88 <__aeabi_d2uiz>
 80058c2:	2801      	cmp	r0, #1
 80058c4:	bf38      	it	cc
 80058c6:	2001      	movcc	r0, #1
 80058c8:	f7fa fd8c 	bl	80003e4 <__aeabi_ui2d>
 80058cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ce:	4606      	mov	r6, r0
 80058d0:	460f      	mov	r7, r1
 80058d2:	b9fb      	cbnz	r3, 8005914 <_strtod_l+0xb6c>
 80058d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058d8:	9014      	str	r0, [sp, #80]	@ 0x50
 80058da:	9315      	str	r3, [sp, #84]	@ 0x54
 80058dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80058e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80058e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80058e6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80058ea:	1b5b      	subs	r3, r3, r5
 80058ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80058ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80058f6:	f002 fd17 	bl	8008328 <__ulp>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fa fde9 	bl	80004d8 <__aeabi_dmul>
 8005906:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800590a:	f7fa fc2f 	bl	800016c <__adddf3>
 800590e:	4682      	mov	sl, r0
 8005910:	468b      	mov	fp, r1
 8005912:	e776      	b.n	8005802 <_strtod_l+0xa5a>
 8005914:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005918:	e7e0      	b.n	80058dc <_strtod_l+0xb34>
 800591a:	a30d      	add	r3, pc, #52	@ (adr r3, 8005950 <_strtod_l+0xba8>)
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f7fb f84c 	bl	80009bc <__aeabi_dcmplt>
 8005924:	e79e      	b.n	8005864 <_strtod_l+0xabc>
 8005926:	2300      	movs	r3, #0
 8005928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800592a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800592c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	f7ff ba77 	b.w	8004e22 <_strtod_l+0x7a>
 8005934:	2a65      	cmp	r2, #101	@ 0x65
 8005936:	f43f ab6e 	beq.w	8005016 <_strtod_l+0x26e>
 800593a:	2a45      	cmp	r2, #69	@ 0x45
 800593c:	f43f ab6b 	beq.w	8005016 <_strtod_l+0x26e>
 8005940:	2301      	movs	r3, #1
 8005942:	f7ff bba6 	b.w	8005092 <_strtod_l+0x2ea>
 8005946:	bf00      	nop
 8005948:	ffc00000 	.word	0xffc00000
 800594c:	41dfffff 	.word	0x41dfffff
 8005950:	94a03595 	.word	0x94a03595
 8005954:	3fcfffff 	.word	0x3fcfffff

08005958 <strtod>:
 8005958:	460a      	mov	r2, r1
 800595a:	4601      	mov	r1, r0
 800595c:	4802      	ldr	r0, [pc, #8]	@ (8005968 <strtod+0x10>)
 800595e:	4b03      	ldr	r3, [pc, #12]	@ (800596c <strtod+0x14>)
 8005960:	6800      	ldr	r0, [r0, #0]
 8005962:	f7ff ba21 	b.w	8004da8 <_strtod_l>
 8005966:	bf00      	nop
 8005968:	200001a4 	.word	0x200001a4
 800596c:	20000038 	.word	0x20000038

08005970 <_strtol_l.constprop.0>:
 8005970:	2b24      	cmp	r3, #36	@ 0x24
 8005972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005976:	4686      	mov	lr, r0
 8005978:	4690      	mov	r8, r2
 800597a:	d801      	bhi.n	8005980 <_strtol_l.constprop.0+0x10>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d106      	bne.n	800598e <_strtol_l.constprop.0+0x1e>
 8005980:	f000 fe76 	bl	8006670 <__errno>
 8005984:	2316      	movs	r3, #22
 8005986:	6003      	str	r3, [r0, #0]
 8005988:	2000      	movs	r0, #0
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	460d      	mov	r5, r1
 8005990:	4833      	ldr	r0, [pc, #204]	@ (8005a60 <_strtol_l.constprop.0+0xf0>)
 8005992:	462a      	mov	r2, r5
 8005994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005998:	5d06      	ldrb	r6, [r0, r4]
 800599a:	f016 0608 	ands.w	r6, r6, #8
 800599e:	d1f8      	bne.n	8005992 <_strtol_l.constprop.0+0x22>
 80059a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80059a2:	d12d      	bne.n	8005a00 <_strtol_l.constprop.0+0x90>
 80059a4:	2601      	movs	r6, #1
 80059a6:	782c      	ldrb	r4, [r5, #0]
 80059a8:	1c95      	adds	r5, r2, #2
 80059aa:	f033 0210 	bics.w	r2, r3, #16
 80059ae:	d109      	bne.n	80059c4 <_strtol_l.constprop.0+0x54>
 80059b0:	2c30      	cmp	r4, #48	@ 0x30
 80059b2:	d12a      	bne.n	8005a0a <_strtol_l.constprop.0+0x9a>
 80059b4:	782a      	ldrb	r2, [r5, #0]
 80059b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80059ba:	2a58      	cmp	r2, #88	@ 0x58
 80059bc:	d125      	bne.n	8005a0a <_strtol_l.constprop.0+0x9a>
 80059be:	2310      	movs	r3, #16
 80059c0:	786c      	ldrb	r4, [r5, #1]
 80059c2:	3502      	adds	r5, #2
 80059c4:	2200      	movs	r2, #0
 80059c6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80059ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059ce:	fbbc f9f3 	udiv	r9, ip, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80059d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80059dc:	2f09      	cmp	r7, #9
 80059de:	d81b      	bhi.n	8005a18 <_strtol_l.constprop.0+0xa8>
 80059e0:	463c      	mov	r4, r7
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	dd27      	ble.n	8005a36 <_strtol_l.constprop.0+0xc6>
 80059e6:	1c57      	adds	r7, r2, #1
 80059e8:	d007      	beq.n	80059fa <_strtol_l.constprop.0+0x8a>
 80059ea:	4581      	cmp	r9, r0
 80059ec:	d320      	bcc.n	8005a30 <_strtol_l.constprop.0+0xc0>
 80059ee:	d101      	bne.n	80059f4 <_strtol_l.constprop.0+0x84>
 80059f0:	45a2      	cmp	sl, r4
 80059f2:	db1d      	blt.n	8005a30 <_strtol_l.constprop.0+0xc0>
 80059f4:	2201      	movs	r2, #1
 80059f6:	fb00 4003 	mla	r0, r0, r3, r4
 80059fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059fe:	e7eb      	b.n	80059d8 <_strtol_l.constprop.0+0x68>
 8005a00:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a02:	bf04      	itt	eq
 8005a04:	782c      	ldrbeq	r4, [r5, #0]
 8005a06:	1c95      	addeq	r5, r2, #2
 8005a08:	e7cf      	b.n	80059aa <_strtol_l.constprop.0+0x3a>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1da      	bne.n	80059c4 <_strtol_l.constprop.0+0x54>
 8005a0e:	2c30      	cmp	r4, #48	@ 0x30
 8005a10:	bf0c      	ite	eq
 8005a12:	2308      	moveq	r3, #8
 8005a14:	230a      	movne	r3, #10
 8005a16:	e7d5      	b.n	80059c4 <_strtol_l.constprop.0+0x54>
 8005a18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005a1c:	2f19      	cmp	r7, #25
 8005a1e:	d801      	bhi.n	8005a24 <_strtol_l.constprop.0+0xb4>
 8005a20:	3c37      	subs	r4, #55	@ 0x37
 8005a22:	e7de      	b.n	80059e2 <_strtol_l.constprop.0+0x72>
 8005a24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005a28:	2f19      	cmp	r7, #25
 8005a2a:	d804      	bhi.n	8005a36 <_strtol_l.constprop.0+0xc6>
 8005a2c:	3c57      	subs	r4, #87	@ 0x57
 8005a2e:	e7d8      	b.n	80059e2 <_strtol_l.constprop.0+0x72>
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	e7e1      	b.n	80059fa <_strtol_l.constprop.0+0x8a>
 8005a36:	1c53      	adds	r3, r2, #1
 8005a38:	d108      	bne.n	8005a4c <_strtol_l.constprop.0+0xdc>
 8005a3a:	2322      	movs	r3, #34	@ 0x22
 8005a3c:	4660      	mov	r0, ip
 8005a3e:	f8ce 3000 	str.w	r3, [lr]
 8005a42:	f1b8 0f00 	cmp.w	r8, #0
 8005a46:	d0a0      	beq.n	800598a <_strtol_l.constprop.0+0x1a>
 8005a48:	1e69      	subs	r1, r5, #1
 8005a4a:	e006      	b.n	8005a5a <_strtol_l.constprop.0+0xea>
 8005a4c:	b106      	cbz	r6, 8005a50 <_strtol_l.constprop.0+0xe0>
 8005a4e:	4240      	negs	r0, r0
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	d099      	beq.n	800598a <_strtol_l.constprop.0+0x1a>
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d1f6      	bne.n	8005a48 <_strtol_l.constprop.0+0xd8>
 8005a5a:	f8c8 1000 	str.w	r1, [r8]
 8005a5e:	e794      	b.n	800598a <_strtol_l.constprop.0+0x1a>
 8005a60:	08009389 	.word	0x08009389

08005a64 <strtol>:
 8005a64:	4613      	mov	r3, r2
 8005a66:	460a      	mov	r2, r1
 8005a68:	4601      	mov	r1, r0
 8005a6a:	4802      	ldr	r0, [pc, #8]	@ (8005a74 <strtol+0x10>)
 8005a6c:	6800      	ldr	r0, [r0, #0]
 8005a6e:	f7ff bf7f 	b.w	8005970 <_strtol_l.constprop.0>
 8005a72:	bf00      	nop
 8005a74:	200001a4 	.word	0x200001a4

08005a78 <__cvt>:
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7e:	461d      	mov	r5, r3
 8005a80:	bfbb      	ittet	lt
 8005a82:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a86:	461d      	movlt	r5, r3
 8005a88:	2300      	movge	r3, #0
 8005a8a:	232d      	movlt	r3, #45	@ 0x2d
 8005a8c:	b088      	sub	sp, #32
 8005a8e:	4614      	mov	r4, r2
 8005a90:	bfb8      	it	lt
 8005a92:	4614      	movlt	r4, r2
 8005a94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a96:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a98:	7013      	strb	r3, [r2, #0]
 8005a9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005aa0:	f023 0820 	bic.w	r8, r3, #32
 8005aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aa8:	d005      	beq.n	8005ab6 <__cvt+0x3e>
 8005aaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005aae:	d100      	bne.n	8005ab2 <__cvt+0x3a>
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e000      	b.n	8005ab8 <__cvt+0x40>
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	aa07      	add	r2, sp, #28
 8005aba:	9204      	str	r2, [sp, #16]
 8005abc:	aa06      	add	r2, sp, #24
 8005abe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ac2:	e9cd 3600 	strd	r3, r6, [sp]
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f000 fea9 	bl	8006820 <_dtoa_r>
 8005ace:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	d119      	bne.n	8005b0a <__cvt+0x92>
 8005ad6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ad8:	07db      	lsls	r3, r3, #31
 8005ada:	d50e      	bpl.n	8005afa <__cvt+0x82>
 8005adc:	eb00 0906 	add.w	r9, r0, r6
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8005aec:	b108      	cbz	r0, 8005af2 <__cvt+0x7a>
 8005aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8005af2:	2230      	movs	r2, #48	@ 0x30
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	454b      	cmp	r3, r9
 8005af8:	d31e      	bcc.n	8005b38 <__cvt+0xc0>
 8005afa:	4638      	mov	r0, r7
 8005afc:	9b07      	ldr	r3, [sp, #28]
 8005afe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b00:	1bdb      	subs	r3, r3, r7
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	b008      	add	sp, #32
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b0e:	eb00 0906 	add.w	r9, r0, r6
 8005b12:	d1e5      	bne.n	8005ae0 <__cvt+0x68>
 8005b14:	7803      	ldrb	r3, [r0, #0]
 8005b16:	2b30      	cmp	r3, #48	@ 0x30
 8005b18:	d10a      	bne.n	8005b30 <__cvt+0xb8>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8005b26:	b918      	cbnz	r0, 8005b30 <__cvt+0xb8>
 8005b28:	f1c6 0601 	rsb	r6, r6, #1
 8005b2c:	f8ca 6000 	str.w	r6, [sl]
 8005b30:	f8da 3000 	ldr.w	r3, [sl]
 8005b34:	4499      	add	r9, r3
 8005b36:	e7d3      	b.n	8005ae0 <__cvt+0x68>
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	9107      	str	r1, [sp, #28]
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e7d9      	b.n	8005af4 <__cvt+0x7c>

08005b40 <__exponent>:
 8005b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b42:	2900      	cmp	r1, #0
 8005b44:	bfb6      	itet	lt
 8005b46:	232d      	movlt	r3, #45	@ 0x2d
 8005b48:	232b      	movge	r3, #43	@ 0x2b
 8005b4a:	4249      	neglt	r1, r1
 8005b4c:	2909      	cmp	r1, #9
 8005b4e:	7002      	strb	r2, [r0, #0]
 8005b50:	7043      	strb	r3, [r0, #1]
 8005b52:	dd29      	ble.n	8005ba8 <__exponent+0x68>
 8005b54:	f10d 0307 	add.w	r3, sp, #7
 8005b58:	461d      	mov	r5, r3
 8005b5a:	270a      	movs	r7, #10
 8005b5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b60:	461a      	mov	r2, r3
 8005b62:	fb07 1416 	mls	r4, r7, r6, r1
 8005b66:	3430      	adds	r4, #48	@ 0x30
 8005b68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	2c63      	cmp	r4, #99	@ 0x63
 8005b70:	4631      	mov	r1, r6
 8005b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b76:	dcf1      	bgt.n	8005b5c <__exponent+0x1c>
 8005b78:	3130      	adds	r1, #48	@ 0x30
 8005b7a:	1e94      	subs	r4, r2, #2
 8005b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b80:	4623      	mov	r3, r4
 8005b82:	1c41      	adds	r1, r0, #1
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	d30a      	bcc.n	8005b9e <__exponent+0x5e>
 8005b88:	f10d 0309 	add.w	r3, sp, #9
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	42ac      	cmp	r4, r5
 8005b90:	bf88      	it	hi
 8005b92:	2300      	movhi	r3, #0
 8005b94:	3302      	adds	r3, #2
 8005b96:	4403      	add	r3, r0
 8005b98:	1a18      	subs	r0, r3, r0
 8005b9a:	b003      	add	sp, #12
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ba2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ba6:	e7ed      	b.n	8005b84 <__exponent+0x44>
 8005ba8:	2330      	movs	r3, #48	@ 0x30
 8005baa:	3130      	adds	r1, #48	@ 0x30
 8005bac:	7083      	strb	r3, [r0, #2]
 8005bae:	70c1      	strb	r1, [r0, #3]
 8005bb0:	1d03      	adds	r3, r0, #4
 8005bb2:	e7f1      	b.n	8005b98 <__exponent+0x58>

08005bb4 <_printf_float>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	b091      	sub	sp, #68	@ 0x44
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	461f      	mov	r7, r3
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	f000 fd09 	bl	80065dc <_localeconv_r>
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	9308      	str	r3, [sp, #32]
 8005bd0:	f7fa fabe 	bl	8000150 <strlen>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bdc:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bde:	3307      	adds	r3, #7
 8005be0:	f023 0307 	bic.w	r3, r3, #7
 8005be4:	f103 0208 	add.w	r2, r3, #8
 8005be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bec:	f8d4 b000 	ldr.w	fp, [r4]
 8005bf0:	f8c8 2000 	str.w	r2, [r8]
 8005bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bfe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295
 8005c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8005e80 <_printf_float+0x2cc>)
 8005c10:	f7fa fefc 	bl	8000a0c <__aeabi_dcmpun>
 8005c14:	bb70      	cbnz	r0, 8005c74 <_printf_float+0xc0>
 8005c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1e:	4b98      	ldr	r3, [pc, #608]	@ (8005e80 <_printf_float+0x2cc>)
 8005c20:	f7fa fed6 	bl	80009d0 <__aeabi_dcmple>
 8005c24:	bb30      	cbnz	r0, 8005c74 <_printf_float+0xc0>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa fec5 	bl	80009bc <__aeabi_dcmplt>
 8005c32:	b110      	cbz	r0, 8005c3a <_printf_float+0x86>
 8005c34:	232d      	movs	r3, #45	@ 0x2d
 8005c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c3a:	4a92      	ldr	r2, [pc, #584]	@ (8005e84 <_printf_float+0x2d0>)
 8005c3c:	4b92      	ldr	r3, [pc, #584]	@ (8005e88 <_printf_float+0x2d4>)
 8005c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c42:	bf94      	ite	ls
 8005c44:	4690      	movls	r8, r2
 8005c46:	4698      	movhi	r8, r3
 8005c48:	2303      	movs	r3, #3
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	f02b 0304 	bic.w	r3, fp, #4
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	4633      	mov	r3, r6
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	9700      	str	r7, [sp, #0]
 8005c5e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c60:	f000 f9d4 	bl	800600c <_printf_common>
 8005c64:	3001      	adds	r0, #1
 8005c66:	f040 8090 	bne.w	8005d8a <_printf_float+0x1d6>
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	b011      	add	sp, #68	@ 0x44
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa fec6 	bl	8000a0c <__aeabi_dcmpun>
 8005c80:	b148      	cbz	r0, 8005c96 <_printf_float+0xe2>
 8005c82:	464b      	mov	r3, r9
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfb8      	it	lt
 8005c88:	232d      	movlt	r3, #45	@ 0x2d
 8005c8a:	4a80      	ldr	r2, [pc, #512]	@ (8005e8c <_printf_float+0x2d8>)
 8005c8c:	bfb8      	it	lt
 8005c8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c92:	4b7f      	ldr	r3, [pc, #508]	@ (8005e90 <_printf_float+0x2dc>)
 8005c94:	e7d3      	b.n	8005c3e <_printf_float+0x8a>
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	d13f      	bne.n	8005d20 <_printf_float+0x16c>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	6063      	str	r3, [r4, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	9206      	str	r2, [sp, #24]
 8005cae:	aa0e      	add	r2, sp, #56	@ 0x38
 8005cb0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005cb4:	aa0d      	add	r2, sp, #52	@ 0x34
 8005cb6:	9203      	str	r2, [sp, #12]
 8005cb8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005cbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	464b      	mov	r3, r9
 8005cca:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ccc:	f7ff fed4 	bl	8005a78 <__cvt>
 8005cd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cd2:	4680      	mov	r8, r0
 8005cd4:	2947      	cmp	r1, #71	@ 0x47
 8005cd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005cd8:	d128      	bne.n	8005d2c <_printf_float+0x178>
 8005cda:	1cc8      	adds	r0, r1, #3
 8005cdc:	db02      	blt.n	8005ce4 <_printf_float+0x130>
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	dd40      	ble.n	8005d66 <_printf_float+0x1b2>
 8005ce4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ce8:	fa5f fa8a 	uxtb.w	sl, sl
 8005cec:	4652      	mov	r2, sl
 8005cee:	3901      	subs	r1, #1
 8005cf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cf4:	910d      	str	r1, [sp, #52]	@ 0x34
 8005cf6:	f7ff ff23 	bl	8005b40 <__exponent>
 8005cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cfc:	4681      	mov	r9, r0
 8005cfe:	1813      	adds	r3, r2, r0
 8005d00:	2a01      	cmp	r2, #1
 8005d02:	6123      	str	r3, [r4, #16]
 8005d04:	dc02      	bgt.n	8005d0c <_printf_float+0x158>
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	07d2      	lsls	r2, r2, #31
 8005d0a:	d501      	bpl.n	8005d10 <_printf_float+0x15c>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d09e      	beq.n	8005c56 <_printf_float+0xa2>
 8005d18:	232d      	movs	r3, #45	@ 0x2d
 8005d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d1e:	e79a      	b.n	8005c56 <_printf_float+0xa2>
 8005d20:	2947      	cmp	r1, #71	@ 0x47
 8005d22:	d1bf      	bne.n	8005ca4 <_printf_float+0xf0>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1bd      	bne.n	8005ca4 <_printf_float+0xf0>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7ba      	b.n	8005ca2 <_printf_float+0xee>
 8005d2c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d30:	d9dc      	bls.n	8005cec <_printf_float+0x138>
 8005d32:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d36:	d118      	bne.n	8005d6a <_printf_float+0x1b6>
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	dd0b      	ble.n	8005d56 <_printf_float+0x1a2>
 8005d3e:	6121      	str	r1, [r4, #16]
 8005d40:	b913      	cbnz	r3, 8005d48 <_printf_float+0x194>
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	07d0      	lsls	r0, r2, #31
 8005d46:	d502      	bpl.n	8005d4e <_printf_float+0x19a>
 8005d48:	3301      	adds	r3, #1
 8005d4a:	440b      	add	r3, r1
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	f04f 0900 	mov.w	r9, #0
 8005d52:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d54:	e7dc      	b.n	8005d10 <_printf_float+0x15c>
 8005d56:	b913      	cbnz	r3, 8005d5e <_printf_float+0x1aa>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	07d2      	lsls	r2, r2, #31
 8005d5c:	d501      	bpl.n	8005d62 <_printf_float+0x1ae>
 8005d5e:	3302      	adds	r3, #2
 8005d60:	e7f4      	b.n	8005d4c <_printf_float+0x198>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e7f2      	b.n	8005d4c <_printf_float+0x198>
 8005d66:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d6c:	4299      	cmp	r1, r3
 8005d6e:	db05      	blt.n	8005d7c <_printf_float+0x1c8>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	6121      	str	r1, [r4, #16]
 8005d74:	07d8      	lsls	r0, r3, #31
 8005d76:	d5ea      	bpl.n	8005d4e <_printf_float+0x19a>
 8005d78:	1c4b      	adds	r3, r1, #1
 8005d7a:	e7e7      	b.n	8005d4c <_printf_float+0x198>
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	bfcc      	ite	gt
 8005d80:	2201      	movgt	r2, #1
 8005d82:	f1c1 0202 	rsble	r2, r1, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	e7e0      	b.n	8005d4c <_printf_float+0x198>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	055a      	lsls	r2, r3, #21
 8005d8e:	d407      	bmi.n	8005da0 <_printf_float+0x1ec>
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	4642      	mov	r2, r8
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d12b      	bne.n	8005df6 <_printf_float+0x242>
 8005d9e:	e764      	b.n	8005c6a <_printf_float+0xb6>
 8005da0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005da4:	f240 80dc 	bls.w	8005f60 <_printf_float+0x3ac>
 8005da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dac:	2200      	movs	r2, #0
 8005dae:	2300      	movs	r3, #0
 8005db0:	f7fa fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d033      	beq.n	8005e20 <_printf_float+0x26c>
 8005db8:	2301      	movs	r3, #1
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	4a35      	ldr	r2, [pc, #212]	@ (8005e94 <_printf_float+0x2e0>)
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f43f af51 	beq.w	8005c6a <_printf_float+0xb6>
 8005dc8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	db02      	blt.n	8005dd6 <_printf_float+0x222>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07d8      	lsls	r0, r3, #31
 8005dd4:	d50f      	bpl.n	8005df6 <_printf_float+0x242>
 8005dd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	f43f af42 	beq.w	8005c6a <_printf_float+0xb6>
 8005de6:	f04f 0900 	mov.w	r9, #0
 8005dea:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dee:	f104 0a1a 	add.w	sl, r4, #26
 8005df2:	45c8      	cmp	r8, r9
 8005df4:	dc09      	bgt.n	8005e0a <_printf_float+0x256>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	079b      	lsls	r3, r3, #30
 8005dfa:	f100 8102 	bmi.w	8006002 <_printf_float+0x44e>
 8005dfe:	68e0      	ldr	r0, [r4, #12]
 8005e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e02:	4298      	cmp	r0, r3
 8005e04:	bfb8      	it	lt
 8005e06:	4618      	movlt	r0, r3
 8005e08:	e731      	b.n	8005c6e <_printf_float+0xba>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f af28 	beq.w	8005c6a <_printf_float+0xb6>
 8005e1a:	f109 0901 	add.w	r9, r9, #1
 8005e1e:	e7e8      	b.n	8005df2 <_printf_float+0x23e>
 8005e20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dc38      	bgt.n	8005e98 <_printf_float+0x2e4>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	4a19      	ldr	r2, [pc, #100]	@ (8005e94 <_printf_float+0x2e0>)
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	f43f af1a 	beq.w	8005c6a <_printf_float+0xb6>
 8005e36:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e3a:	ea59 0303 	orrs.w	r3, r9, r3
 8005e3e:	d102      	bne.n	8005e46 <_printf_float+0x292>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07d9      	lsls	r1, r3, #31
 8005e44:	d5d7      	bpl.n	8005df6 <_printf_float+0x242>
 8005e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f af0a 	beq.w	8005c6a <_printf_float+0xb6>
 8005e56:	f04f 0a00 	mov.w	sl, #0
 8005e5a:	f104 0b1a 	add.w	fp, r4, #26
 8005e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e60:	425b      	negs	r3, r3
 8005e62:	4553      	cmp	r3, sl
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x2b6>
 8005e66:	464b      	mov	r3, r9
 8005e68:	e793      	b.n	8005d92 <_printf_float+0x1de>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	465a      	mov	r2, fp
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f aef8 	beq.w	8005c6a <_printf_float+0xb6>
 8005e7a:	f10a 0a01 	add.w	sl, sl, #1
 8005e7e:	e7ee      	b.n	8005e5e <_printf_float+0x2aa>
 8005e80:	7fefffff 	.word	0x7fefffff
 8005e84:	08009489 	.word	0x08009489
 8005e88:	0800948d 	.word	0x0800948d
 8005e8c:	08009491 	.word	0x08009491
 8005e90:	08009495 	.word	0x08009495
 8005e94:	08009499 	.word	0x08009499
 8005e98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e9a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e9e:	4553      	cmp	r3, sl
 8005ea0:	bfa8      	it	ge
 8005ea2:	4653      	movge	r3, sl
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	4699      	mov	r9, r3
 8005ea8:	dc36      	bgt.n	8005f18 <_printf_float+0x364>
 8005eaa:	f04f 0b00 	mov.w	fp, #0
 8005eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eb2:	f104 021a 	add.w	r2, r4, #26
 8005eb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eba:	eba3 0309 	sub.w	r3, r3, r9
 8005ebe:	455b      	cmp	r3, fp
 8005ec0:	dc31      	bgt.n	8005f26 <_printf_float+0x372>
 8005ec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ec4:	459a      	cmp	sl, r3
 8005ec6:	dc3a      	bgt.n	8005f3e <_printf_float+0x38a>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07da      	lsls	r2, r3, #31
 8005ecc:	d437      	bmi.n	8005f3e <_printf_float+0x38a>
 8005ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed0:	ebaa 0903 	sub.w	r9, sl, r3
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed6:	ebaa 0303 	sub.w	r3, sl, r3
 8005eda:	4599      	cmp	r9, r3
 8005edc:	bfa8      	it	ge
 8005ede:	4699      	movge	r9, r3
 8005ee0:	f1b9 0f00 	cmp.w	r9, #0
 8005ee4:	dc33      	bgt.n	8005f4e <_printf_float+0x39a>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eee:	f104 0b1a 	add.w	fp, r4, #26
 8005ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef8:	eba3 0309 	sub.w	r3, r3, r9
 8005efc:	4543      	cmp	r3, r8
 8005efe:	f77f af7a 	ble.w	8005df6 <_printf_float+0x242>
 8005f02:	2301      	movs	r3, #1
 8005f04:	465a      	mov	r2, fp
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f43f aeac 	beq.w	8005c6a <_printf_float+0xb6>
 8005f12:	f108 0801 	add.w	r8, r8, #1
 8005f16:	e7ec      	b.n	8005ef2 <_printf_float+0x33e>
 8005f18:	4642      	mov	r2, r8
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	d1c2      	bne.n	8005eaa <_printf_float+0x2f6>
 8005f24:	e6a1      	b.n	8005c6a <_printf_float+0xb6>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f ae9a 	beq.w	8005c6a <_printf_float+0xb6>
 8005f36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f38:	f10b 0b01 	add.w	fp, fp, #1
 8005f3c:	e7bb      	b.n	8005eb6 <_printf_float+0x302>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d1c0      	bne.n	8005ece <_printf_float+0x31a>
 8005f4c:	e68d      	b.n	8005c6a <_printf_float+0xb6>
 8005f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f50:	464b      	mov	r3, r9
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	4442      	add	r2, r8
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1c3      	bne.n	8005ee6 <_printf_float+0x332>
 8005f5e:	e684      	b.n	8005c6a <_printf_float+0xb6>
 8005f60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f64:	f1ba 0f01 	cmp.w	sl, #1
 8005f68:	dc01      	bgt.n	8005f6e <_printf_float+0x3ba>
 8005f6a:	07db      	lsls	r3, r3, #31
 8005f6c:	d536      	bpl.n	8005fdc <_printf_float+0x428>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4642      	mov	r2, r8
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae76 	beq.w	8005c6a <_printf_float+0xb6>
 8005f7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f ae6e 	beq.w	8005c6a <_printf_float+0xb6>
 8005f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f9a:	f7fa fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8005f9e:	b9c0      	cbnz	r0, 8005fd2 <_printf_float+0x41e>
 8005fa0:	4653      	mov	r3, sl
 8005fa2:	f108 0201 	add.w	r2, r8, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	d10c      	bne.n	8005fca <_printf_float+0x416>
 8005fb0:	e65b      	b.n	8005c6a <_printf_float+0xb6>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	465a      	mov	r2, fp
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae54 	beq.w	8005c6a <_printf_float+0xb6>
 8005fc2:	f108 0801 	add.w	r8, r8, #1
 8005fc6:	45d0      	cmp	r8, sl
 8005fc8:	dbf3      	blt.n	8005fb2 <_printf_float+0x3fe>
 8005fca:	464b      	mov	r3, r9
 8005fcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fd0:	e6e0      	b.n	8005d94 <_printf_float+0x1e0>
 8005fd2:	f04f 0800 	mov.w	r8, #0
 8005fd6:	f104 0b1a 	add.w	fp, r4, #26
 8005fda:	e7f4      	b.n	8005fc6 <_printf_float+0x412>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4642      	mov	r2, r8
 8005fe0:	e7e1      	b.n	8005fa6 <_printf_float+0x3f2>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	464a      	mov	r2, r9
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	f43f ae3c 	beq.w	8005c6a <_printf_float+0xb6>
 8005ff2:	f108 0801 	add.w	r8, r8, #1
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ffa:	1a5b      	subs	r3, r3, r1
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	dcf0      	bgt.n	8005fe2 <_printf_float+0x42e>
 8006000:	e6fd      	b.n	8005dfe <_printf_float+0x24a>
 8006002:	f04f 0800 	mov.w	r8, #0
 8006006:	f104 0919 	add.w	r9, r4, #25
 800600a:	e7f4      	b.n	8005ff6 <_printf_float+0x442>

0800600c <_printf_common>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	4616      	mov	r6, r2
 8006012:	4698      	mov	r8, r3
 8006014:	688a      	ldr	r2, [r1, #8]
 8006016:	690b      	ldr	r3, [r1, #16]
 8006018:	4607      	mov	r7, r0
 800601a:	4293      	cmp	r3, r2
 800601c:	bfb8      	it	lt
 800601e:	4613      	movlt	r3, r2
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006026:	460c      	mov	r4, r1
 8006028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800602c:	b10a      	cbz	r2, 8006032 <_printf_common+0x26>
 800602e:	3301      	adds	r3, #1
 8006030:	6033      	str	r3, [r6, #0]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	0699      	lsls	r1, r3, #26
 8006036:	bf42      	ittt	mi
 8006038:	6833      	ldrmi	r3, [r6, #0]
 800603a:	3302      	addmi	r3, #2
 800603c:	6033      	strmi	r3, [r6, #0]
 800603e:	6825      	ldr	r5, [r4, #0]
 8006040:	f015 0506 	ands.w	r5, r5, #6
 8006044:	d106      	bne.n	8006054 <_printf_common+0x48>
 8006046:	f104 0a19 	add.w	sl, r4, #25
 800604a:	68e3      	ldr	r3, [r4, #12]
 800604c:	6832      	ldr	r2, [r6, #0]
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	42ab      	cmp	r3, r5
 8006052:	dc2b      	bgt.n	80060ac <_printf_common+0xa0>
 8006054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006058:	6822      	ldr	r2, [r4, #0]
 800605a:	3b00      	subs	r3, #0
 800605c:	bf18      	it	ne
 800605e:	2301      	movne	r3, #1
 8006060:	0692      	lsls	r2, r2, #26
 8006062:	d430      	bmi.n	80060c6 <_printf_common+0xba>
 8006064:	4641      	mov	r1, r8
 8006066:	4638      	mov	r0, r7
 8006068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800606c:	47c8      	blx	r9
 800606e:	3001      	adds	r0, #1
 8006070:	d023      	beq.n	80060ba <_printf_common+0xae>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	6922      	ldr	r2, [r4, #16]
 8006076:	f003 0306 	and.w	r3, r3, #6
 800607a:	2b04      	cmp	r3, #4
 800607c:	bf14      	ite	ne
 800607e:	2500      	movne	r5, #0
 8006080:	6833      	ldreq	r3, [r6, #0]
 8006082:	f04f 0600 	mov.w	r6, #0
 8006086:	bf08      	it	eq
 8006088:	68e5      	ldreq	r5, [r4, #12]
 800608a:	f104 041a 	add.w	r4, r4, #26
 800608e:	bf08      	it	eq
 8006090:	1aed      	subeq	r5, r5, r3
 8006092:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006096:	bf08      	it	eq
 8006098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800609c:	4293      	cmp	r3, r2
 800609e:	bfc4      	itt	gt
 80060a0:	1a9b      	subgt	r3, r3, r2
 80060a2:	18ed      	addgt	r5, r5, r3
 80060a4:	42b5      	cmp	r5, r6
 80060a6:	d11a      	bne.n	80060de <_printf_common+0xd2>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e008      	b.n	80060be <_printf_common+0xb2>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4652      	mov	r2, sl
 80060b0:	4641      	mov	r1, r8
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c8      	blx	r9
 80060b6:	3001      	adds	r0, #1
 80060b8:	d103      	bne.n	80060c2 <_printf_common+0xb6>
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	3501      	adds	r5, #1
 80060c4:	e7c1      	b.n	800604a <_printf_common+0x3e>
 80060c6:	2030      	movs	r0, #48	@ 0x30
 80060c8:	18e1      	adds	r1, r4, r3
 80060ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060d4:	4422      	add	r2, r4
 80060d6:	3302      	adds	r3, #2
 80060d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060dc:	e7c2      	b.n	8006064 <_printf_common+0x58>
 80060de:	2301      	movs	r3, #1
 80060e0:	4622      	mov	r2, r4
 80060e2:	4641      	mov	r1, r8
 80060e4:	4638      	mov	r0, r7
 80060e6:	47c8      	blx	r9
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0e6      	beq.n	80060ba <_printf_common+0xae>
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7d9      	b.n	80060a4 <_printf_common+0x98>

080060f0 <_printf_i>:
 80060f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	7e0f      	ldrb	r7, [r1, #24]
 80060f6:	4691      	mov	r9, r2
 80060f8:	2f78      	cmp	r7, #120	@ 0x78
 80060fa:	4680      	mov	r8, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	469a      	mov	sl, r3
 8006100:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006106:	d807      	bhi.n	8006118 <_printf_i+0x28>
 8006108:	2f62      	cmp	r7, #98	@ 0x62
 800610a:	d80a      	bhi.n	8006122 <_printf_i+0x32>
 800610c:	2f00      	cmp	r7, #0
 800610e:	f000 80d3 	beq.w	80062b8 <_printf_i+0x1c8>
 8006112:	2f58      	cmp	r7, #88	@ 0x58
 8006114:	f000 80ba 	beq.w	800628c <_printf_i+0x19c>
 8006118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800611c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006120:	e03a      	b.n	8006198 <_printf_i+0xa8>
 8006122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006126:	2b15      	cmp	r3, #21
 8006128:	d8f6      	bhi.n	8006118 <_printf_i+0x28>
 800612a:	a101      	add	r1, pc, #4	@ (adr r1, 8006130 <_printf_i+0x40>)
 800612c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006130:	08006189 	.word	0x08006189
 8006134:	0800619d 	.word	0x0800619d
 8006138:	08006119 	.word	0x08006119
 800613c:	08006119 	.word	0x08006119
 8006140:	08006119 	.word	0x08006119
 8006144:	08006119 	.word	0x08006119
 8006148:	0800619d 	.word	0x0800619d
 800614c:	08006119 	.word	0x08006119
 8006150:	08006119 	.word	0x08006119
 8006154:	08006119 	.word	0x08006119
 8006158:	08006119 	.word	0x08006119
 800615c:	0800629f 	.word	0x0800629f
 8006160:	080061c7 	.word	0x080061c7
 8006164:	08006259 	.word	0x08006259
 8006168:	08006119 	.word	0x08006119
 800616c:	08006119 	.word	0x08006119
 8006170:	080062c1 	.word	0x080062c1
 8006174:	08006119 	.word	0x08006119
 8006178:	080061c7 	.word	0x080061c7
 800617c:	08006119 	.word	0x08006119
 8006180:	08006119 	.word	0x08006119
 8006184:	08006261 	.word	0x08006261
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6032      	str	r2, [r6, #0]
 8006190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006198:	2301      	movs	r3, #1
 800619a:	e09e      	b.n	80062da <_printf_i+0x1ea>
 800619c:	6833      	ldr	r3, [r6, #0]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	6031      	str	r1, [r6, #0]
 80061a4:	0606      	lsls	r6, r0, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xbc>
 80061a8:	681d      	ldr	r5, [r3, #0]
 80061aa:	e003      	b.n	80061b4 <_printf_i+0xc4>
 80061ac:	0645      	lsls	r5, r0, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xb8>
 80061b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	da03      	bge.n	80061c0 <_printf_i+0xd0>
 80061b8:	232d      	movs	r3, #45	@ 0x2d
 80061ba:	426d      	negs	r5, r5
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c0:	230a      	movs	r3, #10
 80061c2:	4859      	ldr	r0, [pc, #356]	@ (8006328 <_printf_i+0x238>)
 80061c4:	e011      	b.n	80061ea <_printf_i+0xfa>
 80061c6:	6821      	ldr	r1, [r4, #0]
 80061c8:	6833      	ldr	r3, [r6, #0]
 80061ca:	0608      	lsls	r0, r1, #24
 80061cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80061d0:	d402      	bmi.n	80061d8 <_printf_i+0xe8>
 80061d2:	0649      	lsls	r1, r1, #25
 80061d4:	bf48      	it	mi
 80061d6:	b2ad      	uxthmi	r5, r5
 80061d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	bf14      	ite	ne
 80061de:	230a      	movne	r3, #10
 80061e0:	2308      	moveq	r3, #8
 80061e2:	4851      	ldr	r0, [pc, #324]	@ (8006328 <_printf_i+0x238>)
 80061e4:	2100      	movs	r1, #0
 80061e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ea:	6866      	ldr	r6, [r4, #4]
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	bfa8      	it	ge
 80061f0:	6821      	ldrge	r1, [r4, #0]
 80061f2:	60a6      	str	r6, [r4, #8]
 80061f4:	bfa4      	itt	ge
 80061f6:	f021 0104 	bicge.w	r1, r1, #4
 80061fa:	6021      	strge	r1, [r4, #0]
 80061fc:	b90d      	cbnz	r5, 8006202 <_printf_i+0x112>
 80061fe:	2e00      	cmp	r6, #0
 8006200:	d04b      	beq.n	800629a <_printf_i+0x1aa>
 8006202:	4616      	mov	r6, r2
 8006204:	fbb5 f1f3 	udiv	r1, r5, r3
 8006208:	fb03 5711 	mls	r7, r3, r1, r5
 800620c:	5dc7      	ldrb	r7, [r0, r7]
 800620e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006212:	462f      	mov	r7, r5
 8006214:	42bb      	cmp	r3, r7
 8006216:	460d      	mov	r5, r1
 8006218:	d9f4      	bls.n	8006204 <_printf_i+0x114>
 800621a:	2b08      	cmp	r3, #8
 800621c:	d10b      	bne.n	8006236 <_printf_i+0x146>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	07df      	lsls	r7, r3, #31
 8006222:	d508      	bpl.n	8006236 <_printf_i+0x146>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	6861      	ldr	r1, [r4, #4]
 8006228:	4299      	cmp	r1, r3
 800622a:	bfde      	ittt	le
 800622c:	2330      	movle	r3, #48	@ 0x30
 800622e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006232:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006236:	1b92      	subs	r2, r2, r6
 8006238:	6122      	str	r2, [r4, #16]
 800623a:	464b      	mov	r3, r9
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f8cd a000 	str.w	sl, [sp]
 8006244:	aa03      	add	r2, sp, #12
 8006246:	f7ff fee1 	bl	800600c <_printf_common>
 800624a:	3001      	adds	r0, #1
 800624c:	d14a      	bne.n	80062e4 <_printf_i+0x1f4>
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	b004      	add	sp, #16
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	f043 0320 	orr.w	r3, r3, #32
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	2778      	movs	r7, #120	@ 0x78
 8006262:	4832      	ldr	r0, [pc, #200]	@ (800632c <_printf_i+0x23c>)
 8006264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	061f      	lsls	r7, r3, #24
 800626e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006272:	d402      	bmi.n	800627a <_printf_i+0x18a>
 8006274:	065f      	lsls	r7, r3, #25
 8006276:	bf48      	it	mi
 8006278:	b2ad      	uxthmi	r5, r5
 800627a:	6031      	str	r1, [r6, #0]
 800627c:	07d9      	lsls	r1, r3, #31
 800627e:	bf44      	itt	mi
 8006280:	f043 0320 	orrmi.w	r3, r3, #32
 8006284:	6023      	strmi	r3, [r4, #0]
 8006286:	b11d      	cbz	r5, 8006290 <_printf_i+0x1a0>
 8006288:	2310      	movs	r3, #16
 800628a:	e7ab      	b.n	80061e4 <_printf_i+0xf4>
 800628c:	4826      	ldr	r0, [pc, #152]	@ (8006328 <_printf_i+0x238>)
 800628e:	e7e9      	b.n	8006264 <_printf_i+0x174>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	f023 0320 	bic.w	r3, r3, #32
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	e7f6      	b.n	8006288 <_printf_i+0x198>
 800629a:	4616      	mov	r6, r2
 800629c:	e7bd      	b.n	800621a <_printf_i+0x12a>
 800629e:	6833      	ldr	r3, [r6, #0]
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1d18      	adds	r0, r3, #4
 80062a4:	6961      	ldr	r1, [r4, #20]
 80062a6:	6030      	str	r0, [r6, #0]
 80062a8:	062e      	lsls	r6, r5, #24
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	d501      	bpl.n	80062b2 <_printf_i+0x1c2>
 80062ae:	6019      	str	r1, [r3, #0]
 80062b0:	e002      	b.n	80062b8 <_printf_i+0x1c8>
 80062b2:	0668      	lsls	r0, r5, #25
 80062b4:	d5fb      	bpl.n	80062ae <_printf_i+0x1be>
 80062b6:	8019      	strh	r1, [r3, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	4616      	mov	r6, r2
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	e7bc      	b.n	800623a <_printf_i+0x14a>
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	2100      	movs	r1, #0
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	6032      	str	r2, [r6, #0]
 80062c8:	681e      	ldr	r6, [r3, #0]
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	4630      	mov	r0, r6
 80062ce:	f000 f9fc 	bl	80066ca <memchr>
 80062d2:	b108      	cbz	r0, 80062d8 <_printf_i+0x1e8>
 80062d4:	1b80      	subs	r0, r0, r6
 80062d6:	6060      	str	r0, [r4, #4]
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	2300      	movs	r3, #0
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e2:	e7aa      	b.n	800623a <_printf_i+0x14a>
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	47d0      	blx	sl
 80062ee:	3001      	adds	r0, #1
 80062f0:	d0ad      	beq.n	800624e <_printf_i+0x15e>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	079b      	lsls	r3, r3, #30
 80062f6:	d413      	bmi.n	8006320 <_printf_i+0x230>
 80062f8:	68e0      	ldr	r0, [r4, #12]
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	4298      	cmp	r0, r3
 80062fe:	bfb8      	it	lt
 8006300:	4618      	movlt	r0, r3
 8006302:	e7a6      	b.n	8006252 <_printf_i+0x162>
 8006304:	2301      	movs	r3, #1
 8006306:	4632      	mov	r2, r6
 8006308:	4649      	mov	r1, r9
 800630a:	4640      	mov	r0, r8
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d09d      	beq.n	800624e <_printf_i+0x15e>
 8006312:	3501      	adds	r5, #1
 8006314:	68e3      	ldr	r3, [r4, #12]
 8006316:	9903      	ldr	r1, [sp, #12]
 8006318:	1a5b      	subs	r3, r3, r1
 800631a:	42ab      	cmp	r3, r5
 800631c:	dcf2      	bgt.n	8006304 <_printf_i+0x214>
 800631e:	e7eb      	b.n	80062f8 <_printf_i+0x208>
 8006320:	2500      	movs	r5, #0
 8006322:	f104 0619 	add.w	r6, r4, #25
 8006326:	e7f5      	b.n	8006314 <_printf_i+0x224>
 8006328:	0800949b 	.word	0x0800949b
 800632c:	080094ac 	.word	0x080094ac

08006330 <std>:
 8006330:	2300      	movs	r3, #0
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	e9c0 3300 	strd	r3, r3, [r0]
 800633a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800633e:	6083      	str	r3, [r0, #8]
 8006340:	8181      	strh	r1, [r0, #12]
 8006342:	6643      	str	r3, [r0, #100]	@ 0x64
 8006344:	81c2      	strh	r2, [r0, #14]
 8006346:	6183      	str	r3, [r0, #24]
 8006348:	4619      	mov	r1, r3
 800634a:	2208      	movs	r2, #8
 800634c:	305c      	adds	r0, #92	@ 0x5c
 800634e:	f000 f914 	bl	800657a <memset>
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <std+0x58>)
 8006354:	6224      	str	r4, [r4, #32]
 8006356:	6263      	str	r3, [r4, #36]	@ 0x24
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <std+0x5c>)
 800635a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800635c:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <std+0x60>)
 800635e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <std+0x64>)
 8006362:	6323      	str	r3, [r4, #48]	@ 0x30
 8006364:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <std+0x68>)
 8006366:	429c      	cmp	r4, r3
 8006368:	d006      	beq.n	8006378 <std+0x48>
 800636a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800636e:	4294      	cmp	r4, r2
 8006370:	d002      	beq.n	8006378 <std+0x48>
 8006372:	33d0      	adds	r3, #208	@ 0xd0
 8006374:	429c      	cmp	r4, r3
 8006376:	d105      	bne.n	8006384 <std+0x54>
 8006378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800637c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006380:	f000 b9a0 	b.w	80066c4 <__retarget_lock_init_recursive>
 8006384:	bd10      	pop	{r4, pc}
 8006386:	bf00      	nop
 8006388:	080064f5 	.word	0x080064f5
 800638c:	08006517 	.word	0x08006517
 8006390:	0800654f 	.word	0x0800654f
 8006394:	08006573 	.word	0x08006573
 8006398:	200008d4 	.word	0x200008d4

0800639c <stdio_exit_handler>:
 800639c:	4a02      	ldr	r2, [pc, #8]	@ (80063a8 <stdio_exit_handler+0xc>)
 800639e:	4903      	ldr	r1, [pc, #12]	@ (80063ac <stdio_exit_handler+0x10>)
 80063a0:	4803      	ldr	r0, [pc, #12]	@ (80063b0 <stdio_exit_handler+0x14>)
 80063a2:	f000 b869 	b.w	8006478 <_fwalk_sglue>
 80063a6:	bf00      	nop
 80063a8:	2000002c 	.word	0x2000002c
 80063ac:	08008959 	.word	0x08008959
 80063b0:	200001a8 	.word	0x200001a8

080063b4 <cleanup_stdio>:
 80063b4:	6841      	ldr	r1, [r0, #4]
 80063b6:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <cleanup_stdio+0x34>)
 80063b8:	b510      	push	{r4, lr}
 80063ba:	4299      	cmp	r1, r3
 80063bc:	4604      	mov	r4, r0
 80063be:	d001      	beq.n	80063c4 <cleanup_stdio+0x10>
 80063c0:	f002 faca 	bl	8008958 <_fflush_r>
 80063c4:	68a1      	ldr	r1, [r4, #8]
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <cleanup_stdio+0x38>)
 80063c8:	4299      	cmp	r1, r3
 80063ca:	d002      	beq.n	80063d2 <cleanup_stdio+0x1e>
 80063cc:	4620      	mov	r0, r4
 80063ce:	f002 fac3 	bl	8008958 <_fflush_r>
 80063d2:	68e1      	ldr	r1, [r4, #12]
 80063d4:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <cleanup_stdio+0x3c>)
 80063d6:	4299      	cmp	r1, r3
 80063d8:	d004      	beq.n	80063e4 <cleanup_stdio+0x30>
 80063da:	4620      	mov	r0, r4
 80063dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e0:	f002 baba 	b.w	8008958 <_fflush_r>
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	bf00      	nop
 80063e8:	200008d4 	.word	0x200008d4
 80063ec:	2000093c 	.word	0x2000093c
 80063f0:	200009a4 	.word	0x200009a4

080063f4 <global_stdio_init.part.0>:
 80063f4:	b510      	push	{r4, lr}
 80063f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <global_stdio_init.part.0+0x30>)
 80063f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006428 <global_stdio_init.part.0+0x34>)
 80063fa:	4a0c      	ldr	r2, [pc, #48]	@ (800642c <global_stdio_init.part.0+0x38>)
 80063fc:	4620      	mov	r0, r4
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	2104      	movs	r1, #4
 8006402:	2200      	movs	r2, #0
 8006404:	f7ff ff94 	bl	8006330 <std>
 8006408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800640c:	2201      	movs	r2, #1
 800640e:	2109      	movs	r1, #9
 8006410:	f7ff ff8e 	bl	8006330 <std>
 8006414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006418:	2202      	movs	r2, #2
 800641a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641e:	2112      	movs	r1, #18
 8006420:	f7ff bf86 	b.w	8006330 <std>
 8006424:	20000a0c 	.word	0x20000a0c
 8006428:	200008d4 	.word	0x200008d4
 800642c:	0800639d 	.word	0x0800639d

08006430 <__sfp_lock_acquire>:
 8006430:	4801      	ldr	r0, [pc, #4]	@ (8006438 <__sfp_lock_acquire+0x8>)
 8006432:	f000 b948 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 8006436:	bf00      	nop
 8006438:	20000a15 	.word	0x20000a15

0800643c <__sfp_lock_release>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__sfp_lock_release+0x8>)
 800643e:	f000 b943 	b.w	80066c8 <__retarget_lock_release_recursive>
 8006442:	bf00      	nop
 8006444:	20000a15 	.word	0x20000a15

08006448 <__sinit>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	f7ff fff0 	bl	8006430 <__sfp_lock_acquire>
 8006450:	6a23      	ldr	r3, [r4, #32]
 8006452:	b11b      	cbz	r3, 800645c <__sinit+0x14>
 8006454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006458:	f7ff bff0 	b.w	800643c <__sfp_lock_release>
 800645c:	4b04      	ldr	r3, [pc, #16]	@ (8006470 <__sinit+0x28>)
 800645e:	6223      	str	r3, [r4, #32]
 8006460:	4b04      	ldr	r3, [pc, #16]	@ (8006474 <__sinit+0x2c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f5      	bne.n	8006454 <__sinit+0xc>
 8006468:	f7ff ffc4 	bl	80063f4 <global_stdio_init.part.0>
 800646c:	e7f2      	b.n	8006454 <__sinit+0xc>
 800646e:	bf00      	nop
 8006470:	080063b5 	.word	0x080063b5
 8006474:	20000a0c 	.word	0x20000a0c

08006478 <_fwalk_sglue>:
 8006478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800647c:	4607      	mov	r7, r0
 800647e:	4688      	mov	r8, r1
 8006480:	4614      	mov	r4, r2
 8006482:	2600      	movs	r6, #0
 8006484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006488:	f1b9 0901 	subs.w	r9, r9, #1
 800648c:	d505      	bpl.n	800649a <_fwalk_sglue+0x22>
 800648e:	6824      	ldr	r4, [r4, #0]
 8006490:	2c00      	cmp	r4, #0
 8006492:	d1f7      	bne.n	8006484 <_fwalk_sglue+0xc>
 8006494:	4630      	mov	r0, r6
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d907      	bls.n	80064b0 <_fwalk_sglue+0x38>
 80064a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064a4:	3301      	adds	r3, #1
 80064a6:	d003      	beq.n	80064b0 <_fwalk_sglue+0x38>
 80064a8:	4629      	mov	r1, r5
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	4306      	orrs	r6, r0
 80064b0:	3568      	adds	r5, #104	@ 0x68
 80064b2:	e7e9      	b.n	8006488 <_fwalk_sglue+0x10>

080064b4 <siprintf>:
 80064b4:	b40e      	push	{r1, r2, r3}
 80064b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064ba:	b500      	push	{lr}
 80064bc:	b09c      	sub	sp, #112	@ 0x70
 80064be:	ab1d      	add	r3, sp, #116	@ 0x74
 80064c0:	9002      	str	r0, [sp, #8]
 80064c2:	9006      	str	r0, [sp, #24]
 80064c4:	9107      	str	r1, [sp, #28]
 80064c6:	9104      	str	r1, [sp, #16]
 80064c8:	4808      	ldr	r0, [pc, #32]	@ (80064ec <siprintf+0x38>)
 80064ca:	4909      	ldr	r1, [pc, #36]	@ (80064f0 <siprintf+0x3c>)
 80064cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d0:	9105      	str	r1, [sp, #20]
 80064d2:	6800      	ldr	r0, [r0, #0]
 80064d4:	a902      	add	r1, sp, #8
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	f002 f8c2 	bl	8008660 <_svfiprintf_r>
 80064dc:	2200      	movs	r2, #0
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	b01c      	add	sp, #112	@ 0x70
 80064e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e8:	b003      	add	sp, #12
 80064ea:	4770      	bx	lr
 80064ec:	200001a4 	.word	0x200001a4
 80064f0:	ffff0208 	.word	0xffff0208

080064f4 <__sread>:
 80064f4:	b510      	push	{r4, lr}
 80064f6:	460c      	mov	r4, r1
 80064f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fc:	f000 f894 	bl	8006628 <_read_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	bfab      	itete	ge
 8006504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006506:	89a3      	ldrhlt	r3, [r4, #12]
 8006508:	181b      	addge	r3, r3, r0
 800650a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800650e:	bfac      	ite	ge
 8006510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006512:	81a3      	strhlt	r3, [r4, #12]
 8006514:	bd10      	pop	{r4, pc}

08006516 <__swrite>:
 8006516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651a:	461f      	mov	r7, r3
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	4605      	mov	r5, r0
 8006520:	05db      	lsls	r3, r3, #23
 8006522:	460c      	mov	r4, r1
 8006524:	4616      	mov	r6, r2
 8006526:	d505      	bpl.n	8006534 <__swrite+0x1e>
 8006528:	2302      	movs	r3, #2
 800652a:	2200      	movs	r2, #0
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	f000 f868 	bl	8006604 <_lseek_r>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	4632      	mov	r2, r6
 8006538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	4628      	mov	r0, r5
 8006540:	463b      	mov	r3, r7
 8006542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800654a:	f000 b87f 	b.w	800664c <_write_r>

0800654e <__sseek>:
 800654e:	b510      	push	{r4, lr}
 8006550:	460c      	mov	r4, r1
 8006552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006556:	f000 f855 	bl	8006604 <_lseek_r>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	bf15      	itete	ne
 8006560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800656a:	81a3      	strheq	r3, [r4, #12]
 800656c:	bf18      	it	ne
 800656e:	81a3      	strhne	r3, [r4, #12]
 8006570:	bd10      	pop	{r4, pc}

08006572 <__sclose>:
 8006572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006576:	f000 b835 	b.w	80065e4 <_close_r>

0800657a <memset>:
 800657a:	4603      	mov	r3, r0
 800657c:	4402      	add	r2, r0
 800657e:	4293      	cmp	r3, r2
 8006580:	d100      	bne.n	8006584 <memset+0xa>
 8006582:	4770      	bx	lr
 8006584:	f803 1b01 	strb.w	r1, [r3], #1
 8006588:	e7f9      	b.n	800657e <memset+0x4>

0800658a <strncmp>:
 800658a:	b510      	push	{r4, lr}
 800658c:	b16a      	cbz	r2, 80065aa <strncmp+0x20>
 800658e:	3901      	subs	r1, #1
 8006590:	1884      	adds	r4, r0, r2
 8006592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006596:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800659a:	429a      	cmp	r2, r3
 800659c:	d103      	bne.n	80065a6 <strncmp+0x1c>
 800659e:	42a0      	cmp	r0, r4
 80065a0:	d001      	beq.n	80065a6 <strncmp+0x1c>
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	d1f5      	bne.n	8006592 <strncmp+0x8>
 80065a6:	1ad0      	subs	r0, r2, r3
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	4610      	mov	r0, r2
 80065ac:	e7fc      	b.n	80065a8 <strncmp+0x1e>

080065ae <strstr>:
 80065ae:	780a      	ldrb	r2, [r1, #0]
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	b96a      	cbnz	r2, 80065d0 <strstr+0x22>
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d109      	bne.n	80065ce <strstr+0x20>
 80065ba:	460c      	mov	r4, r1
 80065bc:	4605      	mov	r5, r0
 80065be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f6      	beq.n	80065b4 <strstr+0x6>
 80065c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80065ca:	429e      	cmp	r6, r3
 80065cc:	d0f7      	beq.n	80065be <strstr+0x10>
 80065ce:	3001      	adds	r0, #1
 80065d0:	7803      	ldrb	r3, [r0, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ef      	bne.n	80065b6 <strstr+0x8>
 80065d6:	4618      	mov	r0, r3
 80065d8:	e7ec      	b.n	80065b4 <strstr+0x6>
	...

080065dc <_localeconv_r>:
 80065dc:	4800      	ldr	r0, [pc, #0]	@ (80065e0 <_localeconv_r+0x4>)
 80065de:	4770      	bx	lr
 80065e0:	20000128 	.word	0x20000128

080065e4 <_close_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	2300      	movs	r3, #0
 80065e8:	4d05      	ldr	r5, [pc, #20]	@ (8006600 <_close_r+0x1c>)
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fb f9c7 	bl	8001982 <_close>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_close_r+0x1a>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_close_r+0x1a>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20000a10 	.word	0x20000a10

08006604 <_lseek_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	2200      	movs	r2, #0
 800660e:	4d05      	ldr	r5, [pc, #20]	@ (8006624 <_lseek_r+0x20>)
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fb f9d9 	bl	80019ca <_lseek>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_lseek_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_lseek_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000a10 	.word	0x20000a10

08006628 <_read_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	4611      	mov	r1, r2
 8006630:	2200      	movs	r2, #0
 8006632:	4d05      	ldr	r5, [pc, #20]	@ (8006648 <_read_r+0x20>)
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fb f96a 	bl	8001910 <_read>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_read_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_read_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000a10 	.word	0x20000a10

0800664c <_write_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	2200      	movs	r2, #0
 8006656:	4d05      	ldr	r5, [pc, #20]	@ (800666c <_write_r+0x20>)
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fb f975 	bl	800194a <_write>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_write_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_write_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	20000a10 	.word	0x20000a10

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	@ (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200001a4 	.word	0x200001a4

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	2600      	movs	r6, #0
 8006680:	4d0c      	ldr	r5, [pc, #48]	@ (80066b4 <__libc_init_array+0x38>)
 8006682:	4c0d      	ldr	r4, [pc, #52]	@ (80066b8 <__libc_init_array+0x3c>)
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	f002 fcd2 	bl	8009034 <_init>
 8006690:	2600      	movs	r6, #0
 8006692:	4d0a      	ldr	r5, [pc, #40]	@ (80066bc <__libc_init_array+0x40>)
 8006694:	4c0a      	ldr	r4, [pc, #40]	@ (80066c0 <__libc_init_array+0x44>)
 8006696:	1b64      	subs	r4, r4, r5
 8006698:	10a4      	asrs	r4, r4, #2
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08009760 	.word	0x08009760
 80066b8:	08009760 	.word	0x08009760
 80066bc:	08009760 	.word	0x08009760
 80066c0:	08009764 	.word	0x08009764

080066c4 <__retarget_lock_init_recursive>:
 80066c4:	4770      	bx	lr

080066c6 <__retarget_lock_acquire_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <__retarget_lock_release_recursive>:
 80066c8:	4770      	bx	lr

080066ca <memchr>:
 80066ca:	4603      	mov	r3, r0
 80066cc:	b510      	push	{r4, lr}
 80066ce:	b2c9      	uxtb	r1, r1
 80066d0:	4402      	add	r2, r0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	d101      	bne.n	80066dc <memchr+0x12>
 80066d8:	2000      	movs	r0, #0
 80066da:	e003      	b.n	80066e4 <memchr+0x1a>
 80066dc:	7804      	ldrb	r4, [r0, #0]
 80066de:	3301      	adds	r3, #1
 80066e0:	428c      	cmp	r4, r1
 80066e2:	d1f6      	bne.n	80066d2 <memchr+0x8>
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <memcpy>:
 80066e6:	440a      	add	r2, r1
 80066e8:	4291      	cmp	r1, r2
 80066ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ee:	d100      	bne.n	80066f2 <memcpy+0xc>
 80066f0:	4770      	bx	lr
 80066f2:	b510      	push	{r4, lr}
 80066f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f8:	4291      	cmp	r1, r2
 80066fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fe:	d1f9      	bne.n	80066f4 <memcpy+0xe>
 8006700:	bd10      	pop	{r4, pc}
	...

08006704 <nan>:
 8006704:	2000      	movs	r0, #0
 8006706:	4901      	ldr	r1, [pc, #4]	@ (800670c <nan+0x8>)
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	7ff80000 	.word	0x7ff80000

08006710 <quorem>:
 8006710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	6903      	ldr	r3, [r0, #16]
 8006716:	690c      	ldr	r4, [r1, #16]
 8006718:	4607      	mov	r7, r0
 800671a:	42a3      	cmp	r3, r4
 800671c:	db7e      	blt.n	800681c <quorem+0x10c>
 800671e:	3c01      	subs	r4, #1
 8006720:	00a3      	lsls	r3, r4, #2
 8006722:	f100 0514 	add.w	r5, r0, #20
 8006726:	f101 0814 	add.w	r8, r1, #20
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673a:	3301      	adds	r3, #1
 800673c:	429a      	cmp	r2, r3
 800673e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006742:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006746:	d32e      	bcc.n	80067a6 <quorem+0x96>
 8006748:	f04f 0a00 	mov.w	sl, #0
 800674c:	46c4      	mov	ip, r8
 800674e:	46ae      	mov	lr, r5
 8006750:	46d3      	mov	fp, sl
 8006752:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006756:	b298      	uxth	r0, r3
 8006758:	fb06 a000 	mla	r0, r6, r0, sl
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	0c02      	lsrs	r2, r0, #16
 8006760:	fb06 2303 	mla	r3, r6, r3, r2
 8006764:	f8de 2000 	ldr.w	r2, [lr]
 8006768:	b280      	uxth	r0, r0
 800676a:	b292      	uxth	r2, r2
 800676c:	1a12      	subs	r2, r2, r0
 800676e:	445a      	add	r2, fp
 8006770:	f8de 0000 	ldr.w	r0, [lr]
 8006774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006778:	b29b      	uxth	r3, r3
 800677a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800677e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006782:	b292      	uxth	r2, r2
 8006784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006788:	45e1      	cmp	r9, ip
 800678a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800678e:	f84e 2b04 	str.w	r2, [lr], #4
 8006792:	d2de      	bcs.n	8006752 <quorem+0x42>
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	58eb      	ldr	r3, [r5, r3]
 8006798:	b92b      	cbnz	r3, 80067a6 <quorem+0x96>
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	3b04      	subs	r3, #4
 800679e:	429d      	cmp	r5, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	d32f      	bcc.n	8006804 <quorem+0xf4>
 80067a4:	613c      	str	r4, [r7, #16]
 80067a6:	4638      	mov	r0, r7
 80067a8:	f001 fd0e 	bl	80081c8 <__mcmp>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	db25      	blt.n	80067fc <quorem+0xec>
 80067b0:	4629      	mov	r1, r5
 80067b2:	2000      	movs	r0, #0
 80067b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80067b8:	f8d1 c000 	ldr.w	ip, [r1]
 80067bc:	fa1f fe82 	uxth.w	lr, r2
 80067c0:	fa1f f38c 	uxth.w	r3, ip
 80067c4:	eba3 030e 	sub.w	r3, r3, lr
 80067c8:	4403      	add	r3, r0
 80067ca:	0c12      	lsrs	r2, r2, #16
 80067cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067da:	45c1      	cmp	r9, r8
 80067dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067e0:	f841 3b04 	str.w	r3, [r1], #4
 80067e4:	d2e6      	bcs.n	80067b4 <quorem+0xa4>
 80067e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ee:	b922      	cbnz	r2, 80067fa <quorem+0xea>
 80067f0:	3b04      	subs	r3, #4
 80067f2:	429d      	cmp	r5, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	d30b      	bcc.n	8006810 <quorem+0x100>
 80067f8:	613c      	str	r4, [r7, #16]
 80067fa:	3601      	adds	r6, #1
 80067fc:	4630      	mov	r0, r6
 80067fe:	b003      	add	sp, #12
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	3b04      	subs	r3, #4
 8006808:	2a00      	cmp	r2, #0
 800680a:	d1cb      	bne.n	80067a4 <quorem+0x94>
 800680c:	3c01      	subs	r4, #1
 800680e:	e7c6      	b.n	800679e <quorem+0x8e>
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	3b04      	subs	r3, #4
 8006814:	2a00      	cmp	r2, #0
 8006816:	d1ef      	bne.n	80067f8 <quorem+0xe8>
 8006818:	3c01      	subs	r4, #1
 800681a:	e7ea      	b.n	80067f2 <quorem+0xe2>
 800681c:	2000      	movs	r0, #0
 800681e:	e7ee      	b.n	80067fe <quorem+0xee>

08006820 <_dtoa_r>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	69c7      	ldr	r7, [r0, #28]
 800682a:	b097      	sub	sp, #92	@ 0x5c
 800682c:	4683      	mov	fp, r0
 800682e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006832:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006834:	b97f      	cbnz	r7, 8006856 <_dtoa_r+0x36>
 8006836:	2010      	movs	r0, #16
 8006838:	f001 f93c 	bl	8007ab4 <malloc>
 800683c:	4602      	mov	r2, r0
 800683e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006842:	b920      	cbnz	r0, 800684e <_dtoa_r+0x2e>
 8006844:	21ef      	movs	r1, #239	@ 0xef
 8006846:	4ba8      	ldr	r3, [pc, #672]	@ (8006ae8 <_dtoa_r+0x2c8>)
 8006848:	48a8      	ldr	r0, [pc, #672]	@ (8006aec <_dtoa_r+0x2cc>)
 800684a:	f002 f8d7 	bl	80089fc <__assert_func>
 800684e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006852:	6007      	str	r7, [r0, #0]
 8006854:	60c7      	str	r7, [r0, #12]
 8006856:	f8db 301c 	ldr.w	r3, [fp, #28]
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	b159      	cbz	r1, 8006876 <_dtoa_r+0x56>
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	2301      	movs	r3, #1
 8006862:	4093      	lsls	r3, r2
 8006864:	604a      	str	r2, [r1, #4]
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	4658      	mov	r0, fp
 800686a:	f001 fa2b 	bl	8007cc4 <_Bfree>
 800686e:	2200      	movs	r2, #0
 8006870:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	1e2b      	subs	r3, r5, #0
 8006878:	bfaf      	iteee	ge
 800687a:	2300      	movge	r3, #0
 800687c:	2201      	movlt	r2, #1
 800687e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006882:	9303      	strlt	r3, [sp, #12]
 8006884:	bfa8      	it	ge
 8006886:	6033      	strge	r3, [r6, #0]
 8006888:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800688c:	4b98      	ldr	r3, [pc, #608]	@ (8006af0 <_dtoa_r+0x2d0>)
 800688e:	bfb8      	it	lt
 8006890:	6032      	strlt	r2, [r6, #0]
 8006892:	ea33 0308 	bics.w	r3, r3, r8
 8006896:	d112      	bne.n	80068be <_dtoa_r+0x9e>
 8006898:	f242 730f 	movw	r3, #9999	@ 0x270f
 800689c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80068a4:	4323      	orrs	r3, r4
 80068a6:	f000 8550 	beq.w	800734a <_dtoa_r+0xb2a>
 80068aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006af4 <_dtoa_r+0x2d4>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8552 	beq.w	800735a <_dtoa_r+0xb3a>
 80068b6:	f10a 0303 	add.w	r3, sl, #3
 80068ba:	f000 bd4c 	b.w	8007356 <_dtoa_r+0xb36>
 80068be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80068c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ca:	2200      	movs	r2, #0
 80068cc:	2300      	movs	r3, #0
 80068ce:	f7fa f86b 	bl	80009a8 <__aeabi_dcmpeq>
 80068d2:	4607      	mov	r7, r0
 80068d4:	b158      	cbz	r0, 80068ee <_dtoa_r+0xce>
 80068d6:	2301      	movs	r3, #1
 80068d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068de:	b113      	cbz	r3, 80068e6 <_dtoa_r+0xc6>
 80068e0:	4b85      	ldr	r3, [pc, #532]	@ (8006af8 <_dtoa_r+0x2d8>)
 80068e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006afc <_dtoa_r+0x2dc>
 80068ea:	f000 bd36 	b.w	800735a <_dtoa_r+0xb3a>
 80068ee:	ab14      	add	r3, sp, #80	@ 0x50
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	ab15      	add	r3, sp, #84	@ 0x54
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	4658      	mov	r0, fp
 80068f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80068fc:	f001 fd7c 	bl	80083f8 <__d2b>
 8006900:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006904:	4681      	mov	r9, r0
 8006906:	2e00      	cmp	r6, #0
 8006908:	d077      	beq.n	80069fa <_dtoa_r+0x1da>
 800690a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800690e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006910:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006918:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800691c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006920:	9712      	str	r7, [sp, #72]	@ 0x48
 8006922:	4619      	mov	r1, r3
 8006924:	2200      	movs	r2, #0
 8006926:	4b76      	ldr	r3, [pc, #472]	@ (8006b00 <_dtoa_r+0x2e0>)
 8006928:	f7f9 fc1e 	bl	8000168 <__aeabi_dsub>
 800692c:	a368      	add	r3, pc, #416	@ (adr r3, 8006ad0 <_dtoa_r+0x2b0>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f7f9 fdd1 	bl	80004d8 <__aeabi_dmul>
 8006936:	a368      	add	r3, pc, #416	@ (adr r3, 8006ad8 <_dtoa_r+0x2b8>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fc16 	bl	800016c <__adddf3>
 8006940:	4604      	mov	r4, r0
 8006942:	4630      	mov	r0, r6
 8006944:	460d      	mov	r5, r1
 8006946:	f7f9 fd5d 	bl	8000404 <__aeabi_i2d>
 800694a:	a365      	add	r3, pc, #404	@ (adr r3, 8006ae0 <_dtoa_r+0x2c0>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f7f9 fdc2 	bl	80004d8 <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4620      	mov	r0, r4
 800695a:	4629      	mov	r1, r5
 800695c:	f7f9 fc06 	bl	800016c <__adddf3>
 8006960:	4604      	mov	r4, r0
 8006962:	460d      	mov	r5, r1
 8006964:	f7fa f868 	bl	8000a38 <__aeabi_d2iz>
 8006968:	2200      	movs	r2, #0
 800696a:	4607      	mov	r7, r0
 800696c:	2300      	movs	r3, #0
 800696e:	4620      	mov	r0, r4
 8006970:	4629      	mov	r1, r5
 8006972:	f7fa f823 	bl	80009bc <__aeabi_dcmplt>
 8006976:	b140      	cbz	r0, 800698a <_dtoa_r+0x16a>
 8006978:	4638      	mov	r0, r7
 800697a:	f7f9 fd43 	bl	8000404 <__aeabi_i2d>
 800697e:	4622      	mov	r2, r4
 8006980:	462b      	mov	r3, r5
 8006982:	f7fa f811 	bl	80009a8 <__aeabi_dcmpeq>
 8006986:	b900      	cbnz	r0, 800698a <_dtoa_r+0x16a>
 8006988:	3f01      	subs	r7, #1
 800698a:	2f16      	cmp	r7, #22
 800698c:	d853      	bhi.n	8006a36 <_dtoa_r+0x216>
 800698e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006992:	4b5c      	ldr	r3, [pc, #368]	@ (8006b04 <_dtoa_r+0x2e4>)
 8006994:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7fa f80e 	bl	80009bc <__aeabi_dcmplt>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d04a      	beq.n	8006a3a <_dtoa_r+0x21a>
 80069a4:	2300      	movs	r3, #0
 80069a6:	3f01      	subs	r7, #1
 80069a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069ac:	1b9b      	subs	r3, r3, r6
 80069ae:	1e5a      	subs	r2, r3, #1
 80069b0:	bf46      	itte	mi
 80069b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80069b6:	2300      	movmi	r3, #0
 80069b8:	f04f 0800 	movpl.w	r8, #0
 80069bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80069be:	bf48      	it	mi
 80069c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	db3b      	blt.n	8006a3e <_dtoa_r+0x21e>
 80069c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80069ca:	443b      	add	r3, r7
 80069cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ce:	2300      	movs	r3, #0
 80069d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069d4:	2b09      	cmp	r3, #9
 80069d6:	d866      	bhi.n	8006aa6 <_dtoa_r+0x286>
 80069d8:	2b05      	cmp	r3, #5
 80069da:	bfc4      	itt	gt
 80069dc:	3b04      	subgt	r3, #4
 80069de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80069e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069e2:	bfc8      	it	gt
 80069e4:	2400      	movgt	r4, #0
 80069e6:	f1a3 0302 	sub.w	r3, r3, #2
 80069ea:	bfd8      	it	le
 80069ec:	2401      	movle	r4, #1
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d864      	bhi.n	8006abc <_dtoa_r+0x29c>
 80069f2:	e8df f003 	tbb	[pc, r3]
 80069f6:	382b      	.short	0x382b
 80069f8:	5636      	.short	0x5636
 80069fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069fe:	441e      	add	r6, r3
 8006a00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	bfc1      	itttt	gt
 8006a08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a18:	bfd6      	itet	le
 8006a1a:	f1c3 0320 	rsble	r3, r3, #32
 8006a1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a22:	fa04 f003 	lslle.w	r0, r4, r3
 8006a26:	f7f9 fcdd 	bl	80003e4 <__aeabi_ui2d>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a30:	3e01      	subs	r6, #1
 8006a32:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a34:	e775      	b.n	8006922 <_dtoa_r+0x102>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e7b6      	b.n	80069a8 <_dtoa_r+0x188>
 8006a3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006a3c:	e7b5      	b.n	80069aa <_dtoa_r+0x18a>
 8006a3e:	427b      	negs	r3, r7
 8006a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a42:	2300      	movs	r3, #0
 8006a44:	eba8 0807 	sub.w	r8, r8, r7
 8006a48:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a4a:	e7c2      	b.n	80069d2 <_dtoa_r+0x1b2>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc35      	bgt.n	8006ac2 <_dtoa_r+0x2a2>
 8006a56:	2301      	movs	r3, #1
 8006a58:	461a      	mov	r2, r3
 8006a5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a60:	e00b      	b.n	8006a7a <_dtoa_r+0x25a>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7f3      	b.n	8006a4e <_dtoa_r+0x22e>
 8006a66:	2300      	movs	r3, #0
 8006a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	9308      	str	r3, [sp, #32]
 8006a70:	3301      	adds	r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	bfb8      	it	lt
 8006a78:	2301      	movlt	r3, #1
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a82:	f102 0514 	add.w	r5, r2, #20
 8006a86:	429d      	cmp	r5, r3
 8006a88:	d91f      	bls.n	8006aca <_dtoa_r+0x2aa>
 8006a8a:	6041      	str	r1, [r0, #4]
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f001 f8d9 	bl	8007c44 <_Balloc>
 8006a92:	4682      	mov	sl, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d139      	bne.n	8006b0c <_dtoa_r+0x2ec>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b08 <_dtoa_r+0x2e8>)
 8006aa0:	e6d2      	b.n	8006848 <_dtoa_r+0x28>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7e0      	b.n	8006a68 <_dtoa_r+0x248>
 8006aa6:	2401      	movs	r4, #1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006aac:	9320      	str	r3, [sp, #128]	@ 0x80
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ab8:	2312      	movs	r3, #18
 8006aba:	e7d0      	b.n	8006a5e <_dtoa_r+0x23e>
 8006abc:	2301      	movs	r3, #1
 8006abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ac0:	e7f5      	b.n	8006aae <_dtoa_r+0x28e>
 8006ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ac4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ac8:	e7d7      	b.n	8006a7a <_dtoa_r+0x25a>
 8006aca:	3101      	adds	r1, #1
 8006acc:	0052      	lsls	r2, r2, #1
 8006ace:	e7d8      	b.n	8006a82 <_dtoa_r+0x262>
 8006ad0:	636f4361 	.word	0x636f4361
 8006ad4:	3fd287a7 	.word	0x3fd287a7
 8006ad8:	8b60c8b3 	.word	0x8b60c8b3
 8006adc:	3fc68a28 	.word	0x3fc68a28
 8006ae0:	509f79fb 	.word	0x509f79fb
 8006ae4:	3fd34413 	.word	0x3fd34413
 8006ae8:	080094d2 	.word	0x080094d2
 8006aec:	080094e9 	.word	0x080094e9
 8006af0:	7ff00000 	.word	0x7ff00000
 8006af4:	080094ce 	.word	0x080094ce
 8006af8:	0800949a 	.word	0x0800949a
 8006afc:	08009499 	.word	0x08009499
 8006b00:	3ff80000 	.word	0x3ff80000
 8006b04:	08009640 	.word	0x08009640
 8006b08:	08009541 	.word	0x08009541
 8006b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b10:	6018      	str	r0, [r3, #0]
 8006b12:	9b07      	ldr	r3, [sp, #28]
 8006b14:	2b0e      	cmp	r3, #14
 8006b16:	f200 80a4 	bhi.w	8006c62 <_dtoa_r+0x442>
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	f000 80a1 	beq.w	8006c62 <_dtoa_r+0x442>
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	dd33      	ble.n	8006b8c <_dtoa_r+0x36c>
 8006b24:	4b86      	ldr	r3, [pc, #536]	@ (8006d40 <_dtoa_r+0x520>)
 8006b26:	f007 020f 	and.w	r2, r7, #15
 8006b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2e:	05f8      	lsls	r0, r7, #23
 8006b30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b3c:	d516      	bpl.n	8006b6c <_dtoa_r+0x34c>
 8006b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b42:	4b80      	ldr	r3, [pc, #512]	@ (8006d44 <_dtoa_r+0x524>)
 8006b44:	2603      	movs	r6, #3
 8006b46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b4a:	f7f9 fdef 	bl	800072c <__aeabi_ddiv>
 8006b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b52:	f004 040f 	and.w	r4, r4, #15
 8006b56:	4d7b      	ldr	r5, [pc, #492]	@ (8006d44 <_dtoa_r+0x524>)
 8006b58:	b954      	cbnz	r4, 8006b70 <_dtoa_r+0x350>
 8006b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b62:	f7f9 fde3 	bl	800072c <__aeabi_ddiv>
 8006b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6a:	e028      	b.n	8006bbe <_dtoa_r+0x39e>
 8006b6c:	2602      	movs	r6, #2
 8006b6e:	e7f2      	b.n	8006b56 <_dtoa_r+0x336>
 8006b70:	07e1      	lsls	r1, r4, #31
 8006b72:	d508      	bpl.n	8006b86 <_dtoa_r+0x366>
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b7c:	f7f9 fcac 	bl	80004d8 <__aeabi_dmul>
 8006b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b84:	3601      	adds	r6, #1
 8006b86:	1064      	asrs	r4, r4, #1
 8006b88:	3508      	adds	r5, #8
 8006b8a:	e7e5      	b.n	8006b58 <_dtoa_r+0x338>
 8006b8c:	f000 80d2 	beq.w	8006d34 <_dtoa_r+0x514>
 8006b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b94:	427c      	negs	r4, r7
 8006b96:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <_dtoa_r+0x520>)
 8006b98:	f004 020f 	and.w	r2, r4, #15
 8006b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f7f9 fc98 	bl	80004d8 <__aeabi_dmul>
 8006ba8:	2602      	movs	r6, #2
 8006baa:	2300      	movs	r3, #0
 8006bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb0:	4d64      	ldr	r5, [pc, #400]	@ (8006d44 <_dtoa_r+0x524>)
 8006bb2:	1124      	asrs	r4, r4, #4
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	f040 80b2 	bne.w	8006d1e <_dtoa_r+0x4fe>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1d3      	bne.n	8006b66 <_dtoa_r+0x346>
 8006bbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80b7 	beq.w	8006d38 <_dtoa_r+0x518>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d48 <_dtoa_r+0x528>)
 8006bd2:	f7f9 fef3 	bl	80009bc <__aeabi_dcmplt>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f000 80ae 	beq.w	8006d38 <_dtoa_r+0x518>
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80aa 	beq.w	8006d38 <_dtoa_r+0x518>
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd37      	ble.n	8006c5a <_dtoa_r+0x43a>
 8006bea:	1e7b      	subs	r3, r7, #1
 8006bec:	4620      	mov	r0, r4
 8006bee:	9304      	str	r3, [sp, #16]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4b55      	ldr	r3, [pc, #340]	@ (8006d4c <_dtoa_r+0x52c>)
 8006bf6:	f7f9 fc6f 	bl	80004d8 <__aeabi_dmul>
 8006bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bfe:	9c08      	ldr	r4, [sp, #32]
 8006c00:	3601      	adds	r6, #1
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fbfe 	bl	8000404 <__aeabi_i2d>
 8006c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c0c:	f7f9 fc64 	bl	80004d8 <__aeabi_dmul>
 8006c10:	2200      	movs	r2, #0
 8006c12:	4b4f      	ldr	r3, [pc, #316]	@ (8006d50 <_dtoa_r+0x530>)
 8006c14:	f7f9 faaa 	bl	800016c <__adddf3>
 8006c18:	4605      	mov	r5, r0
 8006c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c1e:	2c00      	cmp	r4, #0
 8006c20:	f040 809a 	bne.w	8006d58 <_dtoa_r+0x538>
 8006c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d54 <_dtoa_r+0x534>)
 8006c2c:	f7f9 fa9c 	bl	8000168 <__aeabi_dsub>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	f7f9 fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f040 828e 	bne.w	8007162 <_dtoa_r+0x942>
 8006c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c50:	f7f9 feb4 	bl	80009bc <__aeabi_dcmplt>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f040 8127 	bne.w	8006ea8 <_dtoa_r+0x688>
 8006c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f2c0 8163 	blt.w	8006f30 <_dtoa_r+0x710>
 8006c6a:	2f0e      	cmp	r7, #14
 8006c6c:	f300 8160 	bgt.w	8006f30 <_dtoa_r+0x710>
 8006c70:	4b33      	ldr	r3, [pc, #204]	@ (8006d40 <_dtoa_r+0x520>)
 8006c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da03      	bge.n	8006c8c <_dtoa_r+0x46c>
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f340 8100 	ble.w	8006e8c <_dtoa_r+0x66c>
 8006c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c90:	4656      	mov	r6, sl
 8006c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fd47 	bl	800072c <__aeabi_ddiv>
 8006c9e:	f7f9 fecb 	bl	8000a38 <__aeabi_d2iz>
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	f7f9 fbae 	bl	8000404 <__aeabi_i2d>
 8006ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cac:	f7f9 fc14 	bl	80004d8 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f7f9 fa56 	bl	8000168 <__aeabi_dsub>
 8006cbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006cc0:	9d07      	ldr	r5, [sp, #28]
 8006cc2:	f806 4b01 	strb.w	r4, [r6], #1
 8006cc6:	eba6 040a 	sub.w	r4, r6, sl
 8006cca:	42a5      	cmp	r5, r4
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	f040 8116 	bne.w	8006f00 <_dtoa_r+0x6e0>
 8006cd4:	f7f9 fa4a 	bl	800016c <__adddf3>
 8006cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	f7f9 fe8a 	bl	80009f8 <__aeabi_dcmpgt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 80f8 	bne.w	8006eda <_dtoa_r+0x6ba>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf6:	b118      	cbz	r0, 8006d00 <_dtoa_r+0x4e0>
 8006cf8:	f018 0f01 	tst.w	r8, #1
 8006cfc:	f040 80ed 	bne.w	8006eda <_dtoa_r+0x6ba>
 8006d00:	4649      	mov	r1, r9
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 ffde 	bl	8007cc4 <_Bfree>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	7033      	strb	r3, [r6, #0]
 8006d0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d0e:	3701      	adds	r7, #1
 8006d10:	601f      	str	r7, [r3, #0]
 8006d12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8320 	beq.w	800735a <_dtoa_r+0xb3a>
 8006d1a:	601e      	str	r6, [r3, #0]
 8006d1c:	e31d      	b.n	800735a <_dtoa_r+0xb3a>
 8006d1e:	07e2      	lsls	r2, r4, #31
 8006d20:	d505      	bpl.n	8006d2e <_dtoa_r+0x50e>
 8006d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d26:	f7f9 fbd7 	bl	80004d8 <__aeabi_dmul>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	1064      	asrs	r4, r4, #1
 8006d30:	3508      	adds	r5, #8
 8006d32:	e73f      	b.n	8006bb4 <_dtoa_r+0x394>
 8006d34:	2602      	movs	r6, #2
 8006d36:	e742      	b.n	8006bbe <_dtoa_r+0x39e>
 8006d38:	9c07      	ldr	r4, [sp, #28]
 8006d3a:	9704      	str	r7, [sp, #16]
 8006d3c:	e761      	b.n	8006c02 <_dtoa_r+0x3e2>
 8006d3e:	bf00      	nop
 8006d40:	08009640 	.word	0x08009640
 8006d44:	08009618 	.word	0x08009618
 8006d48:	3ff00000 	.word	0x3ff00000
 8006d4c:	40240000 	.word	0x40240000
 8006d50:	401c0000 	.word	0x401c0000
 8006d54:	40140000 	.word	0x40140000
 8006d58:	4b70      	ldr	r3, [pc, #448]	@ (8006f1c <_dtoa_r+0x6fc>)
 8006d5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d64:	4454      	add	r4, sl
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d045      	beq.n	8006df6 <_dtoa_r+0x5d6>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	496c      	ldr	r1, [pc, #432]	@ (8006f20 <_dtoa_r+0x700>)
 8006d6e:	f7f9 fcdd 	bl	800072c <__aeabi_ddiv>
 8006d72:	4633      	mov	r3, r6
 8006d74:	462a      	mov	r2, r5
 8006d76:	f7f9 f9f7 	bl	8000168 <__aeabi_dsub>
 8006d7a:	4656      	mov	r6, sl
 8006d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d84:	f7f9 fe58 	bl	8000a38 <__aeabi_d2iz>
 8006d88:	4605      	mov	r5, r0
 8006d8a:	f7f9 fb3b 	bl	8000404 <__aeabi_i2d>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d96:	f7f9 f9e7 	bl	8000168 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	3530      	adds	r5, #48	@ 0x30
 8006da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006da4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006da8:	f806 5b01 	strb.w	r5, [r6], #1
 8006dac:	f7f9 fe06 	bl	80009bc <__aeabi_dcmplt>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d163      	bne.n	8006e7c <_dtoa_r+0x65c>
 8006db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006db8:	2000      	movs	r0, #0
 8006dba:	495a      	ldr	r1, [pc, #360]	@ (8006f24 <_dtoa_r+0x704>)
 8006dbc:	f7f9 f9d4 	bl	8000168 <__aeabi_dsub>
 8006dc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dc4:	f7f9 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f040 8087 	bne.w	8006edc <_dtoa_r+0x6bc>
 8006dce:	42a6      	cmp	r6, r4
 8006dd0:	f43f af43 	beq.w	8006c5a <_dtoa_r+0x43a>
 8006dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4b53      	ldr	r3, [pc, #332]	@ (8006f28 <_dtoa_r+0x708>)
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	2200      	movs	r2, #0
 8006de2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dea:	4b4f      	ldr	r3, [pc, #316]	@ (8006f28 <_dtoa_r+0x708>)
 8006dec:	f7f9 fb74 	bl	80004d8 <__aeabi_dmul>
 8006df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df4:	e7c4      	b.n	8006d80 <_dtoa_r+0x560>
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7f9 fb6d 	bl	80004d8 <__aeabi_dmul>
 8006dfe:	4656      	mov	r6, sl
 8006e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0a:	f7f9 fe15 	bl	8000a38 <__aeabi_d2iz>
 8006e0e:	4605      	mov	r5, r0
 8006e10:	f7f9 faf8 	bl	8000404 <__aeabi_i2d>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1c:	f7f9 f9a4 	bl	8000168 <__aeabi_dsub>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	3530      	adds	r5, #48	@ 0x30
 8006e26:	f806 5b01 	strb.w	r5, [r6], #1
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	d124      	bne.n	8006e80 <_dtoa_r+0x660>
 8006e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e3a:	4b39      	ldr	r3, [pc, #228]	@ (8006f20 <_dtoa_r+0x700>)
 8006e3c:	f7f9 f996 	bl	800016c <__adddf3>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e48:	f7f9 fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d145      	bne.n	8006edc <_dtoa_r+0x6bc>
 8006e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e54:	2000      	movs	r0, #0
 8006e56:	4932      	ldr	r1, [pc, #200]	@ (8006f20 <_dtoa_r+0x700>)
 8006e58:	f7f9 f986 	bl	8000168 <__aeabi_dsub>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e64:	f7f9 fdaa 	bl	80009bc <__aeabi_dcmplt>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f43f aef6 	beq.w	8006c5a <_dtoa_r+0x43a>
 8006e6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e70:	1e73      	subs	r3, r6, #1
 8006e72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e78:	2b30      	cmp	r3, #48	@ 0x30
 8006e7a:	d0f8      	beq.n	8006e6e <_dtoa_r+0x64e>
 8006e7c:	9f04      	ldr	r7, [sp, #16]
 8006e7e:	e73f      	b.n	8006d00 <_dtoa_r+0x4e0>
 8006e80:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <_dtoa_r+0x708>)
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e8a:	e7bc      	b.n	8006e06 <_dtoa_r+0x5e6>
 8006e8c:	d10c      	bne.n	8006ea8 <_dtoa_r+0x688>
 8006e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e92:	2200      	movs	r2, #0
 8006e94:	4b25      	ldr	r3, [pc, #148]	@ (8006f2c <_dtoa_r+0x70c>)
 8006e96:	f7f9 fb1f 	bl	80004d8 <__aeabi_dmul>
 8006e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e9e:	f7f9 fda1 	bl	80009e4 <__aeabi_dcmpge>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f000 815b 	beq.w	800715e <_dtoa_r+0x93e>
 8006ea8:	2400      	movs	r4, #0
 8006eaa:	4625      	mov	r5, r4
 8006eac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eae:	4656      	mov	r6, sl
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	2700      	movs	r7, #0
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4658      	mov	r0, fp
 8006eba:	f000 ff03 	bl	8007cc4 <_Bfree>
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	d0dc      	beq.n	8006e7c <_dtoa_r+0x65c>
 8006ec2:	b12f      	cbz	r7, 8006ed0 <_dtoa_r+0x6b0>
 8006ec4:	42af      	cmp	r7, r5
 8006ec6:	d003      	beq.n	8006ed0 <_dtoa_r+0x6b0>
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4658      	mov	r0, fp
 8006ecc:	f000 fefa 	bl	8007cc4 <_Bfree>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fef6 	bl	8007cc4 <_Bfree>
 8006ed8:	e7d0      	b.n	8006e7c <_dtoa_r+0x65c>
 8006eda:	9704      	str	r7, [sp, #16]
 8006edc:	4633      	mov	r3, r6
 8006ede:	461e      	mov	r6, r3
 8006ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ee4:	2a39      	cmp	r2, #57	@ 0x39
 8006ee6:	d107      	bne.n	8006ef8 <_dtoa_r+0x6d8>
 8006ee8:	459a      	cmp	sl, r3
 8006eea:	d1f8      	bne.n	8006ede <_dtoa_r+0x6be>
 8006eec:	9a04      	ldr	r2, [sp, #16]
 8006eee:	3201      	adds	r2, #1
 8006ef0:	9204      	str	r2, [sp, #16]
 8006ef2:	2230      	movs	r2, #48	@ 0x30
 8006ef4:	f88a 2000 	strb.w	r2, [sl]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	3201      	adds	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e7bd      	b.n	8006e7c <_dtoa_r+0x65c>
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <_dtoa_r+0x708>)
 8006f04:	f7f9 fae8 	bl	80004d8 <__aeabi_dmul>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	f7f9 fd4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f43f aebc 	beq.w	8006c92 <_dtoa_r+0x472>
 8006f1a:	e6f1      	b.n	8006d00 <_dtoa_r+0x4e0>
 8006f1c:	08009640 	.word	0x08009640
 8006f20:	3fe00000 	.word	0x3fe00000
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	40240000 	.word	0x40240000
 8006f2c:	40140000 	.word	0x40140000
 8006f30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	f000 80db 	beq.w	80070ee <_dtoa_r+0x8ce>
 8006f38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f3a:	2a01      	cmp	r2, #1
 8006f3c:	f300 80bf 	bgt.w	80070be <_dtoa_r+0x89e>
 8006f40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	f000 80b7 	beq.w	80070b6 <_dtoa_r+0x896>
 8006f48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f4c:	4646      	mov	r6, r8
 8006f4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f52:	2101      	movs	r1, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	4658      	mov	r0, fp
 8006f58:	4498      	add	r8, r3
 8006f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f5c:	f000 ffb0 	bl	8007ec0 <__i2b>
 8006f60:	4605      	mov	r5, r0
 8006f62:	b15e      	cbz	r6, 8006f7c <_dtoa_r+0x75c>
 8006f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dd08      	ble.n	8006f7c <_dtoa_r+0x75c>
 8006f6a:	42b3      	cmp	r3, r6
 8006f6c:	bfa8      	it	ge
 8006f6e:	4633      	movge	r3, r6
 8006f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f72:	eba8 0803 	sub.w	r8, r8, r3
 8006f76:	1af6      	subs	r6, r6, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f7e:	b1f3      	cbz	r3, 8006fbe <_dtoa_r+0x79e>
 8006f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80b7 	beq.w	80070f6 <_dtoa_r+0x8d6>
 8006f88:	b18c      	cbz	r4, 8006fae <_dtoa_r+0x78e>
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4658      	mov	r0, fp
 8006f90:	f001 f854 	bl	800803c <__pow5mult>
 8006f94:	464a      	mov	r2, r9
 8006f96:	4601      	mov	r1, r0
 8006f98:	4605      	mov	r5, r0
 8006f9a:	4658      	mov	r0, fp
 8006f9c:	f000 ffa6 	bl	8007eec <__multiply>
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	9004      	str	r0, [sp, #16]
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	f000 fe8d 	bl	8007cc4 <_Bfree>
 8006faa:	9b04      	ldr	r3, [sp, #16]
 8006fac:	4699      	mov	r9, r3
 8006fae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb0:	1b1a      	subs	r2, r3, r4
 8006fb2:	d004      	beq.n	8006fbe <_dtoa_r+0x79e>
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4658      	mov	r0, fp
 8006fb8:	f001 f840 	bl	800803c <__pow5mult>
 8006fbc:	4681      	mov	r9, r0
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	f000 ff7d 	bl	8007ec0 <__i2b>
 8006fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc8:	4604      	mov	r4, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 81c9 	beq.w	8007362 <_dtoa_r+0xb42>
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f001 f831 	bl	800803c <__pow5mult>
 8006fda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	f300 808f 	bgt.w	8007102 <_dtoa_r+0x8e2>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 8087 	bne.w	80070fa <_dtoa_r+0x8da>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 8083 	bne.w	80070fe <_dtoa_r+0x8de>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ffe:	0d1b      	lsrs	r3, r3, #20
 8007000:	051b      	lsls	r3, r3, #20
 8007002:	b12b      	cbz	r3, 8007010 <_dtoa_r+0x7f0>
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	f108 0801 	add.w	r8, r8, #1
 800700a:	3301      	adds	r3, #1
 800700c:	9309      	str	r3, [sp, #36]	@ 0x24
 800700e:	2301      	movs	r3, #1
 8007010:	930a      	str	r3, [sp, #40]	@ 0x28
 8007012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 81aa 	beq.w	800736e <_dtoa_r+0xb4e>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007020:	6918      	ldr	r0, [r3, #16]
 8007022:	f000 ff01 	bl	8007e28 <__hi0bits>
 8007026:	f1c0 0020 	rsb	r0, r0, #32
 800702a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800702c:	4418      	add	r0, r3
 800702e:	f010 001f 	ands.w	r0, r0, #31
 8007032:	d071      	beq.n	8007118 <_dtoa_r+0x8f8>
 8007034:	f1c0 0320 	rsb	r3, r0, #32
 8007038:	2b04      	cmp	r3, #4
 800703a:	dd65      	ble.n	8007108 <_dtoa_r+0x8e8>
 800703c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703e:	f1c0 001c 	rsb	r0, r0, #28
 8007042:	4403      	add	r3, r0
 8007044:	4480      	add	r8, r0
 8007046:	4406      	add	r6, r0
 8007048:	9309      	str	r3, [sp, #36]	@ 0x24
 800704a:	f1b8 0f00 	cmp.w	r8, #0
 800704e:	dd05      	ble.n	800705c <_dtoa_r+0x83c>
 8007050:	4649      	mov	r1, r9
 8007052:	4642      	mov	r2, r8
 8007054:	4658      	mov	r0, fp
 8007056:	f001 f84b 	bl	80080f0 <__lshift>
 800705a:	4681      	mov	r9, r0
 800705c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	dd05      	ble.n	800706e <_dtoa_r+0x84e>
 8007062:	4621      	mov	r1, r4
 8007064:	461a      	mov	r2, r3
 8007066:	4658      	mov	r0, fp
 8007068:	f001 f842 	bl	80080f0 <__lshift>
 800706c:	4604      	mov	r4, r0
 800706e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d053      	beq.n	800711c <_dtoa_r+0x8fc>
 8007074:	4621      	mov	r1, r4
 8007076:	4648      	mov	r0, r9
 8007078:	f001 f8a6 	bl	80081c8 <__mcmp>
 800707c:	2800      	cmp	r0, #0
 800707e:	da4d      	bge.n	800711c <_dtoa_r+0x8fc>
 8007080:	1e7b      	subs	r3, r7, #1
 8007082:	4649      	mov	r1, r9
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	220a      	movs	r2, #10
 8007088:	2300      	movs	r3, #0
 800708a:	4658      	mov	r0, fp
 800708c:	f000 fe3c 	bl	8007d08 <__multadd>
 8007090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007092:	4681      	mov	r9, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 816c 	beq.w	8007372 <_dtoa_r+0xb52>
 800709a:	2300      	movs	r3, #0
 800709c:	4629      	mov	r1, r5
 800709e:	220a      	movs	r2, #10
 80070a0:	4658      	mov	r0, fp
 80070a2:	f000 fe31 	bl	8007d08 <__multadd>
 80070a6:	9b08      	ldr	r3, [sp, #32]
 80070a8:	4605      	mov	r5, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	dc61      	bgt.n	8007172 <_dtoa_r+0x952>
 80070ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	dc3b      	bgt.n	800712c <_dtoa_r+0x90c>
 80070b4:	e05d      	b.n	8007172 <_dtoa_r+0x952>
 80070b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070bc:	e746      	b.n	8006f4c <_dtoa_r+0x72c>
 80070be:	9b07      	ldr	r3, [sp, #28]
 80070c0:	1e5c      	subs	r4, r3, #1
 80070c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	bfbf      	itttt	lt
 80070c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80070ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80070cc:	1ae3      	sublt	r3, r4, r3
 80070ce:	18d2      	addlt	r2, r2, r3
 80070d0:	bfa8      	it	ge
 80070d2:	1b1c      	subge	r4, r3, r4
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	bfbe      	ittt	lt
 80070d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80070da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80070dc:	2400      	movlt	r4, #0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb5      	itete	lt
 80070e2:	eba8 0603 	sublt.w	r6, r8, r3
 80070e6:	4646      	movge	r6, r8
 80070e8:	2300      	movlt	r3, #0
 80070ea:	9b07      	ldrge	r3, [sp, #28]
 80070ec:	e730      	b.n	8006f50 <_dtoa_r+0x730>
 80070ee:	4646      	mov	r6, r8
 80070f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070f4:	e735      	b.n	8006f62 <_dtoa_r+0x742>
 80070f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f8:	e75c      	b.n	8006fb4 <_dtoa_r+0x794>
 80070fa:	2300      	movs	r3, #0
 80070fc:	e788      	b.n	8007010 <_dtoa_r+0x7f0>
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	e786      	b.n	8007010 <_dtoa_r+0x7f0>
 8007102:	2300      	movs	r3, #0
 8007104:	930a      	str	r3, [sp, #40]	@ 0x28
 8007106:	e788      	b.n	800701a <_dtoa_r+0x7fa>
 8007108:	d09f      	beq.n	800704a <_dtoa_r+0x82a>
 800710a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800710c:	331c      	adds	r3, #28
 800710e:	441a      	add	r2, r3
 8007110:	4498      	add	r8, r3
 8007112:	441e      	add	r6, r3
 8007114:	9209      	str	r2, [sp, #36]	@ 0x24
 8007116:	e798      	b.n	800704a <_dtoa_r+0x82a>
 8007118:	4603      	mov	r3, r0
 800711a:	e7f6      	b.n	800710a <_dtoa_r+0x8ea>
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	9704      	str	r7, [sp, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	dc20      	bgt.n	8007166 <_dtoa_r+0x946>
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007128:	2b02      	cmp	r3, #2
 800712a:	dd1e      	ble.n	800716a <_dtoa_r+0x94a>
 800712c:	9b08      	ldr	r3, [sp, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f47f aebc 	bne.w	8006eac <_dtoa_r+0x68c>
 8007134:	4621      	mov	r1, r4
 8007136:	2205      	movs	r2, #5
 8007138:	4658      	mov	r0, fp
 800713a:	f000 fde5 	bl	8007d08 <__multadd>
 800713e:	4601      	mov	r1, r0
 8007140:	4604      	mov	r4, r0
 8007142:	4648      	mov	r0, r9
 8007144:	f001 f840 	bl	80081c8 <__mcmp>
 8007148:	2800      	cmp	r0, #0
 800714a:	f77f aeaf 	ble.w	8006eac <_dtoa_r+0x68c>
 800714e:	2331      	movs	r3, #49	@ 0x31
 8007150:	4656      	mov	r6, sl
 8007152:	f806 3b01 	strb.w	r3, [r6], #1
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e6aa      	b.n	8006eb4 <_dtoa_r+0x694>
 800715e:	9c07      	ldr	r4, [sp, #28]
 8007160:	9704      	str	r7, [sp, #16]
 8007162:	4625      	mov	r5, r4
 8007164:	e7f3      	b.n	800714e <_dtoa_r+0x92e>
 8007166:	9b07      	ldr	r3, [sp, #28]
 8007168:	9308      	str	r3, [sp, #32]
 800716a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8104 	beq.w	800737a <_dtoa_r+0xb5a>
 8007172:	2e00      	cmp	r6, #0
 8007174:	dd05      	ble.n	8007182 <_dtoa_r+0x962>
 8007176:	4629      	mov	r1, r5
 8007178:	4632      	mov	r2, r6
 800717a:	4658      	mov	r0, fp
 800717c:	f000 ffb8 	bl	80080f0 <__lshift>
 8007180:	4605      	mov	r5, r0
 8007182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	d05a      	beq.n	800723e <_dtoa_r+0xa1e>
 8007188:	4658      	mov	r0, fp
 800718a:	6869      	ldr	r1, [r5, #4]
 800718c:	f000 fd5a 	bl	8007c44 <_Balloc>
 8007190:	4606      	mov	r6, r0
 8007192:	b928      	cbnz	r0, 80071a0 <_dtoa_r+0x980>
 8007194:	4602      	mov	r2, r0
 8007196:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800719a:	4b83      	ldr	r3, [pc, #524]	@ (80073a8 <_dtoa_r+0xb88>)
 800719c:	f7ff bb54 	b.w	8006848 <_dtoa_r+0x28>
 80071a0:	692a      	ldr	r2, [r5, #16]
 80071a2:	f105 010c 	add.w	r1, r5, #12
 80071a6:	3202      	adds	r2, #2
 80071a8:	0092      	lsls	r2, r2, #2
 80071aa:	300c      	adds	r0, #12
 80071ac:	f7ff fa9b 	bl	80066e6 <memcpy>
 80071b0:	2201      	movs	r2, #1
 80071b2:	4631      	mov	r1, r6
 80071b4:	4658      	mov	r0, fp
 80071b6:	f000 ff9b 	bl	80080f0 <__lshift>
 80071ba:	462f      	mov	r7, r5
 80071bc:	4605      	mov	r5, r0
 80071be:	f10a 0301 	add.w	r3, sl, #1
 80071c2:	9307      	str	r3, [sp, #28]
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	4453      	add	r3, sl
 80071c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d2:	9b07      	ldr	r3, [sp, #28]
 80071d4:	4621      	mov	r1, r4
 80071d6:	3b01      	subs	r3, #1
 80071d8:	4648      	mov	r0, r9
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	f7ff fa98 	bl	8006710 <quorem>
 80071e0:	4639      	mov	r1, r7
 80071e2:	9008      	str	r0, [sp, #32]
 80071e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071e8:	4648      	mov	r0, r9
 80071ea:	f000 ffed 	bl	80081c8 <__mcmp>
 80071ee:	462a      	mov	r2, r5
 80071f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80071f2:	4621      	mov	r1, r4
 80071f4:	4658      	mov	r0, fp
 80071f6:	f001 f803 	bl	8008200 <__mdiff>
 80071fa:	68c2      	ldr	r2, [r0, #12]
 80071fc:	4606      	mov	r6, r0
 80071fe:	bb02      	cbnz	r2, 8007242 <_dtoa_r+0xa22>
 8007200:	4601      	mov	r1, r0
 8007202:	4648      	mov	r0, r9
 8007204:	f000 ffe0 	bl	80081c8 <__mcmp>
 8007208:	4602      	mov	r2, r0
 800720a:	4631      	mov	r1, r6
 800720c:	4658      	mov	r0, fp
 800720e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007210:	f000 fd58 	bl	8007cc4 <_Bfree>
 8007214:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007216:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007218:	9e07      	ldr	r6, [sp, #28]
 800721a:	ea43 0102 	orr.w	r1, r3, r2
 800721e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007220:	4319      	orrs	r1, r3
 8007222:	d110      	bne.n	8007246 <_dtoa_r+0xa26>
 8007224:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007228:	d029      	beq.n	800727e <_dtoa_r+0xa5e>
 800722a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	dd02      	ble.n	8007236 <_dtoa_r+0xa16>
 8007230:	9b08      	ldr	r3, [sp, #32]
 8007232:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	f883 8000 	strb.w	r8, [r3]
 800723c:	e63b      	b.n	8006eb6 <_dtoa_r+0x696>
 800723e:	4628      	mov	r0, r5
 8007240:	e7bb      	b.n	80071ba <_dtoa_r+0x99a>
 8007242:	2201      	movs	r2, #1
 8007244:	e7e1      	b.n	800720a <_dtoa_r+0x9ea>
 8007246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	db04      	blt.n	8007256 <_dtoa_r+0xa36>
 800724c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800724e:	430b      	orrs	r3, r1
 8007250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007252:	430b      	orrs	r3, r1
 8007254:	d120      	bne.n	8007298 <_dtoa_r+0xa78>
 8007256:	2a00      	cmp	r2, #0
 8007258:	dded      	ble.n	8007236 <_dtoa_r+0xa16>
 800725a:	4649      	mov	r1, r9
 800725c:	2201      	movs	r2, #1
 800725e:	4658      	mov	r0, fp
 8007260:	f000 ff46 	bl	80080f0 <__lshift>
 8007264:	4621      	mov	r1, r4
 8007266:	4681      	mov	r9, r0
 8007268:	f000 ffae 	bl	80081c8 <__mcmp>
 800726c:	2800      	cmp	r0, #0
 800726e:	dc03      	bgt.n	8007278 <_dtoa_r+0xa58>
 8007270:	d1e1      	bne.n	8007236 <_dtoa_r+0xa16>
 8007272:	f018 0f01 	tst.w	r8, #1
 8007276:	d0de      	beq.n	8007236 <_dtoa_r+0xa16>
 8007278:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800727c:	d1d8      	bne.n	8007230 <_dtoa_r+0xa10>
 800727e:	2339      	movs	r3, #57	@ 0x39
 8007280:	9a02      	ldr	r2, [sp, #8]
 8007282:	7013      	strb	r3, [r2, #0]
 8007284:	4633      	mov	r3, r6
 8007286:	461e      	mov	r6, r3
 8007288:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800728c:	3b01      	subs	r3, #1
 800728e:	2a39      	cmp	r2, #57	@ 0x39
 8007290:	d052      	beq.n	8007338 <_dtoa_r+0xb18>
 8007292:	3201      	adds	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e60e      	b.n	8006eb6 <_dtoa_r+0x696>
 8007298:	2a00      	cmp	r2, #0
 800729a:	dd07      	ble.n	80072ac <_dtoa_r+0xa8c>
 800729c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072a0:	d0ed      	beq.n	800727e <_dtoa_r+0xa5e>
 80072a2:	9a02      	ldr	r2, [sp, #8]
 80072a4:	f108 0301 	add.w	r3, r8, #1
 80072a8:	7013      	strb	r3, [r2, #0]
 80072aa:	e604      	b.n	8006eb6 <_dtoa_r+0x696>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	9a07      	ldr	r2, [sp, #28]
 80072b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80072b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d028      	beq.n	800730c <_dtoa_r+0xaec>
 80072ba:	4649      	mov	r1, r9
 80072bc:	2300      	movs	r3, #0
 80072be:	220a      	movs	r2, #10
 80072c0:	4658      	mov	r0, fp
 80072c2:	f000 fd21 	bl	8007d08 <__multadd>
 80072c6:	42af      	cmp	r7, r5
 80072c8:	4681      	mov	r9, r0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	f04f 020a 	mov.w	r2, #10
 80072d2:	4639      	mov	r1, r7
 80072d4:	4658      	mov	r0, fp
 80072d6:	d107      	bne.n	80072e8 <_dtoa_r+0xac8>
 80072d8:	f000 fd16 	bl	8007d08 <__multadd>
 80072dc:	4607      	mov	r7, r0
 80072de:	4605      	mov	r5, r0
 80072e0:	9b07      	ldr	r3, [sp, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	e774      	b.n	80071d2 <_dtoa_r+0x9b2>
 80072e8:	f000 fd0e 	bl	8007d08 <__multadd>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4607      	mov	r7, r0
 80072f0:	2300      	movs	r3, #0
 80072f2:	220a      	movs	r2, #10
 80072f4:	4658      	mov	r0, fp
 80072f6:	f000 fd07 	bl	8007d08 <__multadd>
 80072fa:	4605      	mov	r5, r0
 80072fc:	e7f0      	b.n	80072e0 <_dtoa_r+0xac0>
 80072fe:	9b08      	ldr	r3, [sp, #32]
 8007300:	2700      	movs	r7, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfcc      	ite	gt
 8007306:	461e      	movgt	r6, r3
 8007308:	2601      	movle	r6, #1
 800730a:	4456      	add	r6, sl
 800730c:	4649      	mov	r1, r9
 800730e:	2201      	movs	r2, #1
 8007310:	4658      	mov	r0, fp
 8007312:	f000 feed 	bl	80080f0 <__lshift>
 8007316:	4621      	mov	r1, r4
 8007318:	4681      	mov	r9, r0
 800731a:	f000 ff55 	bl	80081c8 <__mcmp>
 800731e:	2800      	cmp	r0, #0
 8007320:	dcb0      	bgt.n	8007284 <_dtoa_r+0xa64>
 8007322:	d102      	bne.n	800732a <_dtoa_r+0xb0a>
 8007324:	f018 0f01 	tst.w	r8, #1
 8007328:	d1ac      	bne.n	8007284 <_dtoa_r+0xa64>
 800732a:	4633      	mov	r3, r6
 800732c:	461e      	mov	r6, r3
 800732e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007332:	2a30      	cmp	r2, #48	@ 0x30
 8007334:	d0fa      	beq.n	800732c <_dtoa_r+0xb0c>
 8007336:	e5be      	b.n	8006eb6 <_dtoa_r+0x696>
 8007338:	459a      	cmp	sl, r3
 800733a:	d1a4      	bne.n	8007286 <_dtoa_r+0xa66>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	3301      	adds	r3, #1
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	2331      	movs	r3, #49	@ 0x31
 8007344:	f88a 3000 	strb.w	r3, [sl]
 8007348:	e5b5      	b.n	8006eb6 <_dtoa_r+0x696>
 800734a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800734c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80073ac <_dtoa_r+0xb8c>
 8007350:	b11b      	cbz	r3, 800735a <_dtoa_r+0xb3a>
 8007352:	f10a 0308 	add.w	r3, sl, #8
 8007356:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4650      	mov	r0, sl
 800735c:	b017      	add	sp, #92	@ 0x5c
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007364:	2b01      	cmp	r3, #1
 8007366:	f77f ae3d 	ble.w	8006fe4 <_dtoa_r+0x7c4>
 800736a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800736c:	930a      	str	r3, [sp, #40]	@ 0x28
 800736e:	2001      	movs	r0, #1
 8007370:	e65b      	b.n	800702a <_dtoa_r+0x80a>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f77f aed6 	ble.w	8007126 <_dtoa_r+0x906>
 800737a:	4656      	mov	r6, sl
 800737c:	4621      	mov	r1, r4
 800737e:	4648      	mov	r0, r9
 8007380:	f7ff f9c6 	bl	8006710 <quorem>
 8007384:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	f806 8b01 	strb.w	r8, [r6], #1
 800738e:	eba6 020a 	sub.w	r2, r6, sl
 8007392:	4293      	cmp	r3, r2
 8007394:	ddb3      	ble.n	80072fe <_dtoa_r+0xade>
 8007396:	4649      	mov	r1, r9
 8007398:	2300      	movs	r3, #0
 800739a:	220a      	movs	r2, #10
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fcb3 	bl	8007d08 <__multadd>
 80073a2:	4681      	mov	r9, r0
 80073a4:	e7ea      	b.n	800737c <_dtoa_r+0xb5c>
 80073a6:	bf00      	nop
 80073a8:	08009541 	.word	0x08009541
 80073ac:	080094c5 	.word	0x080094c5

080073b0 <_free_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4605      	mov	r5, r0
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d040      	beq.n	800743a <_free_r+0x8a>
 80073b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073bc:	1f0c      	subs	r4, r1, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfb8      	it	lt
 80073c2:	18e4      	addlt	r4, r4, r3
 80073c4:	f000 fc32 	bl	8007c2c <__malloc_lock>
 80073c8:	4a1c      	ldr	r2, [pc, #112]	@ (800743c <_free_r+0x8c>)
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	b933      	cbnz	r3, 80073dc <_free_r+0x2c>
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	6014      	str	r4, [r2, #0]
 80073d2:	4628      	mov	r0, r5
 80073d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d8:	f000 bc2e 	b.w	8007c38 <__malloc_unlock>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d908      	bls.n	80073f2 <_free_r+0x42>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	1821      	adds	r1, r4, r0
 80073e4:	428b      	cmp	r3, r1
 80073e6:	bf01      	itttt	eq
 80073e8:	6819      	ldreq	r1, [r3, #0]
 80073ea:	685b      	ldreq	r3, [r3, #4]
 80073ec:	1809      	addeq	r1, r1, r0
 80073ee:	6021      	streq	r1, [r4, #0]
 80073f0:	e7ed      	b.n	80073ce <_free_r+0x1e>
 80073f2:	461a      	mov	r2, r3
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b10b      	cbz	r3, 80073fc <_free_r+0x4c>
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d9fa      	bls.n	80073f2 <_free_r+0x42>
 80073fc:	6811      	ldr	r1, [r2, #0]
 80073fe:	1850      	adds	r0, r2, r1
 8007400:	42a0      	cmp	r0, r4
 8007402:	d10b      	bne.n	800741c <_free_r+0x6c>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	4401      	add	r1, r0
 8007408:	1850      	adds	r0, r2, r1
 800740a:	4283      	cmp	r3, r0
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	d1e0      	bne.n	80073d2 <_free_r+0x22>
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4408      	add	r0, r1
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	6053      	str	r3, [r2, #4]
 800741a:	e7da      	b.n	80073d2 <_free_r+0x22>
 800741c:	d902      	bls.n	8007424 <_free_r+0x74>
 800741e:	230c      	movs	r3, #12
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	e7d6      	b.n	80073d2 <_free_r+0x22>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	1821      	adds	r1, r4, r0
 8007428:	428b      	cmp	r3, r1
 800742a:	bf01      	itttt	eq
 800742c:	6819      	ldreq	r1, [r3, #0]
 800742e:	685b      	ldreq	r3, [r3, #4]
 8007430:	1809      	addeq	r1, r1, r0
 8007432:	6021      	streq	r1, [r4, #0]
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6054      	str	r4, [r2, #4]
 8007438:	e7cb      	b.n	80073d2 <_free_r+0x22>
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	20000a1c 	.word	0x20000a1c

08007440 <rshift>:
 8007440:	6903      	ldr	r3, [r0, #16]
 8007442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007446:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800744a:	f100 0414 	add.w	r4, r0, #20
 800744e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007452:	dd46      	ble.n	80074e2 <rshift+0xa2>
 8007454:	f011 011f 	ands.w	r1, r1, #31
 8007458:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800745c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007460:	d10c      	bne.n	800747c <rshift+0x3c>
 8007462:	4629      	mov	r1, r5
 8007464:	f100 0710 	add.w	r7, r0, #16
 8007468:	42b1      	cmp	r1, r6
 800746a:	d335      	bcc.n	80074d8 <rshift+0x98>
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	1eea      	subs	r2, r5, #3
 8007472:	4296      	cmp	r6, r2
 8007474:	bf38      	it	cc
 8007476:	2300      	movcc	r3, #0
 8007478:	4423      	add	r3, r4
 800747a:	e015      	b.n	80074a8 <rshift+0x68>
 800747c:	46a1      	mov	r9, r4
 800747e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007482:	f1c1 0820 	rsb	r8, r1, #32
 8007486:	40cf      	lsrs	r7, r1
 8007488:	f105 0e04 	add.w	lr, r5, #4
 800748c:	4576      	cmp	r6, lr
 800748e:	46f4      	mov	ip, lr
 8007490:	d816      	bhi.n	80074c0 <rshift+0x80>
 8007492:	1a9a      	subs	r2, r3, r2
 8007494:	0092      	lsls	r2, r2, #2
 8007496:	3a04      	subs	r2, #4
 8007498:	3501      	adds	r5, #1
 800749a:	42ae      	cmp	r6, r5
 800749c:	bf38      	it	cc
 800749e:	2200      	movcc	r2, #0
 80074a0:	18a3      	adds	r3, r4, r2
 80074a2:	50a7      	str	r7, [r4, r2]
 80074a4:	b107      	cbz	r7, 80074a8 <rshift+0x68>
 80074a6:	3304      	adds	r3, #4
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	eba3 0204 	sub.w	r2, r3, r4
 80074ae:	bf08      	it	eq
 80074b0:	2300      	moveq	r3, #0
 80074b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074b6:	6102      	str	r2, [r0, #16]
 80074b8:	bf08      	it	eq
 80074ba:	6143      	streq	r3, [r0, #20]
 80074bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074c0:	f8dc c000 	ldr.w	ip, [ip]
 80074c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80074c8:	ea4c 0707 	orr.w	r7, ip, r7
 80074cc:	f849 7b04 	str.w	r7, [r9], #4
 80074d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074d4:	40cf      	lsrs	r7, r1
 80074d6:	e7d9      	b.n	800748c <rshift+0x4c>
 80074d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80074dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80074e0:	e7c2      	b.n	8007468 <rshift+0x28>
 80074e2:	4623      	mov	r3, r4
 80074e4:	e7e0      	b.n	80074a8 <rshift+0x68>

080074e6 <__hexdig_fun>:
 80074e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d802      	bhi.n	80074f4 <__hexdig_fun+0xe>
 80074ee:	3820      	subs	r0, #32
 80074f0:	b2c0      	uxtb	r0, r0
 80074f2:	4770      	bx	lr
 80074f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	d801      	bhi.n	8007500 <__hexdig_fun+0x1a>
 80074fc:	3847      	subs	r0, #71	@ 0x47
 80074fe:	e7f7      	b.n	80074f0 <__hexdig_fun+0xa>
 8007500:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007504:	2b05      	cmp	r3, #5
 8007506:	d801      	bhi.n	800750c <__hexdig_fun+0x26>
 8007508:	3827      	subs	r0, #39	@ 0x27
 800750a:	e7f1      	b.n	80074f0 <__hexdig_fun+0xa>
 800750c:	2000      	movs	r0, #0
 800750e:	4770      	bx	lr

08007510 <__gethex>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	468a      	mov	sl, r1
 8007516:	4690      	mov	r8, r2
 8007518:	b085      	sub	sp, #20
 800751a:	9302      	str	r3, [sp, #8]
 800751c:	680b      	ldr	r3, [r1, #0]
 800751e:	9001      	str	r0, [sp, #4]
 8007520:	1c9c      	adds	r4, r3, #2
 8007522:	46a1      	mov	r9, r4
 8007524:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007528:	2830      	cmp	r0, #48	@ 0x30
 800752a:	d0fa      	beq.n	8007522 <__gethex+0x12>
 800752c:	eba9 0303 	sub.w	r3, r9, r3
 8007530:	f1a3 0b02 	sub.w	fp, r3, #2
 8007534:	f7ff ffd7 	bl	80074e6 <__hexdig_fun>
 8007538:	4605      	mov	r5, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d168      	bne.n	8007610 <__gethex+0x100>
 800753e:	2201      	movs	r2, #1
 8007540:	4648      	mov	r0, r9
 8007542:	499f      	ldr	r1, [pc, #636]	@ (80077c0 <__gethex+0x2b0>)
 8007544:	f7ff f821 	bl	800658a <strncmp>
 8007548:	4607      	mov	r7, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d167      	bne.n	800761e <__gethex+0x10e>
 800754e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007552:	4626      	mov	r6, r4
 8007554:	f7ff ffc7 	bl	80074e6 <__hexdig_fun>
 8007558:	2800      	cmp	r0, #0
 800755a:	d062      	beq.n	8007622 <__gethex+0x112>
 800755c:	4623      	mov	r3, r4
 800755e:	7818      	ldrb	r0, [r3, #0]
 8007560:	4699      	mov	r9, r3
 8007562:	2830      	cmp	r0, #48	@ 0x30
 8007564:	f103 0301 	add.w	r3, r3, #1
 8007568:	d0f9      	beq.n	800755e <__gethex+0x4e>
 800756a:	f7ff ffbc 	bl	80074e6 <__hexdig_fun>
 800756e:	fab0 f580 	clz	r5, r0
 8007572:	f04f 0b01 	mov.w	fp, #1
 8007576:	096d      	lsrs	r5, r5, #5
 8007578:	464a      	mov	r2, r9
 800757a:	4616      	mov	r6, r2
 800757c:	7830      	ldrb	r0, [r6, #0]
 800757e:	3201      	adds	r2, #1
 8007580:	f7ff ffb1 	bl	80074e6 <__hexdig_fun>
 8007584:	2800      	cmp	r0, #0
 8007586:	d1f8      	bne.n	800757a <__gethex+0x6a>
 8007588:	2201      	movs	r2, #1
 800758a:	4630      	mov	r0, r6
 800758c:	498c      	ldr	r1, [pc, #560]	@ (80077c0 <__gethex+0x2b0>)
 800758e:	f7fe fffc 	bl	800658a <strncmp>
 8007592:	2800      	cmp	r0, #0
 8007594:	d13f      	bne.n	8007616 <__gethex+0x106>
 8007596:	b944      	cbnz	r4, 80075aa <__gethex+0x9a>
 8007598:	1c74      	adds	r4, r6, #1
 800759a:	4622      	mov	r2, r4
 800759c:	4616      	mov	r6, r2
 800759e:	7830      	ldrb	r0, [r6, #0]
 80075a0:	3201      	adds	r2, #1
 80075a2:	f7ff ffa0 	bl	80074e6 <__hexdig_fun>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1f8      	bne.n	800759c <__gethex+0x8c>
 80075aa:	1ba4      	subs	r4, r4, r6
 80075ac:	00a7      	lsls	r7, r4, #2
 80075ae:	7833      	ldrb	r3, [r6, #0]
 80075b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80075b4:	2b50      	cmp	r3, #80	@ 0x50
 80075b6:	d13e      	bne.n	8007636 <__gethex+0x126>
 80075b8:	7873      	ldrb	r3, [r6, #1]
 80075ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80075bc:	d033      	beq.n	8007626 <__gethex+0x116>
 80075be:	2b2d      	cmp	r3, #45	@ 0x2d
 80075c0:	d034      	beq.n	800762c <__gethex+0x11c>
 80075c2:	2400      	movs	r4, #0
 80075c4:	1c71      	adds	r1, r6, #1
 80075c6:	7808      	ldrb	r0, [r1, #0]
 80075c8:	f7ff ff8d 	bl	80074e6 <__hexdig_fun>
 80075cc:	1e43      	subs	r3, r0, #1
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b18      	cmp	r3, #24
 80075d2:	d830      	bhi.n	8007636 <__gethex+0x126>
 80075d4:	f1a0 0210 	sub.w	r2, r0, #16
 80075d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075dc:	f7ff ff83 	bl	80074e6 <__hexdig_fun>
 80075e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80075e4:	fa5f fc8c 	uxtb.w	ip, ip
 80075e8:	f1bc 0f18 	cmp.w	ip, #24
 80075ec:	f04f 030a 	mov.w	r3, #10
 80075f0:	d91e      	bls.n	8007630 <__gethex+0x120>
 80075f2:	b104      	cbz	r4, 80075f6 <__gethex+0xe6>
 80075f4:	4252      	negs	r2, r2
 80075f6:	4417      	add	r7, r2
 80075f8:	f8ca 1000 	str.w	r1, [sl]
 80075fc:	b1ed      	cbz	r5, 800763a <__gethex+0x12a>
 80075fe:	f1bb 0f00 	cmp.w	fp, #0
 8007602:	bf0c      	ite	eq
 8007604:	2506      	moveq	r5, #6
 8007606:	2500      	movne	r5, #0
 8007608:	4628      	mov	r0, r5
 800760a:	b005      	add	sp, #20
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	2500      	movs	r5, #0
 8007612:	462c      	mov	r4, r5
 8007614:	e7b0      	b.n	8007578 <__gethex+0x68>
 8007616:	2c00      	cmp	r4, #0
 8007618:	d1c7      	bne.n	80075aa <__gethex+0x9a>
 800761a:	4627      	mov	r7, r4
 800761c:	e7c7      	b.n	80075ae <__gethex+0x9e>
 800761e:	464e      	mov	r6, r9
 8007620:	462f      	mov	r7, r5
 8007622:	2501      	movs	r5, #1
 8007624:	e7c3      	b.n	80075ae <__gethex+0x9e>
 8007626:	2400      	movs	r4, #0
 8007628:	1cb1      	adds	r1, r6, #2
 800762a:	e7cc      	b.n	80075c6 <__gethex+0xb6>
 800762c:	2401      	movs	r4, #1
 800762e:	e7fb      	b.n	8007628 <__gethex+0x118>
 8007630:	fb03 0002 	mla	r0, r3, r2, r0
 8007634:	e7ce      	b.n	80075d4 <__gethex+0xc4>
 8007636:	4631      	mov	r1, r6
 8007638:	e7de      	b.n	80075f8 <__gethex+0xe8>
 800763a:	4629      	mov	r1, r5
 800763c:	eba6 0309 	sub.w	r3, r6, r9
 8007640:	3b01      	subs	r3, #1
 8007642:	2b07      	cmp	r3, #7
 8007644:	dc0a      	bgt.n	800765c <__gethex+0x14c>
 8007646:	9801      	ldr	r0, [sp, #4]
 8007648:	f000 fafc 	bl	8007c44 <_Balloc>
 800764c:	4604      	mov	r4, r0
 800764e:	b940      	cbnz	r0, 8007662 <__gethex+0x152>
 8007650:	4602      	mov	r2, r0
 8007652:	21e4      	movs	r1, #228	@ 0xe4
 8007654:	4b5b      	ldr	r3, [pc, #364]	@ (80077c4 <__gethex+0x2b4>)
 8007656:	485c      	ldr	r0, [pc, #368]	@ (80077c8 <__gethex+0x2b8>)
 8007658:	f001 f9d0 	bl	80089fc <__assert_func>
 800765c:	3101      	adds	r1, #1
 800765e:	105b      	asrs	r3, r3, #1
 8007660:	e7ef      	b.n	8007642 <__gethex+0x132>
 8007662:	2300      	movs	r3, #0
 8007664:	f100 0a14 	add.w	sl, r0, #20
 8007668:	4655      	mov	r5, sl
 800766a:	469b      	mov	fp, r3
 800766c:	45b1      	cmp	r9, r6
 800766e:	d337      	bcc.n	80076e0 <__gethex+0x1d0>
 8007670:	f845 bb04 	str.w	fp, [r5], #4
 8007674:	eba5 050a 	sub.w	r5, r5, sl
 8007678:	10ad      	asrs	r5, r5, #2
 800767a:	6125      	str	r5, [r4, #16]
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fbd3 	bl	8007e28 <__hi0bits>
 8007682:	016d      	lsls	r5, r5, #5
 8007684:	f8d8 6000 	ldr.w	r6, [r8]
 8007688:	1a2d      	subs	r5, r5, r0
 800768a:	42b5      	cmp	r5, r6
 800768c:	dd54      	ble.n	8007738 <__gethex+0x228>
 800768e:	1bad      	subs	r5, r5, r6
 8007690:	4629      	mov	r1, r5
 8007692:	4620      	mov	r0, r4
 8007694:	f000 ff5b 	bl	800854e <__any_on>
 8007698:	4681      	mov	r9, r0
 800769a:	b178      	cbz	r0, 80076bc <__gethex+0x1ac>
 800769c:	f04f 0901 	mov.w	r9, #1
 80076a0:	1e6b      	subs	r3, r5, #1
 80076a2:	1159      	asrs	r1, r3, #5
 80076a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80076a8:	f003 021f 	and.w	r2, r3, #31
 80076ac:	fa09 f202 	lsl.w	r2, r9, r2
 80076b0:	420a      	tst	r2, r1
 80076b2:	d003      	beq.n	80076bc <__gethex+0x1ac>
 80076b4:	454b      	cmp	r3, r9
 80076b6:	dc36      	bgt.n	8007726 <__gethex+0x216>
 80076b8:	f04f 0902 	mov.w	r9, #2
 80076bc:	4629      	mov	r1, r5
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff febe 	bl	8007440 <rshift>
 80076c4:	442f      	add	r7, r5
 80076c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076ca:	42bb      	cmp	r3, r7
 80076cc:	da42      	bge.n	8007754 <__gethex+0x244>
 80076ce:	4621      	mov	r1, r4
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	f000 faf7 	bl	8007cc4 <_Bfree>
 80076d6:	2300      	movs	r3, #0
 80076d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076da:	25a3      	movs	r5, #163	@ 0xa3
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e793      	b.n	8007608 <__gethex+0xf8>
 80076e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80076e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80076e6:	d012      	beq.n	800770e <__gethex+0x1fe>
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d104      	bne.n	80076f6 <__gethex+0x1e6>
 80076ec:	f845 bb04 	str.w	fp, [r5], #4
 80076f0:	f04f 0b00 	mov.w	fp, #0
 80076f4:	465b      	mov	r3, fp
 80076f6:	7830      	ldrb	r0, [r6, #0]
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	f7ff fef4 	bl	80074e6 <__hexdig_fun>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	f000 000f 	and.w	r0, r0, #15
 8007704:	4098      	lsls	r0, r3
 8007706:	ea4b 0b00 	orr.w	fp, fp, r0
 800770a:	3304      	adds	r3, #4
 800770c:	e7ae      	b.n	800766c <__gethex+0x15c>
 800770e:	45b1      	cmp	r9, r6
 8007710:	d8ea      	bhi.n	80076e8 <__gethex+0x1d8>
 8007712:	2201      	movs	r2, #1
 8007714:	4630      	mov	r0, r6
 8007716:	492a      	ldr	r1, [pc, #168]	@ (80077c0 <__gethex+0x2b0>)
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	f7fe ff36 	bl	800658a <strncmp>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	2800      	cmp	r0, #0
 8007722:	d1e1      	bne.n	80076e8 <__gethex+0x1d8>
 8007724:	e7a2      	b.n	800766c <__gethex+0x15c>
 8007726:	4620      	mov	r0, r4
 8007728:	1ea9      	subs	r1, r5, #2
 800772a:	f000 ff10 	bl	800854e <__any_on>
 800772e:	2800      	cmp	r0, #0
 8007730:	d0c2      	beq.n	80076b8 <__gethex+0x1a8>
 8007732:	f04f 0903 	mov.w	r9, #3
 8007736:	e7c1      	b.n	80076bc <__gethex+0x1ac>
 8007738:	da09      	bge.n	800774e <__gethex+0x23e>
 800773a:	1b75      	subs	r5, r6, r5
 800773c:	4621      	mov	r1, r4
 800773e:	462a      	mov	r2, r5
 8007740:	9801      	ldr	r0, [sp, #4]
 8007742:	f000 fcd5 	bl	80080f0 <__lshift>
 8007746:	4604      	mov	r4, r0
 8007748:	1b7f      	subs	r7, r7, r5
 800774a:	f100 0a14 	add.w	sl, r0, #20
 800774e:	f04f 0900 	mov.w	r9, #0
 8007752:	e7b8      	b.n	80076c6 <__gethex+0x1b6>
 8007754:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007758:	42bd      	cmp	r5, r7
 800775a:	dd6f      	ble.n	800783c <__gethex+0x32c>
 800775c:	1bed      	subs	r5, r5, r7
 800775e:	42ae      	cmp	r6, r5
 8007760:	dc34      	bgt.n	80077cc <__gethex+0x2bc>
 8007762:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d022      	beq.n	80077b0 <__gethex+0x2a0>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d024      	beq.n	80077b8 <__gethex+0x2a8>
 800776e:	2b01      	cmp	r3, #1
 8007770:	d115      	bne.n	800779e <__gethex+0x28e>
 8007772:	42ae      	cmp	r6, r5
 8007774:	d113      	bne.n	800779e <__gethex+0x28e>
 8007776:	2e01      	cmp	r6, #1
 8007778:	d10b      	bne.n	8007792 <__gethex+0x282>
 800777a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800777e:	9a02      	ldr	r2, [sp, #8]
 8007780:	2562      	movs	r5, #98	@ 0x62
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	2301      	movs	r3, #1
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	f8ca 3000 	str.w	r3, [sl]
 800778c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800778e:	601c      	str	r4, [r3, #0]
 8007790:	e73a      	b.n	8007608 <__gethex+0xf8>
 8007792:	4620      	mov	r0, r4
 8007794:	1e71      	subs	r1, r6, #1
 8007796:	f000 feda 	bl	800854e <__any_on>
 800779a:	2800      	cmp	r0, #0
 800779c:	d1ed      	bne.n	800777a <__gethex+0x26a>
 800779e:	4621      	mov	r1, r4
 80077a0:	9801      	ldr	r0, [sp, #4]
 80077a2:	f000 fa8f 	bl	8007cc4 <_Bfree>
 80077a6:	2300      	movs	r3, #0
 80077a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077aa:	2550      	movs	r5, #80	@ 0x50
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e72b      	b.n	8007608 <__gethex+0xf8>
 80077b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f3      	bne.n	800779e <__gethex+0x28e>
 80077b6:	e7e0      	b.n	800777a <__gethex+0x26a>
 80077b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1dd      	bne.n	800777a <__gethex+0x26a>
 80077be:	e7ee      	b.n	800779e <__gethex+0x28e>
 80077c0:	08009332 	.word	0x08009332
 80077c4:	08009541 	.word	0x08009541
 80077c8:	08009552 	.word	0x08009552
 80077cc:	1e6f      	subs	r7, r5, #1
 80077ce:	f1b9 0f00 	cmp.w	r9, #0
 80077d2:	d130      	bne.n	8007836 <__gethex+0x326>
 80077d4:	b127      	cbz	r7, 80077e0 <__gethex+0x2d0>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 feb8 	bl	800854e <__any_on>
 80077de:	4681      	mov	r9, r0
 80077e0:	2301      	movs	r3, #1
 80077e2:	4629      	mov	r1, r5
 80077e4:	1b76      	subs	r6, r6, r5
 80077e6:	2502      	movs	r5, #2
 80077e8:	117a      	asrs	r2, r7, #5
 80077ea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80077ee:	f007 071f 	and.w	r7, r7, #31
 80077f2:	40bb      	lsls	r3, r7
 80077f4:	4213      	tst	r3, r2
 80077f6:	4620      	mov	r0, r4
 80077f8:	bf18      	it	ne
 80077fa:	f049 0902 	orrne.w	r9, r9, #2
 80077fe:	f7ff fe1f 	bl	8007440 <rshift>
 8007802:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007806:	f1b9 0f00 	cmp.w	r9, #0
 800780a:	d047      	beq.n	800789c <__gethex+0x38c>
 800780c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d015      	beq.n	8007840 <__gethex+0x330>
 8007814:	2b03      	cmp	r3, #3
 8007816:	d017      	beq.n	8007848 <__gethex+0x338>
 8007818:	2b01      	cmp	r3, #1
 800781a:	d109      	bne.n	8007830 <__gethex+0x320>
 800781c:	f019 0f02 	tst.w	r9, #2
 8007820:	d006      	beq.n	8007830 <__gethex+0x320>
 8007822:	f8da 3000 	ldr.w	r3, [sl]
 8007826:	ea49 0903 	orr.w	r9, r9, r3
 800782a:	f019 0f01 	tst.w	r9, #1
 800782e:	d10e      	bne.n	800784e <__gethex+0x33e>
 8007830:	f045 0510 	orr.w	r5, r5, #16
 8007834:	e032      	b.n	800789c <__gethex+0x38c>
 8007836:	f04f 0901 	mov.w	r9, #1
 800783a:	e7d1      	b.n	80077e0 <__gethex+0x2d0>
 800783c:	2501      	movs	r5, #1
 800783e:	e7e2      	b.n	8007806 <__gethex+0x2f6>
 8007840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007842:	f1c3 0301 	rsb	r3, r3, #1
 8007846:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <__gethex+0x320>
 800784e:	f04f 0c00 	mov.w	ip, #0
 8007852:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007856:	f104 0314 	add.w	r3, r4, #20
 800785a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800785e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007862:	4618      	mov	r0, r3
 8007864:	f853 2b04 	ldr.w	r2, [r3], #4
 8007868:	f1b2 3fff 	cmp.w	r2, #4294967295
 800786c:	d01b      	beq.n	80078a6 <__gethex+0x396>
 800786e:	3201      	adds	r2, #1
 8007870:	6002      	str	r2, [r0, #0]
 8007872:	2d02      	cmp	r5, #2
 8007874:	f104 0314 	add.w	r3, r4, #20
 8007878:	d13c      	bne.n	80078f4 <__gethex+0x3e4>
 800787a:	f8d8 2000 	ldr.w	r2, [r8]
 800787e:	3a01      	subs	r2, #1
 8007880:	42b2      	cmp	r2, r6
 8007882:	d109      	bne.n	8007898 <__gethex+0x388>
 8007884:	2201      	movs	r2, #1
 8007886:	1171      	asrs	r1, r6, #5
 8007888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800788c:	f006 061f 	and.w	r6, r6, #31
 8007890:	fa02 f606 	lsl.w	r6, r2, r6
 8007894:	421e      	tst	r6, r3
 8007896:	d13a      	bne.n	800790e <__gethex+0x3fe>
 8007898:	f045 0520 	orr.w	r5, r5, #32
 800789c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800789e:	601c      	str	r4, [r3, #0]
 80078a0:	9b02      	ldr	r3, [sp, #8]
 80078a2:	601f      	str	r7, [r3, #0]
 80078a4:	e6b0      	b.n	8007608 <__gethex+0xf8>
 80078a6:	4299      	cmp	r1, r3
 80078a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80078ac:	d8d9      	bhi.n	8007862 <__gethex+0x352>
 80078ae:	68a3      	ldr	r3, [r4, #8]
 80078b0:	459b      	cmp	fp, r3
 80078b2:	db17      	blt.n	80078e4 <__gethex+0x3d4>
 80078b4:	6861      	ldr	r1, [r4, #4]
 80078b6:	9801      	ldr	r0, [sp, #4]
 80078b8:	3101      	adds	r1, #1
 80078ba:	f000 f9c3 	bl	8007c44 <_Balloc>
 80078be:	4681      	mov	r9, r0
 80078c0:	b918      	cbnz	r0, 80078ca <__gethex+0x3ba>
 80078c2:	4602      	mov	r2, r0
 80078c4:	2184      	movs	r1, #132	@ 0x84
 80078c6:	4b19      	ldr	r3, [pc, #100]	@ (800792c <__gethex+0x41c>)
 80078c8:	e6c5      	b.n	8007656 <__gethex+0x146>
 80078ca:	6922      	ldr	r2, [r4, #16]
 80078cc:	f104 010c 	add.w	r1, r4, #12
 80078d0:	3202      	adds	r2, #2
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	300c      	adds	r0, #12
 80078d6:	f7fe ff06 	bl	80066e6 <memcpy>
 80078da:	4621      	mov	r1, r4
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	f000 f9f1 	bl	8007cc4 <_Bfree>
 80078e2:	464c      	mov	r4, r9
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	6122      	str	r2, [r4, #16]
 80078ea:	2201      	movs	r2, #1
 80078ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078f0:	615a      	str	r2, [r3, #20]
 80078f2:	e7be      	b.n	8007872 <__gethex+0x362>
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	455a      	cmp	r2, fp
 80078f8:	dd0b      	ble.n	8007912 <__gethex+0x402>
 80078fa:	2101      	movs	r1, #1
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7ff fd9f 	bl	8007440 <rshift>
 8007902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007906:	3701      	adds	r7, #1
 8007908:	42bb      	cmp	r3, r7
 800790a:	f6ff aee0 	blt.w	80076ce <__gethex+0x1be>
 800790e:	2501      	movs	r5, #1
 8007910:	e7c2      	b.n	8007898 <__gethex+0x388>
 8007912:	f016 061f 	ands.w	r6, r6, #31
 8007916:	d0fa      	beq.n	800790e <__gethex+0x3fe>
 8007918:	4453      	add	r3, sl
 800791a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800791e:	f000 fa83 	bl	8007e28 <__hi0bits>
 8007922:	f1c6 0620 	rsb	r6, r6, #32
 8007926:	42b0      	cmp	r0, r6
 8007928:	dbe7      	blt.n	80078fa <__gethex+0x3ea>
 800792a:	e7f0      	b.n	800790e <__gethex+0x3fe>
 800792c:	08009541 	.word	0x08009541

08007930 <L_shift>:
 8007930:	f1c2 0208 	rsb	r2, r2, #8
 8007934:	0092      	lsls	r2, r2, #2
 8007936:	b570      	push	{r4, r5, r6, lr}
 8007938:	f1c2 0620 	rsb	r6, r2, #32
 800793c:	6843      	ldr	r3, [r0, #4]
 800793e:	6804      	ldr	r4, [r0, #0]
 8007940:	fa03 f506 	lsl.w	r5, r3, r6
 8007944:	432c      	orrs	r4, r5
 8007946:	40d3      	lsrs	r3, r2
 8007948:	6004      	str	r4, [r0, #0]
 800794a:	f840 3f04 	str.w	r3, [r0, #4]!
 800794e:	4288      	cmp	r0, r1
 8007950:	d3f4      	bcc.n	800793c <L_shift+0xc>
 8007952:	bd70      	pop	{r4, r5, r6, pc}

08007954 <__match>:
 8007954:	b530      	push	{r4, r5, lr}
 8007956:	6803      	ldr	r3, [r0, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	b914      	cbnz	r4, 8007966 <__match+0x12>
 8007960:	6003      	str	r3, [r0, #0]
 8007962:	2001      	movs	r0, #1
 8007964:	bd30      	pop	{r4, r5, pc}
 8007966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800796e:	2d19      	cmp	r5, #25
 8007970:	bf98      	it	ls
 8007972:	3220      	addls	r2, #32
 8007974:	42a2      	cmp	r2, r4
 8007976:	d0f0      	beq.n	800795a <__match+0x6>
 8007978:	2000      	movs	r0, #0
 800797a:	e7f3      	b.n	8007964 <__match+0x10>

0800797c <__hexnan>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	2500      	movs	r5, #0
 8007982:	680b      	ldr	r3, [r1, #0]
 8007984:	4682      	mov	sl, r0
 8007986:	115e      	asrs	r6, r3, #5
 8007988:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800798c:	f013 031f 	ands.w	r3, r3, #31
 8007990:	bf18      	it	ne
 8007992:	3604      	addne	r6, #4
 8007994:	1f37      	subs	r7, r6, #4
 8007996:	4690      	mov	r8, r2
 8007998:	46b9      	mov	r9, r7
 800799a:	463c      	mov	r4, r7
 800799c:	46ab      	mov	fp, r5
 800799e:	b087      	sub	sp, #28
 80079a0:	6801      	ldr	r1, [r0, #0]
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80079a8:	9502      	str	r5, [sp, #8]
 80079aa:	784a      	ldrb	r2, [r1, #1]
 80079ac:	1c4b      	adds	r3, r1, #1
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	b342      	cbz	r2, 8007a04 <__hexnan+0x88>
 80079b2:	4610      	mov	r0, r2
 80079b4:	9105      	str	r1, [sp, #20]
 80079b6:	9204      	str	r2, [sp, #16]
 80079b8:	f7ff fd95 	bl	80074e6 <__hexdig_fun>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d151      	bne.n	8007a64 <__hexnan+0xe8>
 80079c0:	9a04      	ldr	r2, [sp, #16]
 80079c2:	9905      	ldr	r1, [sp, #20]
 80079c4:	2a20      	cmp	r2, #32
 80079c6:	d818      	bhi.n	80079fa <__hexnan+0x7e>
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	459b      	cmp	fp, r3
 80079cc:	dd13      	ble.n	80079f6 <__hexnan+0x7a>
 80079ce:	454c      	cmp	r4, r9
 80079d0:	d206      	bcs.n	80079e0 <__hexnan+0x64>
 80079d2:	2d07      	cmp	r5, #7
 80079d4:	dc04      	bgt.n	80079e0 <__hexnan+0x64>
 80079d6:	462a      	mov	r2, r5
 80079d8:	4649      	mov	r1, r9
 80079da:	4620      	mov	r0, r4
 80079dc:	f7ff ffa8 	bl	8007930 <L_shift>
 80079e0:	4544      	cmp	r4, r8
 80079e2:	d952      	bls.n	8007a8a <__hexnan+0x10e>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f1a4 0904 	sub.w	r9, r4, #4
 80079ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80079ee:	461d      	mov	r5, r3
 80079f0:	464c      	mov	r4, r9
 80079f2:	f8cd b008 	str.w	fp, [sp, #8]
 80079f6:	9903      	ldr	r1, [sp, #12]
 80079f8:	e7d7      	b.n	80079aa <__hexnan+0x2e>
 80079fa:	2a29      	cmp	r2, #41	@ 0x29
 80079fc:	d157      	bne.n	8007aae <__hexnan+0x132>
 80079fe:	3102      	adds	r1, #2
 8007a00:	f8ca 1000 	str.w	r1, [sl]
 8007a04:	f1bb 0f00 	cmp.w	fp, #0
 8007a08:	d051      	beq.n	8007aae <__hexnan+0x132>
 8007a0a:	454c      	cmp	r4, r9
 8007a0c:	d206      	bcs.n	8007a1c <__hexnan+0xa0>
 8007a0e:	2d07      	cmp	r5, #7
 8007a10:	dc04      	bgt.n	8007a1c <__hexnan+0xa0>
 8007a12:	462a      	mov	r2, r5
 8007a14:	4649      	mov	r1, r9
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7ff ff8a 	bl	8007930 <L_shift>
 8007a1c:	4544      	cmp	r4, r8
 8007a1e:	d936      	bls.n	8007a8e <__hexnan+0x112>
 8007a20:	4623      	mov	r3, r4
 8007a22:	f1a8 0204 	sub.w	r2, r8, #4
 8007a26:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a2a:	429f      	cmp	r7, r3
 8007a2c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a30:	d2f9      	bcs.n	8007a26 <__hexnan+0xaa>
 8007a32:	1b3b      	subs	r3, r7, r4
 8007a34:	f023 0303 	bic.w	r3, r3, #3
 8007a38:	3304      	adds	r3, #4
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	3e03      	subs	r6, #3
 8007a3e:	42b4      	cmp	r4, r6
 8007a40:	bf88      	it	hi
 8007a42:	2304      	movhi	r3, #4
 8007a44:	2200      	movs	r2, #0
 8007a46:	4443      	add	r3, r8
 8007a48:	f843 2b04 	str.w	r2, [r3], #4
 8007a4c:	429f      	cmp	r7, r3
 8007a4e:	d2fb      	bcs.n	8007a48 <__hexnan+0xcc>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	b91b      	cbnz	r3, 8007a5c <__hexnan+0xe0>
 8007a54:	4547      	cmp	r7, r8
 8007a56:	d128      	bne.n	8007aaa <__hexnan+0x12e>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	2005      	movs	r0, #5
 8007a5e:	b007      	add	sp, #28
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	3501      	adds	r5, #1
 8007a66:	2d08      	cmp	r5, #8
 8007a68:	f10b 0b01 	add.w	fp, fp, #1
 8007a6c:	dd06      	ble.n	8007a7c <__hexnan+0x100>
 8007a6e:	4544      	cmp	r4, r8
 8007a70:	d9c1      	bls.n	80079f6 <__hexnan+0x7a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2501      	movs	r5, #1
 8007a76:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a7a:	3c04      	subs	r4, #4
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	f000 000f 	and.w	r0, r0, #15
 8007a82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	e7b5      	b.n	80079f6 <__hexnan+0x7a>
 8007a8a:	2508      	movs	r5, #8
 8007a8c:	e7b3      	b.n	80079f6 <__hexnan+0x7a>
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0dd      	beq.n	8007a50 <__hexnan+0xd4>
 8007a94:	f04f 32ff 	mov.w	r2, #4294967295
 8007a98:	f1c3 0320 	rsb	r3, r3, #32
 8007a9c:	40da      	lsrs	r2, r3
 8007a9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007aa8:	e7d2      	b.n	8007a50 <__hexnan+0xd4>
 8007aaa:	3f04      	subs	r7, #4
 8007aac:	e7d0      	b.n	8007a50 <__hexnan+0xd4>
 8007aae:	2004      	movs	r0, #4
 8007ab0:	e7d5      	b.n	8007a5e <__hexnan+0xe2>
	...

08007ab4 <malloc>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <malloc+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f000 b825 	b.w	8007b08 <_malloc_r>
 8007abe:	bf00      	nop
 8007ac0:	200001a4 	.word	0x200001a4

08007ac4 <sbrk_aligned>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b04 <sbrk_aligned+0x40>)
 8007ac8:	460c      	mov	r4, r1
 8007aca:	6831      	ldr	r1, [r6, #0]
 8007acc:	4605      	mov	r5, r0
 8007ace:	b911      	cbnz	r1, 8007ad6 <sbrk_aligned+0x12>
 8007ad0:	f000 ff84 	bl	80089dc <_sbrk_r>
 8007ad4:	6030      	str	r0, [r6, #0]
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 ff7f 	bl	80089dc <_sbrk_r>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	d103      	bne.n	8007aea <sbrk_aligned+0x26>
 8007ae2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
 8007aea:	1cc4      	adds	r4, r0, #3
 8007aec:	f024 0403 	bic.w	r4, r4, #3
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d0f8      	beq.n	8007ae6 <sbrk_aligned+0x22>
 8007af4:	1a21      	subs	r1, r4, r0
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 ff70 	bl	80089dc <_sbrk_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d1f2      	bne.n	8007ae6 <sbrk_aligned+0x22>
 8007b00:	e7ef      	b.n	8007ae2 <sbrk_aligned+0x1e>
 8007b02:	bf00      	nop
 8007b04:	20000a18 	.word	0x20000a18

08007b08 <_malloc_r>:
 8007b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	1ccd      	adds	r5, r1, #3
 8007b0e:	f025 0503 	bic.w	r5, r5, #3
 8007b12:	3508      	adds	r5, #8
 8007b14:	2d0c      	cmp	r5, #12
 8007b16:	bf38      	it	cc
 8007b18:	250c      	movcc	r5, #12
 8007b1a:	2d00      	cmp	r5, #0
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	db01      	blt.n	8007b24 <_malloc_r+0x1c>
 8007b20:	42a9      	cmp	r1, r5
 8007b22:	d904      	bls.n	8007b2e <_malloc_r+0x26>
 8007b24:	230c      	movs	r3, #12
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c04 <_malloc_r+0xfc>
 8007b32:	f000 f87b 	bl	8007c2c <__malloc_lock>
 8007b36:	f8d8 3000 	ldr.w	r3, [r8]
 8007b3a:	461c      	mov	r4, r3
 8007b3c:	bb44      	cbnz	r4, 8007b90 <_malloc_r+0x88>
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff ffbf 	bl	8007ac4 <sbrk_aligned>
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	4604      	mov	r4, r0
 8007b4a:	d158      	bne.n	8007bfe <_malloc_r+0xf6>
 8007b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b50:	4627      	mov	r7, r4
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	d143      	bne.n	8007bde <_malloc_r+0xd6>
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	d04b      	beq.n	8007bf2 <_malloc_r+0xea>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	4630      	mov	r0, r6
 8007b60:	eb04 0903 	add.w	r9, r4, r3
 8007b64:	f000 ff3a 	bl	80089dc <_sbrk_r>
 8007b68:	4581      	cmp	r9, r0
 8007b6a:	d142      	bne.n	8007bf2 <_malloc_r+0xea>
 8007b6c:	6821      	ldr	r1, [r4, #0]
 8007b6e:	4630      	mov	r0, r6
 8007b70:	1a6d      	subs	r5, r5, r1
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7ff ffa6 	bl	8007ac4 <sbrk_aligned>
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d03a      	beq.n	8007bf2 <_malloc_r+0xea>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	442b      	add	r3, r5
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	f8d8 3000 	ldr.w	r3, [r8]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	bb62      	cbnz	r2, 8007be4 <_malloc_r+0xdc>
 8007b8a:	f8c8 7000 	str.w	r7, [r8]
 8007b8e:	e00f      	b.n	8007bb0 <_malloc_r+0xa8>
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	1b52      	subs	r2, r2, r5
 8007b94:	d420      	bmi.n	8007bd8 <_malloc_r+0xd0>
 8007b96:	2a0b      	cmp	r2, #11
 8007b98:	d917      	bls.n	8007bca <_malloc_r+0xc2>
 8007b9a:	1961      	adds	r1, r4, r5
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	6025      	str	r5, [r4, #0]
 8007ba0:	bf18      	it	ne
 8007ba2:	6059      	strne	r1, [r3, #4]
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	bf08      	it	eq
 8007ba8:	f8c8 1000 	streq.w	r1, [r8]
 8007bac:	5162      	str	r2, [r4, r5]
 8007bae:	604b      	str	r3, [r1, #4]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f841 	bl	8007c38 <__malloc_unlock>
 8007bb6:	f104 000b 	add.w	r0, r4, #11
 8007bba:	1d23      	adds	r3, r4, #4
 8007bbc:	f020 0007 	bic.w	r0, r0, #7
 8007bc0:	1ac2      	subs	r2, r0, r3
 8007bc2:	bf1c      	itt	ne
 8007bc4:	1a1b      	subne	r3, r3, r0
 8007bc6:	50a3      	strne	r3, [r4, r2]
 8007bc8:	e7af      	b.n	8007b2a <_malloc_r+0x22>
 8007bca:	6862      	ldr	r2, [r4, #4]
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	bf0c      	ite	eq
 8007bd0:	f8c8 2000 	streq.w	r2, [r8]
 8007bd4:	605a      	strne	r2, [r3, #4]
 8007bd6:	e7eb      	b.n	8007bb0 <_malloc_r+0xa8>
 8007bd8:	4623      	mov	r3, r4
 8007bda:	6864      	ldr	r4, [r4, #4]
 8007bdc:	e7ae      	b.n	8007b3c <_malloc_r+0x34>
 8007bde:	463c      	mov	r4, r7
 8007be0:	687f      	ldr	r7, [r7, #4]
 8007be2:	e7b6      	b.n	8007b52 <_malloc_r+0x4a>
 8007be4:	461a      	mov	r2, r3
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d1fb      	bne.n	8007be4 <_malloc_r+0xdc>
 8007bec:	2300      	movs	r3, #0
 8007bee:	6053      	str	r3, [r2, #4]
 8007bf0:	e7de      	b.n	8007bb0 <_malloc_r+0xa8>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	f000 f81e 	bl	8007c38 <__malloc_unlock>
 8007bfc:	e794      	b.n	8007b28 <_malloc_r+0x20>
 8007bfe:	6005      	str	r5, [r0, #0]
 8007c00:	e7d6      	b.n	8007bb0 <_malloc_r+0xa8>
 8007c02:	bf00      	nop
 8007c04:	20000a1c 	.word	0x20000a1c

08007c08 <__ascii_mbtowc>:
 8007c08:	b082      	sub	sp, #8
 8007c0a:	b901      	cbnz	r1, 8007c0e <__ascii_mbtowc+0x6>
 8007c0c:	a901      	add	r1, sp, #4
 8007c0e:	b142      	cbz	r2, 8007c22 <__ascii_mbtowc+0x1a>
 8007c10:	b14b      	cbz	r3, 8007c26 <__ascii_mbtowc+0x1e>
 8007c12:	7813      	ldrb	r3, [r2, #0]
 8007c14:	600b      	str	r3, [r1, #0]
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	1e10      	subs	r0, r2, #0
 8007c1a:	bf18      	it	ne
 8007c1c:	2001      	movne	r0, #1
 8007c1e:	b002      	add	sp, #8
 8007c20:	4770      	bx	lr
 8007c22:	4610      	mov	r0, r2
 8007c24:	e7fb      	b.n	8007c1e <__ascii_mbtowc+0x16>
 8007c26:	f06f 0001 	mvn.w	r0, #1
 8007c2a:	e7f8      	b.n	8007c1e <__ascii_mbtowc+0x16>

08007c2c <__malloc_lock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__malloc_lock+0x8>)
 8007c2e:	f7fe bd4a 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	20000a14 	.word	0x20000a14

08007c38 <__malloc_unlock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	@ (8007c40 <__malloc_unlock+0x8>)
 8007c3a:	f7fe bd45 	b.w	80066c8 <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20000a14 	.word	0x20000a14

08007c44 <_Balloc>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	69c6      	ldr	r6, [r0, #28]
 8007c48:	4604      	mov	r4, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	b976      	cbnz	r6, 8007c6c <_Balloc+0x28>
 8007c4e:	2010      	movs	r0, #16
 8007c50:	f7ff ff30 	bl	8007ab4 <malloc>
 8007c54:	4602      	mov	r2, r0
 8007c56:	61e0      	str	r0, [r4, #28]
 8007c58:	b920      	cbnz	r0, 8007c64 <_Balloc+0x20>
 8007c5a:	216b      	movs	r1, #107	@ 0x6b
 8007c5c:	4b17      	ldr	r3, [pc, #92]	@ (8007cbc <_Balloc+0x78>)
 8007c5e:	4818      	ldr	r0, [pc, #96]	@ (8007cc0 <_Balloc+0x7c>)
 8007c60:	f000 fecc 	bl	80089fc <__assert_func>
 8007c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c68:	6006      	str	r6, [r0, #0]
 8007c6a:	60c6      	str	r6, [r0, #12]
 8007c6c:	69e6      	ldr	r6, [r4, #28]
 8007c6e:	68f3      	ldr	r3, [r6, #12]
 8007c70:	b183      	cbz	r3, 8007c94 <_Balloc+0x50>
 8007c72:	69e3      	ldr	r3, [r4, #28]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c7a:	b9b8      	cbnz	r0, 8007cac <_Balloc+0x68>
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c82:	1d72      	adds	r2, r6, #5
 8007c84:	4620      	mov	r0, r4
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	f000 fed6 	bl	8008a38 <_calloc_r>
 8007c8c:	b160      	cbz	r0, 8007ca8 <_Balloc+0x64>
 8007c8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c92:	e00e      	b.n	8007cb2 <_Balloc+0x6e>
 8007c94:	2221      	movs	r2, #33	@ 0x21
 8007c96:	2104      	movs	r1, #4
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fecd 	bl	8008a38 <_calloc_r>
 8007c9e:	69e3      	ldr	r3, [r4, #28]
 8007ca0:	60f0      	str	r0, [r6, #12]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e4      	bne.n	8007c72 <_Balloc+0x2e>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	6802      	ldr	r2, [r0, #0]
 8007cae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cb8:	e7f7      	b.n	8007caa <_Balloc+0x66>
 8007cba:	bf00      	nop
 8007cbc:	080094d2 	.word	0x080094d2
 8007cc0:	080095b2 	.word	0x080095b2

08007cc4 <_Bfree>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	69c6      	ldr	r6, [r0, #28]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b976      	cbnz	r6, 8007cec <_Bfree+0x28>
 8007cce:	2010      	movs	r0, #16
 8007cd0:	f7ff fef0 	bl	8007ab4 <malloc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	61e8      	str	r0, [r5, #28]
 8007cd8:	b920      	cbnz	r0, 8007ce4 <_Bfree+0x20>
 8007cda:	218f      	movs	r1, #143	@ 0x8f
 8007cdc:	4b08      	ldr	r3, [pc, #32]	@ (8007d00 <_Bfree+0x3c>)
 8007cde:	4809      	ldr	r0, [pc, #36]	@ (8007d04 <_Bfree+0x40>)
 8007ce0:	f000 fe8c 	bl	80089fc <__assert_func>
 8007ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce8:	6006      	str	r6, [r0, #0]
 8007cea:	60c6      	str	r6, [r0, #12]
 8007cec:	b13c      	cbz	r4, 8007cfe <_Bfree+0x3a>
 8007cee:	69eb      	ldr	r3, [r5, #28]
 8007cf0:	6862      	ldr	r2, [r4, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cf8:	6021      	str	r1, [r4, #0]
 8007cfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	080094d2 	.word	0x080094d2
 8007d04:	080095b2 	.word	0x080095b2

08007d08 <__multadd>:
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	461e      	mov	r6, r3
 8007d12:	2000      	movs	r0, #0
 8007d14:	690d      	ldr	r5, [r1, #16]
 8007d16:	f101 0c14 	add.w	ip, r1, #20
 8007d1a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d1e:	3001      	adds	r0, #1
 8007d20:	b299      	uxth	r1, r3
 8007d22:	fb02 6101 	mla	r1, r2, r1, r6
 8007d26:	0c1e      	lsrs	r6, r3, #16
 8007d28:	0c0b      	lsrs	r3, r1, #16
 8007d2a:	fb02 3306 	mla	r3, r2, r6, r3
 8007d2e:	b289      	uxth	r1, r1
 8007d30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d34:	4285      	cmp	r5, r0
 8007d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d3e:	dcec      	bgt.n	8007d1a <__multadd+0x12>
 8007d40:	b30e      	cbz	r6, 8007d86 <__multadd+0x7e>
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	dc19      	bgt.n	8007d7c <__multadd+0x74>
 8007d48:	6861      	ldr	r1, [r4, #4]
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	f7ff ff79 	bl	8007c44 <_Balloc>
 8007d52:	4680      	mov	r8, r0
 8007d54:	b928      	cbnz	r0, 8007d62 <__multadd+0x5a>
 8007d56:	4602      	mov	r2, r0
 8007d58:	21ba      	movs	r1, #186	@ 0xba
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <__multadd+0x84>)
 8007d5c:	480c      	ldr	r0, [pc, #48]	@ (8007d90 <__multadd+0x88>)
 8007d5e:	f000 fe4d 	bl	80089fc <__assert_func>
 8007d62:	6922      	ldr	r2, [r4, #16]
 8007d64:	f104 010c 	add.w	r1, r4, #12
 8007d68:	3202      	adds	r2, #2
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	300c      	adds	r0, #12
 8007d6e:	f7fe fcba 	bl	80066e6 <memcpy>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff ffa5 	bl	8007cc4 <_Bfree>
 8007d7a:	4644      	mov	r4, r8
 8007d7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d80:	3501      	adds	r5, #1
 8007d82:	615e      	str	r6, [r3, #20]
 8007d84:	6125      	str	r5, [r4, #16]
 8007d86:	4620      	mov	r0, r4
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8c:	08009541 	.word	0x08009541
 8007d90:	080095b2 	.word	0x080095b2

08007d94 <__s2b>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4615      	mov	r5, r2
 8007d9a:	2209      	movs	r2, #9
 8007d9c:	461f      	mov	r7, r3
 8007d9e:	3308      	adds	r3, #8
 8007da0:	460c      	mov	r4, r1
 8007da2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da6:	4606      	mov	r6, r0
 8007da8:	2201      	movs	r2, #1
 8007daa:	2100      	movs	r1, #0
 8007dac:	429a      	cmp	r2, r3
 8007dae:	db09      	blt.n	8007dc4 <__s2b+0x30>
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff ff47 	bl	8007c44 <_Balloc>
 8007db6:	b940      	cbnz	r0, 8007dca <__s2b+0x36>
 8007db8:	4602      	mov	r2, r0
 8007dba:	21d3      	movs	r1, #211	@ 0xd3
 8007dbc:	4b18      	ldr	r3, [pc, #96]	@ (8007e20 <__s2b+0x8c>)
 8007dbe:	4819      	ldr	r0, [pc, #100]	@ (8007e24 <__s2b+0x90>)
 8007dc0:	f000 fe1c 	bl	80089fc <__assert_func>
 8007dc4:	0052      	lsls	r2, r2, #1
 8007dc6:	3101      	adds	r1, #1
 8007dc8:	e7f0      	b.n	8007dac <__s2b+0x18>
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	2d09      	cmp	r5, #9
 8007dce:	6143      	str	r3, [r0, #20]
 8007dd0:	f04f 0301 	mov.w	r3, #1
 8007dd4:	6103      	str	r3, [r0, #16]
 8007dd6:	dd16      	ble.n	8007e06 <__s2b+0x72>
 8007dd8:	f104 0909 	add.w	r9, r4, #9
 8007ddc:	46c8      	mov	r8, r9
 8007dde:	442c      	add	r4, r5
 8007de0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007de4:	4601      	mov	r1, r0
 8007de6:	220a      	movs	r2, #10
 8007de8:	4630      	mov	r0, r6
 8007dea:	3b30      	subs	r3, #48	@ 0x30
 8007dec:	f7ff ff8c 	bl	8007d08 <__multadd>
 8007df0:	45a0      	cmp	r8, r4
 8007df2:	d1f5      	bne.n	8007de0 <__s2b+0x4c>
 8007df4:	f1a5 0408 	sub.w	r4, r5, #8
 8007df8:	444c      	add	r4, r9
 8007dfa:	1b2d      	subs	r5, r5, r4
 8007dfc:	1963      	adds	r3, r4, r5
 8007dfe:	42bb      	cmp	r3, r7
 8007e00:	db04      	blt.n	8007e0c <__s2b+0x78>
 8007e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e06:	2509      	movs	r5, #9
 8007e08:	340a      	adds	r4, #10
 8007e0a:	e7f6      	b.n	8007dfa <__s2b+0x66>
 8007e0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e10:	4601      	mov	r1, r0
 8007e12:	220a      	movs	r2, #10
 8007e14:	4630      	mov	r0, r6
 8007e16:	3b30      	subs	r3, #48	@ 0x30
 8007e18:	f7ff ff76 	bl	8007d08 <__multadd>
 8007e1c:	e7ee      	b.n	8007dfc <__s2b+0x68>
 8007e1e:	bf00      	nop
 8007e20:	08009541 	.word	0x08009541
 8007e24:	080095b2 	.word	0x080095b2

08007e28 <__hi0bits>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e2e:	bf3a      	itte	cc
 8007e30:	0403      	lslcc	r3, r0, #16
 8007e32:	2010      	movcc	r0, #16
 8007e34:	2000      	movcs	r0, #0
 8007e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e3a:	bf3c      	itt	cc
 8007e3c:	021b      	lslcc	r3, r3, #8
 8007e3e:	3008      	addcc	r0, #8
 8007e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e44:	bf3c      	itt	cc
 8007e46:	011b      	lslcc	r3, r3, #4
 8007e48:	3004      	addcc	r0, #4
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4e:	bf3c      	itt	cc
 8007e50:	009b      	lslcc	r3, r3, #2
 8007e52:	3002      	addcc	r0, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	db05      	blt.n	8007e64 <__hi0bits+0x3c>
 8007e58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e5c:	f100 0001 	add.w	r0, r0, #1
 8007e60:	bf08      	it	eq
 8007e62:	2020      	moveq	r0, #32
 8007e64:	4770      	bx	lr

08007e66 <__lo0bits>:
 8007e66:	6803      	ldr	r3, [r0, #0]
 8007e68:	4602      	mov	r2, r0
 8007e6a:	f013 0007 	ands.w	r0, r3, #7
 8007e6e:	d00b      	beq.n	8007e88 <__lo0bits+0x22>
 8007e70:	07d9      	lsls	r1, r3, #31
 8007e72:	d421      	bmi.n	8007eb8 <__lo0bits+0x52>
 8007e74:	0798      	lsls	r0, r3, #30
 8007e76:	bf49      	itett	mi
 8007e78:	085b      	lsrmi	r3, r3, #1
 8007e7a:	089b      	lsrpl	r3, r3, #2
 8007e7c:	2001      	movmi	r0, #1
 8007e7e:	6013      	strmi	r3, [r2, #0]
 8007e80:	bf5c      	itt	pl
 8007e82:	2002      	movpl	r0, #2
 8007e84:	6013      	strpl	r3, [r2, #0]
 8007e86:	4770      	bx	lr
 8007e88:	b299      	uxth	r1, r3
 8007e8a:	b909      	cbnz	r1, 8007e90 <__lo0bits+0x2a>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	0c1b      	lsrs	r3, r3, #16
 8007e90:	b2d9      	uxtb	r1, r3
 8007e92:	b909      	cbnz	r1, 8007e98 <__lo0bits+0x32>
 8007e94:	3008      	adds	r0, #8
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	0719      	lsls	r1, r3, #28
 8007e9a:	bf04      	itt	eq
 8007e9c:	091b      	lsreq	r3, r3, #4
 8007e9e:	3004      	addeq	r0, #4
 8007ea0:	0799      	lsls	r1, r3, #30
 8007ea2:	bf04      	itt	eq
 8007ea4:	089b      	lsreq	r3, r3, #2
 8007ea6:	3002      	addeq	r0, #2
 8007ea8:	07d9      	lsls	r1, r3, #31
 8007eaa:	d403      	bmi.n	8007eb4 <__lo0bits+0x4e>
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	f100 0001 	add.w	r0, r0, #1
 8007eb2:	d003      	beq.n	8007ebc <__lo0bits+0x56>
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4770      	bx	lr
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	2020      	movs	r0, #32
 8007ebe:	4770      	bx	lr

08007ec0 <__i2b>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff febd 	bl	8007c44 <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__i2b+0x1a>
 8007ece:	f240 1145 	movw	r1, #325	@ 0x145
 8007ed2:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <__i2b+0x24>)
 8007ed4:	4804      	ldr	r0, [pc, #16]	@ (8007ee8 <__i2b+0x28>)
 8007ed6:	f000 fd91 	bl	80089fc <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	6144      	str	r4, [r0, #20]
 8007ede:	6103      	str	r3, [r0, #16]
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08009541 	.word	0x08009541
 8007ee8:	080095b2 	.word	0x080095b2

08007eec <__multiply>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	690a      	ldr	r2, [r1, #16]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	bfa2      	ittt	ge
 8007efc:	4623      	movge	r3, r4
 8007efe:	460c      	movge	r4, r1
 8007f00:	461f      	movge	r7, r3
 8007f02:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f06:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	eb0a 0609 	add.w	r6, sl, r9
 8007f12:	42b3      	cmp	r3, r6
 8007f14:	b085      	sub	sp, #20
 8007f16:	bfb8      	it	lt
 8007f18:	3101      	addlt	r1, #1
 8007f1a:	f7ff fe93 	bl	8007c44 <_Balloc>
 8007f1e:	b930      	cbnz	r0, 8007f2e <__multiply+0x42>
 8007f20:	4602      	mov	r2, r0
 8007f22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f26:	4b43      	ldr	r3, [pc, #268]	@ (8008034 <__multiply+0x148>)
 8007f28:	4843      	ldr	r0, [pc, #268]	@ (8008038 <__multiply+0x14c>)
 8007f2a:	f000 fd67 	bl	80089fc <__assert_func>
 8007f2e:	f100 0514 	add.w	r5, r0, #20
 8007f32:	462b      	mov	r3, r5
 8007f34:	2200      	movs	r2, #0
 8007f36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f3a:	4543      	cmp	r3, r8
 8007f3c:	d321      	bcc.n	8007f82 <__multiply+0x96>
 8007f3e:	f107 0114 	add.w	r1, r7, #20
 8007f42:	f104 0214 	add.w	r2, r4, #20
 8007f46:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f4a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f4e:	9302      	str	r3, [sp, #8]
 8007f50:	1b13      	subs	r3, r2, r4
 8007f52:	3b15      	subs	r3, #21
 8007f54:	f023 0303 	bic.w	r3, r3, #3
 8007f58:	3304      	adds	r3, #4
 8007f5a:	f104 0715 	add.w	r7, r4, #21
 8007f5e:	42ba      	cmp	r2, r7
 8007f60:	bf38      	it	cc
 8007f62:	2304      	movcc	r3, #4
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	9103      	str	r1, [sp, #12]
 8007f6a:	428b      	cmp	r3, r1
 8007f6c:	d80c      	bhi.n	8007f88 <__multiply+0x9c>
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	dd03      	ble.n	8007f7a <__multiply+0x8e>
 8007f72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d05a      	beq.n	8008030 <__multiply+0x144>
 8007f7a:	6106      	str	r6, [r0, #16]
 8007f7c:	b005      	add	sp, #20
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	f843 2b04 	str.w	r2, [r3], #4
 8007f86:	e7d8      	b.n	8007f3a <__multiply+0x4e>
 8007f88:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f8c:	f1ba 0f00 	cmp.w	sl, #0
 8007f90:	d023      	beq.n	8007fda <__multiply+0xee>
 8007f92:	46a9      	mov	r9, r5
 8007f94:	f04f 0c00 	mov.w	ip, #0
 8007f98:	f104 0e14 	add.w	lr, r4, #20
 8007f9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fa0:	f8d9 3000 	ldr.w	r3, [r9]
 8007fa4:	fa1f fb87 	uxth.w	fp, r7
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	fb0a 330b 	mla	r3, sl, fp, r3
 8007fae:	4463      	add	r3, ip
 8007fb0:	f8d9 c000 	ldr.w	ip, [r9]
 8007fb4:	0c3f      	lsrs	r7, r7, #16
 8007fb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007fba:	fb0a c707 	mla	r7, sl, r7, ip
 8007fbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fc8:	4572      	cmp	r2, lr
 8007fca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fce:	f849 3b04 	str.w	r3, [r9], #4
 8007fd2:	d8e3      	bhi.n	8007f9c <__multiply+0xb0>
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	f845 c003 	str.w	ip, [r5, r3]
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	3104      	adds	r1, #4
 8007fde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fe2:	f1b9 0f00 	cmp.w	r9, #0
 8007fe6:	d021      	beq.n	800802c <__multiply+0x140>
 8007fe8:	46ae      	mov	lr, r5
 8007fea:	f04f 0a00 	mov.w	sl, #0
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	f104 0c14 	add.w	ip, r4, #20
 8007ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ff8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	fb09 770b 	mla	r7, r9, fp, r7
 8008002:	4457      	add	r7, sl
 8008004:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008008:	f84e 3b04 	str.w	r3, [lr], #4
 800800c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008014:	f8be 3000 	ldrh.w	r3, [lr]
 8008018:	4562      	cmp	r2, ip
 800801a:	fb09 330a 	mla	r3, r9, sl, r3
 800801e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008026:	d8e5      	bhi.n	8007ff4 <__multiply+0x108>
 8008028:	9f01      	ldr	r7, [sp, #4]
 800802a:	51eb      	str	r3, [r5, r7]
 800802c:	3504      	adds	r5, #4
 800802e:	e79a      	b.n	8007f66 <__multiply+0x7a>
 8008030:	3e01      	subs	r6, #1
 8008032:	e79c      	b.n	8007f6e <__multiply+0x82>
 8008034:	08009541 	.word	0x08009541
 8008038:	080095b2 	.word	0x080095b2

0800803c <__pow5mult>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4615      	mov	r5, r2
 8008042:	f012 0203 	ands.w	r2, r2, #3
 8008046:	4607      	mov	r7, r0
 8008048:	460e      	mov	r6, r1
 800804a:	d007      	beq.n	800805c <__pow5mult+0x20>
 800804c:	4c25      	ldr	r4, [pc, #148]	@ (80080e4 <__pow5mult+0xa8>)
 800804e:	3a01      	subs	r2, #1
 8008050:	2300      	movs	r3, #0
 8008052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008056:	f7ff fe57 	bl	8007d08 <__multadd>
 800805a:	4606      	mov	r6, r0
 800805c:	10ad      	asrs	r5, r5, #2
 800805e:	d03d      	beq.n	80080dc <__pow5mult+0xa0>
 8008060:	69fc      	ldr	r4, [r7, #28]
 8008062:	b97c      	cbnz	r4, 8008084 <__pow5mult+0x48>
 8008064:	2010      	movs	r0, #16
 8008066:	f7ff fd25 	bl	8007ab4 <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	61f8      	str	r0, [r7, #28]
 800806e:	b928      	cbnz	r0, 800807c <__pow5mult+0x40>
 8008070:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008074:	4b1c      	ldr	r3, [pc, #112]	@ (80080e8 <__pow5mult+0xac>)
 8008076:	481d      	ldr	r0, [pc, #116]	@ (80080ec <__pow5mult+0xb0>)
 8008078:	f000 fcc0 	bl	80089fc <__assert_func>
 800807c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008080:	6004      	str	r4, [r0, #0]
 8008082:	60c4      	str	r4, [r0, #12]
 8008084:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800808c:	b94c      	cbnz	r4, 80080a2 <__pow5mult+0x66>
 800808e:	f240 2171 	movw	r1, #625	@ 0x271
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff ff14 	bl	8007ec0 <__i2b>
 8008098:	2300      	movs	r3, #0
 800809a:	4604      	mov	r4, r0
 800809c:	f8c8 0008 	str.w	r0, [r8, #8]
 80080a0:	6003      	str	r3, [r0, #0]
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	07eb      	lsls	r3, r5, #31
 80080a8:	d50a      	bpl.n	80080c0 <__pow5mult+0x84>
 80080aa:	4631      	mov	r1, r6
 80080ac:	4622      	mov	r2, r4
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7ff ff1c 	bl	8007eec <__multiply>
 80080b4:	4680      	mov	r8, r0
 80080b6:	4631      	mov	r1, r6
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fe03 	bl	8007cc4 <_Bfree>
 80080be:	4646      	mov	r6, r8
 80080c0:	106d      	asrs	r5, r5, #1
 80080c2:	d00b      	beq.n	80080dc <__pow5mult+0xa0>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	b938      	cbnz	r0, 80080d8 <__pow5mult+0x9c>
 80080c8:	4622      	mov	r2, r4
 80080ca:	4621      	mov	r1, r4
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff ff0d 	bl	8007eec <__multiply>
 80080d2:	6020      	str	r0, [r4, #0]
 80080d4:	f8c0 9000 	str.w	r9, [r0]
 80080d8:	4604      	mov	r4, r0
 80080da:	e7e4      	b.n	80080a6 <__pow5mult+0x6a>
 80080dc:	4630      	mov	r0, r6
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	bf00      	nop
 80080e4:	0800960c 	.word	0x0800960c
 80080e8:	080094d2 	.word	0x080094d2
 80080ec:	080095b2 	.word	0x080095b2

080080f0 <__lshift>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	4607      	mov	r7, r0
 80080f8:	4691      	mov	r9, r2
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	6849      	ldr	r1, [r1, #4]
 80080fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008108:	f108 0601 	add.w	r6, r8, #1
 800810c:	42b3      	cmp	r3, r6
 800810e:	db0b      	blt.n	8008128 <__lshift+0x38>
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff fd97 	bl	8007c44 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b948      	cbnz	r0, 800812e <__lshift+0x3e>
 800811a:	4602      	mov	r2, r0
 800811c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008120:	4b27      	ldr	r3, [pc, #156]	@ (80081c0 <__lshift+0xd0>)
 8008122:	4828      	ldr	r0, [pc, #160]	@ (80081c4 <__lshift+0xd4>)
 8008124:	f000 fc6a 	bl	80089fc <__assert_func>
 8008128:	3101      	adds	r1, #1
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	e7ee      	b.n	800810c <__lshift+0x1c>
 800812e:	2300      	movs	r3, #0
 8008130:	f100 0114 	add.w	r1, r0, #20
 8008134:	f100 0210 	add.w	r2, r0, #16
 8008138:	4618      	mov	r0, r3
 800813a:	4553      	cmp	r3, sl
 800813c:	db33      	blt.n	80081a6 <__lshift+0xb6>
 800813e:	6920      	ldr	r0, [r4, #16]
 8008140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008144:	f104 0314 	add.w	r3, r4, #20
 8008148:	f019 091f 	ands.w	r9, r9, #31
 800814c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008154:	d02b      	beq.n	80081ae <__lshift+0xbe>
 8008156:	468a      	mov	sl, r1
 8008158:	2200      	movs	r2, #0
 800815a:	f1c9 0e20 	rsb	lr, r9, #32
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	fa00 f009 	lsl.w	r0, r0, r9
 8008164:	4310      	orrs	r0, r2
 8008166:	f84a 0b04 	str.w	r0, [sl], #4
 800816a:	f853 2b04 	ldr.w	r2, [r3], #4
 800816e:	459c      	cmp	ip, r3
 8008170:	fa22 f20e 	lsr.w	r2, r2, lr
 8008174:	d8f3      	bhi.n	800815e <__lshift+0x6e>
 8008176:	ebac 0304 	sub.w	r3, ip, r4
 800817a:	3b15      	subs	r3, #21
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	3304      	adds	r3, #4
 8008182:	f104 0015 	add.w	r0, r4, #21
 8008186:	4584      	cmp	ip, r0
 8008188:	bf38      	it	cc
 800818a:	2304      	movcc	r3, #4
 800818c:	50ca      	str	r2, [r1, r3]
 800818e:	b10a      	cbz	r2, 8008194 <__lshift+0xa4>
 8008190:	f108 0602 	add.w	r6, r8, #2
 8008194:	3e01      	subs	r6, #1
 8008196:	4638      	mov	r0, r7
 8008198:	4621      	mov	r1, r4
 800819a:	612e      	str	r6, [r5, #16]
 800819c:	f7ff fd92 	bl	8007cc4 <_Bfree>
 80081a0:	4628      	mov	r0, r5
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081aa:	3301      	adds	r3, #1
 80081ac:	e7c5      	b.n	800813a <__lshift+0x4a>
 80081ae:	3904      	subs	r1, #4
 80081b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b4:	459c      	cmp	ip, r3
 80081b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80081ba:	d8f9      	bhi.n	80081b0 <__lshift+0xc0>
 80081bc:	e7ea      	b.n	8008194 <__lshift+0xa4>
 80081be:	bf00      	nop
 80081c0:	08009541 	.word	0x08009541
 80081c4:	080095b2 	.word	0x080095b2

080081c8 <__mcmp>:
 80081c8:	4603      	mov	r3, r0
 80081ca:	690a      	ldr	r2, [r1, #16]
 80081cc:	6900      	ldr	r0, [r0, #16]
 80081ce:	b530      	push	{r4, r5, lr}
 80081d0:	1a80      	subs	r0, r0, r2
 80081d2:	d10e      	bne.n	80081f2 <__mcmp+0x2a>
 80081d4:	3314      	adds	r3, #20
 80081d6:	3114      	adds	r1, #20
 80081d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081e8:	4295      	cmp	r5, r2
 80081ea:	d003      	beq.n	80081f4 <__mcmp+0x2c>
 80081ec:	d205      	bcs.n	80081fa <__mcmp+0x32>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	bd30      	pop	{r4, r5, pc}
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d3f3      	bcc.n	80081e0 <__mcmp+0x18>
 80081f8:	e7fb      	b.n	80081f2 <__mcmp+0x2a>
 80081fa:	2001      	movs	r0, #1
 80081fc:	e7f9      	b.n	80081f2 <__mcmp+0x2a>
	...

08008200 <__mdiff>:
 8008200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4689      	mov	r9, r1
 8008206:	4606      	mov	r6, r0
 8008208:	4611      	mov	r1, r2
 800820a:	4648      	mov	r0, r9
 800820c:	4614      	mov	r4, r2
 800820e:	f7ff ffdb 	bl	80081c8 <__mcmp>
 8008212:	1e05      	subs	r5, r0, #0
 8008214:	d112      	bne.n	800823c <__mdiff+0x3c>
 8008216:	4629      	mov	r1, r5
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff fd13 	bl	8007c44 <_Balloc>
 800821e:	4602      	mov	r2, r0
 8008220:	b928      	cbnz	r0, 800822e <__mdiff+0x2e>
 8008222:	f240 2137 	movw	r1, #567	@ 0x237
 8008226:	4b3e      	ldr	r3, [pc, #248]	@ (8008320 <__mdiff+0x120>)
 8008228:	483e      	ldr	r0, [pc, #248]	@ (8008324 <__mdiff+0x124>)
 800822a:	f000 fbe7 	bl	80089fc <__assert_func>
 800822e:	2301      	movs	r3, #1
 8008230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008234:	4610      	mov	r0, r2
 8008236:	b003      	add	sp, #12
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	bfbc      	itt	lt
 800823e:	464b      	movlt	r3, r9
 8008240:	46a1      	movlt	r9, r4
 8008242:	4630      	mov	r0, r6
 8008244:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008248:	bfba      	itte	lt
 800824a:	461c      	movlt	r4, r3
 800824c:	2501      	movlt	r5, #1
 800824e:	2500      	movge	r5, #0
 8008250:	f7ff fcf8 	bl	8007c44 <_Balloc>
 8008254:	4602      	mov	r2, r0
 8008256:	b918      	cbnz	r0, 8008260 <__mdiff+0x60>
 8008258:	f240 2145 	movw	r1, #581	@ 0x245
 800825c:	4b30      	ldr	r3, [pc, #192]	@ (8008320 <__mdiff+0x120>)
 800825e:	e7e3      	b.n	8008228 <__mdiff+0x28>
 8008260:	f100 0b14 	add.w	fp, r0, #20
 8008264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008268:	f109 0310 	add.w	r3, r9, #16
 800826c:	60c5      	str	r5, [r0, #12]
 800826e:	f04f 0c00 	mov.w	ip, #0
 8008272:	f109 0514 	add.w	r5, r9, #20
 8008276:	46d9      	mov	r9, fp
 8008278:	6926      	ldr	r6, [r4, #16]
 800827a:	f104 0e14 	add.w	lr, r4, #20
 800827e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008282:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800828e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008292:	b281      	uxth	r1, r0
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	fa1f f38a 	uxth.w	r3, sl
 800829a:	1a5b      	subs	r3, r3, r1
 800829c:	0c00      	lsrs	r0, r0, #16
 800829e:	4463      	add	r3, ip
 80082a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082ae:	4576      	cmp	r6, lr
 80082b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082b4:	f849 3b04 	str.w	r3, [r9], #4
 80082b8:	d8e6      	bhi.n	8008288 <__mdiff+0x88>
 80082ba:	1b33      	subs	r3, r6, r4
 80082bc:	3b15      	subs	r3, #21
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	3415      	adds	r4, #21
 80082c4:	3304      	adds	r3, #4
 80082c6:	42a6      	cmp	r6, r4
 80082c8:	bf38      	it	cc
 80082ca:	2304      	movcc	r3, #4
 80082cc:	441d      	add	r5, r3
 80082ce:	445b      	add	r3, fp
 80082d0:	461e      	mov	r6, r3
 80082d2:	462c      	mov	r4, r5
 80082d4:	4544      	cmp	r4, r8
 80082d6:	d30e      	bcc.n	80082f6 <__mdiff+0xf6>
 80082d8:	f108 0103 	add.w	r1, r8, #3
 80082dc:	1b49      	subs	r1, r1, r5
 80082de:	f021 0103 	bic.w	r1, r1, #3
 80082e2:	3d03      	subs	r5, #3
 80082e4:	45a8      	cmp	r8, r5
 80082e6:	bf38      	it	cc
 80082e8:	2100      	movcc	r1, #0
 80082ea:	440b      	add	r3, r1
 80082ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082f0:	b199      	cbz	r1, 800831a <__mdiff+0x11a>
 80082f2:	6117      	str	r7, [r2, #16]
 80082f4:	e79e      	b.n	8008234 <__mdiff+0x34>
 80082f6:	46e6      	mov	lr, ip
 80082f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80082fc:	fa1f fc81 	uxth.w	ip, r1
 8008300:	44f4      	add	ip, lr
 8008302:	0c08      	lsrs	r0, r1, #16
 8008304:	4471      	add	r1, lr
 8008306:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800830a:	b289      	uxth	r1, r1
 800830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008314:	f846 1b04 	str.w	r1, [r6], #4
 8008318:	e7dc      	b.n	80082d4 <__mdiff+0xd4>
 800831a:	3f01      	subs	r7, #1
 800831c:	e7e6      	b.n	80082ec <__mdiff+0xec>
 800831e:	bf00      	nop
 8008320:	08009541 	.word	0x08009541
 8008324:	080095b2 	.word	0x080095b2

08008328 <__ulp>:
 8008328:	4b0e      	ldr	r3, [pc, #56]	@ (8008364 <__ulp+0x3c>)
 800832a:	400b      	ands	r3, r1
 800832c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc08      	bgt.n	8008346 <__ulp+0x1e>
 8008334:	425b      	negs	r3, r3
 8008336:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800833a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800833e:	da04      	bge.n	800834a <__ulp+0x22>
 8008340:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008344:	4113      	asrs	r3, r2
 8008346:	2200      	movs	r2, #0
 8008348:	e008      	b.n	800835c <__ulp+0x34>
 800834a:	f1a2 0314 	sub.w	r3, r2, #20
 800834e:	2b1e      	cmp	r3, #30
 8008350:	bfd6      	itet	le
 8008352:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008356:	2201      	movgt	r2, #1
 8008358:	40da      	lsrle	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	7ff00000 	.word	0x7ff00000

08008368 <__b2d>:
 8008368:	6902      	ldr	r2, [r0, #16]
 800836a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836c:	f100 0614 	add.w	r6, r0, #20
 8008370:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008374:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008378:	4f1e      	ldr	r7, [pc, #120]	@ (80083f4 <__b2d+0x8c>)
 800837a:	4620      	mov	r0, r4
 800837c:	f7ff fd54 	bl	8007e28 <__hi0bits>
 8008380:	4603      	mov	r3, r0
 8008382:	f1c0 0020 	rsb	r0, r0, #32
 8008386:	2b0a      	cmp	r3, #10
 8008388:	f1a2 0504 	sub.w	r5, r2, #4
 800838c:	6008      	str	r0, [r1, #0]
 800838e:	dc12      	bgt.n	80083b6 <__b2d+0x4e>
 8008390:	42ae      	cmp	r6, r5
 8008392:	bf2c      	ite	cs
 8008394:	2200      	movcs	r2, #0
 8008396:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800839a:	f1c3 0c0b 	rsb	ip, r3, #11
 800839e:	3315      	adds	r3, #21
 80083a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80083a4:	fa04 f303 	lsl.w	r3, r4, r3
 80083a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80083ac:	ea4e 0107 	orr.w	r1, lr, r7
 80083b0:	431a      	orrs	r2, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b6:	42ae      	cmp	r6, r5
 80083b8:	bf36      	itet	cc
 80083ba:	f1a2 0508 	subcc.w	r5, r2, #8
 80083be:	2200      	movcs	r2, #0
 80083c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80083c4:	3b0b      	subs	r3, #11
 80083c6:	d012      	beq.n	80083ee <__b2d+0x86>
 80083c8:	f1c3 0720 	rsb	r7, r3, #32
 80083cc:	fa22 f107 	lsr.w	r1, r2, r7
 80083d0:	409c      	lsls	r4, r3
 80083d2:	430c      	orrs	r4, r1
 80083d4:	42b5      	cmp	r5, r6
 80083d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80083da:	bf94      	ite	ls
 80083dc:	2400      	movls	r4, #0
 80083de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80083e2:	409a      	lsls	r2, r3
 80083e4:	40fc      	lsrs	r4, r7
 80083e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80083ea:	4322      	orrs	r2, r4
 80083ec:	e7e1      	b.n	80083b2 <__b2d+0x4a>
 80083ee:	ea44 0107 	orr.w	r1, r4, r7
 80083f2:	e7de      	b.n	80083b2 <__b2d+0x4a>
 80083f4:	3ff00000 	.word	0x3ff00000

080083f8 <__d2b>:
 80083f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80083fc:	2101      	movs	r1, #1
 80083fe:	4690      	mov	r8, r2
 8008400:	4699      	mov	r9, r3
 8008402:	9e08      	ldr	r6, [sp, #32]
 8008404:	f7ff fc1e 	bl	8007c44 <_Balloc>
 8008408:	4604      	mov	r4, r0
 800840a:	b930      	cbnz	r0, 800841a <__d2b+0x22>
 800840c:	4602      	mov	r2, r0
 800840e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008412:	4b23      	ldr	r3, [pc, #140]	@ (80084a0 <__d2b+0xa8>)
 8008414:	4823      	ldr	r0, [pc, #140]	@ (80084a4 <__d2b+0xac>)
 8008416:	f000 faf1 	bl	80089fc <__assert_func>
 800841a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800841e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008422:	b10d      	cbz	r5, 8008428 <__d2b+0x30>
 8008424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	f1b8 0300 	subs.w	r3, r8, #0
 800842e:	d024      	beq.n	800847a <__d2b+0x82>
 8008430:	4668      	mov	r0, sp
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	f7ff fd17 	bl	8007e66 <__lo0bits>
 8008438:	e9dd 1200 	ldrd	r1, r2, [sp]
 800843c:	b1d8      	cbz	r0, 8008476 <__d2b+0x7e>
 800843e:	f1c0 0320 	rsb	r3, r0, #32
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	430b      	orrs	r3, r1
 8008448:	40c2      	lsrs	r2, r0
 800844a:	6163      	str	r3, [r4, #20]
 800844c:	9201      	str	r2, [sp, #4]
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf0c      	ite	eq
 8008454:	2201      	moveq	r2, #1
 8008456:	2202      	movne	r2, #2
 8008458:	61a3      	str	r3, [r4, #24]
 800845a:	6122      	str	r2, [r4, #16]
 800845c:	b1ad      	cbz	r5, 800848a <__d2b+0x92>
 800845e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008462:	4405      	add	r5, r0
 8008464:	6035      	str	r5, [r6, #0]
 8008466:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800846a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846c:	6018      	str	r0, [r3, #0]
 800846e:	4620      	mov	r0, r4
 8008470:	b002      	add	sp, #8
 8008472:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008476:	6161      	str	r1, [r4, #20]
 8008478:	e7e9      	b.n	800844e <__d2b+0x56>
 800847a:	a801      	add	r0, sp, #4
 800847c:	f7ff fcf3 	bl	8007e66 <__lo0bits>
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	6163      	str	r3, [r4, #20]
 8008486:	3020      	adds	r0, #32
 8008488:	e7e7      	b.n	800845a <__d2b+0x62>
 800848a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800848e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008492:	6030      	str	r0, [r6, #0]
 8008494:	6918      	ldr	r0, [r3, #16]
 8008496:	f7ff fcc7 	bl	8007e28 <__hi0bits>
 800849a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800849e:	e7e4      	b.n	800846a <__d2b+0x72>
 80084a0:	08009541 	.word	0x08009541
 80084a4:	080095b2 	.word	0x080095b2

080084a8 <__ratio>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	b085      	sub	sp, #20
 80084ae:	e9cd 1000 	strd	r1, r0, [sp]
 80084b2:	a902      	add	r1, sp, #8
 80084b4:	f7ff ff58 	bl	8008368 <__b2d>
 80084b8:	468b      	mov	fp, r1
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	a903      	add	r1, sp, #12
 80084c2:	f7ff ff51 	bl	8008368 <__b2d>
 80084c6:	460d      	mov	r5, r1
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	4689      	mov	r9, r1
 80084cc:	6919      	ldr	r1, [r3, #16]
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	4604      	mov	r4, r0
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	4630      	mov	r0, r6
 80084d6:	1ac9      	subs	r1, r1, r3
 80084d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfcd      	iteet	gt
 80084e6:	463a      	movgt	r2, r7
 80084e8:	462a      	movle	r2, r5
 80084ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80084f2:	bfd8      	it	le
 80084f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80084f8:	464b      	mov	r3, r9
 80084fa:	4622      	mov	r2, r4
 80084fc:	4659      	mov	r1, fp
 80084fe:	f7f8 f915 	bl	800072c <__aeabi_ddiv>
 8008502:	b005      	add	sp, #20
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008508 <__copybits>:
 8008508:	3901      	subs	r1, #1
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	1149      	asrs	r1, r1, #5
 800850e:	6914      	ldr	r4, [r2, #16]
 8008510:	3101      	adds	r1, #1
 8008512:	f102 0314 	add.w	r3, r2, #20
 8008516:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800851a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800851e:	1f05      	subs	r5, r0, #4
 8008520:	42a3      	cmp	r3, r4
 8008522:	d30c      	bcc.n	800853e <__copybits+0x36>
 8008524:	1aa3      	subs	r3, r4, r2
 8008526:	3b11      	subs	r3, #17
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	3211      	adds	r2, #17
 800852e:	42a2      	cmp	r2, r4
 8008530:	bf88      	it	hi
 8008532:	2300      	movhi	r3, #0
 8008534:	4418      	add	r0, r3
 8008536:	2300      	movs	r3, #0
 8008538:	4288      	cmp	r0, r1
 800853a:	d305      	bcc.n	8008548 <__copybits+0x40>
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008542:	f845 6f04 	str.w	r6, [r5, #4]!
 8008546:	e7eb      	b.n	8008520 <__copybits+0x18>
 8008548:	f840 3b04 	str.w	r3, [r0], #4
 800854c:	e7f4      	b.n	8008538 <__copybits+0x30>

0800854e <__any_on>:
 800854e:	f100 0214 	add.w	r2, r0, #20
 8008552:	6900      	ldr	r0, [r0, #16]
 8008554:	114b      	asrs	r3, r1, #5
 8008556:	4298      	cmp	r0, r3
 8008558:	b510      	push	{r4, lr}
 800855a:	db11      	blt.n	8008580 <__any_on+0x32>
 800855c:	dd0a      	ble.n	8008574 <__any_on+0x26>
 800855e:	f011 011f 	ands.w	r1, r1, #31
 8008562:	d007      	beq.n	8008574 <__any_on+0x26>
 8008564:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008568:	fa24 f001 	lsr.w	r0, r4, r1
 800856c:	fa00 f101 	lsl.w	r1, r0, r1
 8008570:	428c      	cmp	r4, r1
 8008572:	d10b      	bne.n	800858c <__any_on+0x3e>
 8008574:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008578:	4293      	cmp	r3, r2
 800857a:	d803      	bhi.n	8008584 <__any_on+0x36>
 800857c:	2000      	movs	r0, #0
 800857e:	bd10      	pop	{r4, pc}
 8008580:	4603      	mov	r3, r0
 8008582:	e7f7      	b.n	8008574 <__any_on+0x26>
 8008584:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008588:	2900      	cmp	r1, #0
 800858a:	d0f5      	beq.n	8008578 <__any_on+0x2a>
 800858c:	2001      	movs	r0, #1
 800858e:	e7f6      	b.n	800857e <__any_on+0x30>

08008590 <__ascii_wctomb>:
 8008590:	4603      	mov	r3, r0
 8008592:	4608      	mov	r0, r1
 8008594:	b141      	cbz	r1, 80085a8 <__ascii_wctomb+0x18>
 8008596:	2aff      	cmp	r2, #255	@ 0xff
 8008598:	d904      	bls.n	80085a4 <__ascii_wctomb+0x14>
 800859a:	228a      	movs	r2, #138	@ 0x8a
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	4770      	bx	lr
 80085a4:	2001      	movs	r0, #1
 80085a6:	700a      	strb	r2, [r1, #0]
 80085a8:	4770      	bx	lr

080085aa <__ssputs_r>:
 80085aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ae:	461f      	mov	r7, r3
 80085b0:	688e      	ldr	r6, [r1, #8]
 80085b2:	4682      	mov	sl, r0
 80085b4:	42be      	cmp	r6, r7
 80085b6:	460c      	mov	r4, r1
 80085b8:	4690      	mov	r8, r2
 80085ba:	680b      	ldr	r3, [r1, #0]
 80085bc:	d82d      	bhi.n	800861a <__ssputs_r+0x70>
 80085be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085c6:	d026      	beq.n	8008616 <__ssputs_r+0x6c>
 80085c8:	6965      	ldr	r5, [r4, #20]
 80085ca:	6909      	ldr	r1, [r1, #16]
 80085cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d0:	eba3 0901 	sub.w	r9, r3, r1
 80085d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d8:	1c7b      	adds	r3, r7, #1
 80085da:	444b      	add	r3, r9
 80085dc:	106d      	asrs	r5, r5, #1
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf38      	it	cc
 80085e2:	461d      	movcc	r5, r3
 80085e4:	0553      	lsls	r3, r2, #21
 80085e6:	d527      	bpl.n	8008638 <__ssputs_r+0x8e>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7ff fa8d 	bl	8007b08 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b360      	cbz	r0, 800864c <__ssputs_r+0xa2>
 80085f2:	464a      	mov	r2, r9
 80085f4:	6921      	ldr	r1, [r4, #16]
 80085f6:	f7fe f876 	bl	80066e6 <memcpy>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	6126      	str	r6, [r4, #16]
 8008608:	444e      	add	r6, r9
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	463e      	mov	r6, r7
 800860e:	6165      	str	r5, [r4, #20]
 8008610:	eba5 0509 	sub.w	r5, r5, r9
 8008614:	60a5      	str	r5, [r4, #8]
 8008616:	42be      	cmp	r6, r7
 8008618:	d900      	bls.n	800861c <__ssputs_r+0x72>
 800861a:	463e      	mov	r6, r7
 800861c:	4632      	mov	r2, r6
 800861e:	4641      	mov	r1, r8
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	f000 f9c1 	bl	80089a8 <memmove>
 8008626:	2000      	movs	r0, #0
 8008628:	68a3      	ldr	r3, [r4, #8]
 800862a:	1b9b      	subs	r3, r3, r6
 800862c:	60a3      	str	r3, [r4, #8]
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	4433      	add	r3, r6
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	462a      	mov	r2, r5
 800863a:	f000 fa11 	bl	8008a60 <_realloc_r>
 800863e:	4606      	mov	r6, r0
 8008640:	2800      	cmp	r0, #0
 8008642:	d1e0      	bne.n	8008606 <__ssputs_r+0x5c>
 8008644:	4650      	mov	r0, sl
 8008646:	6921      	ldr	r1, [r4, #16]
 8008648:	f7fe feb2 	bl	80073b0 <_free_r>
 800864c:	230c      	movs	r3, #12
 800864e:	f8ca 3000 	str.w	r3, [sl]
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	e7e9      	b.n	8008634 <__ssputs_r+0x8a>

08008660 <_svfiprintf_r>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4698      	mov	r8, r3
 8008666:	898b      	ldrh	r3, [r1, #12]
 8008668:	4607      	mov	r7, r0
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	460d      	mov	r5, r1
 800866e:	4614      	mov	r4, r2
 8008670:	b09d      	sub	sp, #116	@ 0x74
 8008672:	d510      	bpl.n	8008696 <_svfiprintf_r+0x36>
 8008674:	690b      	ldr	r3, [r1, #16]
 8008676:	b973      	cbnz	r3, 8008696 <_svfiprintf_r+0x36>
 8008678:	2140      	movs	r1, #64	@ 0x40
 800867a:	f7ff fa45 	bl	8007b08 <_malloc_r>
 800867e:	6028      	str	r0, [r5, #0]
 8008680:	6128      	str	r0, [r5, #16]
 8008682:	b930      	cbnz	r0, 8008692 <_svfiprintf_r+0x32>
 8008684:	230c      	movs	r3, #12
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	b01d      	add	sp, #116	@ 0x74
 800868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	2340      	movs	r3, #64	@ 0x40
 8008694:	616b      	str	r3, [r5, #20]
 8008696:	2300      	movs	r3, #0
 8008698:	9309      	str	r3, [sp, #36]	@ 0x24
 800869a:	2320      	movs	r3, #32
 800869c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086a0:	2330      	movs	r3, #48	@ 0x30
 80086a2:	f04f 0901 	mov.w	r9, #1
 80086a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008844 <_svfiprintf_r+0x1e4>
 80086ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086b2:	4623      	mov	r3, r4
 80086b4:	469a      	mov	sl, r3
 80086b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ba:	b10a      	cbz	r2, 80086c0 <_svfiprintf_r+0x60>
 80086bc:	2a25      	cmp	r2, #37	@ 0x25
 80086be:	d1f9      	bne.n	80086b4 <_svfiprintf_r+0x54>
 80086c0:	ebba 0b04 	subs.w	fp, sl, r4
 80086c4:	d00b      	beq.n	80086de <_svfiprintf_r+0x7e>
 80086c6:	465b      	mov	r3, fp
 80086c8:	4622      	mov	r2, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7ff ff6c 	bl	80085aa <__ssputs_r>
 80086d2:	3001      	adds	r0, #1
 80086d4:	f000 80a7 	beq.w	8008826 <_svfiprintf_r+0x1c6>
 80086d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086da:	445a      	add	r2, fp
 80086dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80086de:	f89a 3000 	ldrb.w	r3, [sl]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 809f 	beq.w	8008826 <_svfiprintf_r+0x1c6>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f2:	f10a 0a01 	add.w	sl, sl, #1
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008700:	4654      	mov	r4, sl
 8008702:	2205      	movs	r2, #5
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	484e      	ldr	r0, [pc, #312]	@ (8008844 <_svfiprintf_r+0x1e4>)
 800870a:	f7fd ffde 	bl	80066ca <memchr>
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	b9d8      	cbnz	r0, 800874a <_svfiprintf_r+0xea>
 8008712:	06d0      	lsls	r0, r2, #27
 8008714:	bf44      	itt	mi
 8008716:	2320      	movmi	r3, #32
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800871c:	0711      	lsls	r1, r2, #28
 800871e:	bf44      	itt	mi
 8008720:	232b      	movmi	r3, #43	@ 0x2b
 8008722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008726:	f89a 3000 	ldrb.w	r3, [sl]
 800872a:	2b2a      	cmp	r3, #42	@ 0x2a
 800872c:	d015      	beq.n	800875a <_svfiprintf_r+0xfa>
 800872e:	4654      	mov	r4, sl
 8008730:	2000      	movs	r0, #0
 8008732:	f04f 0c0a 	mov.w	ip, #10
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	4621      	mov	r1, r4
 800873a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873e:	3b30      	subs	r3, #48	@ 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d94b      	bls.n	80087dc <_svfiprintf_r+0x17c>
 8008744:	b1b0      	cbz	r0, 8008774 <_svfiprintf_r+0x114>
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	e014      	b.n	8008774 <_svfiprintf_r+0x114>
 800874a:	eba0 0308 	sub.w	r3, r0, r8
 800874e:	fa09 f303 	lsl.w	r3, r9, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	46a2      	mov	sl, r4
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	e7d2      	b.n	8008700 <_svfiprintf_r+0xa0>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9103      	str	r1, [sp, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfbb      	ittet	lt
 8008766:	425b      	neglt	r3, r3
 8008768:	f042 0202 	orrlt.w	r2, r2, #2
 800876c:	9307      	strge	r3, [sp, #28]
 800876e:	9307      	strlt	r3, [sp, #28]
 8008770:	bfb8      	it	lt
 8008772:	9204      	strlt	r2, [sp, #16]
 8008774:	7823      	ldrb	r3, [r4, #0]
 8008776:	2b2e      	cmp	r3, #46	@ 0x2e
 8008778:	d10a      	bne.n	8008790 <_svfiprintf_r+0x130>
 800877a:	7863      	ldrb	r3, [r4, #1]
 800877c:	2b2a      	cmp	r3, #42	@ 0x2a
 800877e:	d132      	bne.n	80087e6 <_svfiprintf_r+0x186>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	3402      	adds	r4, #2
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9203      	str	r2, [sp, #12]
 800878a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008848 <_svfiprintf_r+0x1e8>
 8008794:	2203      	movs	r2, #3
 8008796:	4650      	mov	r0, sl
 8008798:	7821      	ldrb	r1, [r4, #0]
 800879a:	f7fd ff96 	bl	80066ca <memchr>
 800879e:	b138      	cbz	r0, 80087b0 <_svfiprintf_r+0x150>
 80087a0:	2240      	movs	r2, #64	@ 0x40
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	eba0 000a 	sub.w	r0, r0, sl
 80087a8:	4082      	lsls	r2, r0
 80087aa:	4313      	orrs	r3, r2
 80087ac:	3401      	adds	r4, #1
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b4:	2206      	movs	r2, #6
 80087b6:	4825      	ldr	r0, [pc, #148]	@ (800884c <_svfiprintf_r+0x1ec>)
 80087b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087bc:	f7fd ff85 	bl	80066ca <memchr>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d036      	beq.n	8008832 <_svfiprintf_r+0x1d2>
 80087c4:	4b22      	ldr	r3, [pc, #136]	@ (8008850 <_svfiprintf_r+0x1f0>)
 80087c6:	bb1b      	cbnz	r3, 8008810 <_svfiprintf_r+0x1b0>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	3307      	adds	r3, #7
 80087cc:	f023 0307 	bic.w	r3, r3, #7
 80087d0:	3308      	adds	r3, #8
 80087d2:	9303      	str	r3, [sp, #12]
 80087d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d6:	4433      	add	r3, r6
 80087d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087da:	e76a      	b.n	80086b2 <_svfiprintf_r+0x52>
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e4:	e7a8      	b.n	8008738 <_svfiprintf_r+0xd8>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f04f 0c0a 	mov.w	ip, #10
 80087ec:	4619      	mov	r1, r3
 80087ee:	3401      	adds	r4, #1
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	4620      	mov	r0, r4
 80087f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f8:	3a30      	subs	r2, #48	@ 0x30
 80087fa:	2a09      	cmp	r2, #9
 80087fc:	d903      	bls.n	8008806 <_svfiprintf_r+0x1a6>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0c6      	beq.n	8008790 <_svfiprintf_r+0x130>
 8008802:	9105      	str	r1, [sp, #20]
 8008804:	e7c4      	b.n	8008790 <_svfiprintf_r+0x130>
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	fb0c 2101 	mla	r1, ip, r1, r2
 800880e:	e7f0      	b.n	80087f2 <_svfiprintf_r+0x192>
 8008810:	ab03      	add	r3, sp, #12
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	462a      	mov	r2, r5
 8008816:	4638      	mov	r0, r7
 8008818:	4b0e      	ldr	r3, [pc, #56]	@ (8008854 <_svfiprintf_r+0x1f4>)
 800881a:	a904      	add	r1, sp, #16
 800881c:	f7fd f9ca 	bl	8005bb4 <_printf_float>
 8008820:	1c42      	adds	r2, r0, #1
 8008822:	4606      	mov	r6, r0
 8008824:	d1d6      	bne.n	80087d4 <_svfiprintf_r+0x174>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	065b      	lsls	r3, r3, #25
 800882a:	f53f af2d 	bmi.w	8008688 <_svfiprintf_r+0x28>
 800882e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008830:	e72c      	b.n	800868c <_svfiprintf_r+0x2c>
 8008832:	ab03      	add	r3, sp, #12
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	462a      	mov	r2, r5
 8008838:	4638      	mov	r0, r7
 800883a:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <_svfiprintf_r+0x1f4>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	f7fd fc57 	bl	80060f0 <_printf_i>
 8008842:	e7ed      	b.n	8008820 <_svfiprintf_r+0x1c0>
 8008844:	08009708 	.word	0x08009708
 8008848:	0800970e 	.word	0x0800970e
 800884c:	08009712 	.word	0x08009712
 8008850:	08005bb5 	.word	0x08005bb5
 8008854:	080085ab 	.word	0x080085ab

08008858 <__sflush_r>:
 8008858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	0716      	lsls	r6, r2, #28
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	d454      	bmi.n	8008910 <__sflush_r+0xb8>
 8008866:	684b      	ldr	r3, [r1, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc02      	bgt.n	8008872 <__sflush_r+0x1a>
 800886c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd48      	ble.n	8008904 <__sflush_r+0xac>
 8008872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008874:	2e00      	cmp	r6, #0
 8008876:	d045      	beq.n	8008904 <__sflush_r+0xac>
 8008878:	2300      	movs	r3, #0
 800887a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800887e:	682f      	ldr	r7, [r5, #0]
 8008880:	6a21      	ldr	r1, [r4, #32]
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	d030      	beq.n	80088e8 <__sflush_r+0x90>
 8008886:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	0759      	lsls	r1, r3, #29
 800888c:	d505      	bpl.n	800889a <__sflush_r+0x42>
 800888e:	6863      	ldr	r3, [r4, #4]
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008894:	b10b      	cbz	r3, 800889a <__sflush_r+0x42>
 8008896:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008898:	1ad2      	subs	r2, r2, r3
 800889a:	2300      	movs	r3, #0
 800889c:	4628      	mov	r0, r5
 800889e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088a0:	6a21      	ldr	r1, [r4, #32]
 80088a2:	47b0      	blx	r6
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	d106      	bne.n	80088b8 <__sflush_r+0x60>
 80088aa:	6829      	ldr	r1, [r5, #0]
 80088ac:	291d      	cmp	r1, #29
 80088ae:	d82b      	bhi.n	8008908 <__sflush_r+0xb0>
 80088b0:	4a28      	ldr	r2, [pc, #160]	@ (8008954 <__sflush_r+0xfc>)
 80088b2:	410a      	asrs	r2, r1
 80088b4:	07d6      	lsls	r6, r2, #31
 80088b6:	d427      	bmi.n	8008908 <__sflush_r+0xb0>
 80088b8:	2200      	movs	r2, #0
 80088ba:	6062      	str	r2, [r4, #4]
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	04d9      	lsls	r1, r3, #19
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	d504      	bpl.n	80088ce <__sflush_r+0x76>
 80088c4:	1c42      	adds	r2, r0, #1
 80088c6:	d101      	bne.n	80088cc <__sflush_r+0x74>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b903      	cbnz	r3, 80088ce <__sflush_r+0x76>
 80088cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80088ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088d0:	602f      	str	r7, [r5, #0]
 80088d2:	b1b9      	cbz	r1, 8008904 <__sflush_r+0xac>
 80088d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d8:	4299      	cmp	r1, r3
 80088da:	d002      	beq.n	80088e2 <__sflush_r+0x8a>
 80088dc:	4628      	mov	r0, r5
 80088de:	f7fe fd67 	bl	80073b0 <_free_r>
 80088e2:	2300      	movs	r3, #0
 80088e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80088e6:	e00d      	b.n	8008904 <__sflush_r+0xac>
 80088e8:	2301      	movs	r3, #1
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b0      	blx	r6
 80088ee:	4602      	mov	r2, r0
 80088f0:	1c50      	adds	r0, r2, #1
 80088f2:	d1c9      	bne.n	8008888 <__sflush_r+0x30>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0c6      	beq.n	8008888 <__sflush_r+0x30>
 80088fa:	2b1d      	cmp	r3, #29
 80088fc:	d001      	beq.n	8008902 <__sflush_r+0xaa>
 80088fe:	2b16      	cmp	r3, #22
 8008900:	d11d      	bne.n	800893e <__sflush_r+0xe6>
 8008902:	602f      	str	r7, [r5, #0]
 8008904:	2000      	movs	r0, #0
 8008906:	e021      	b.n	800894c <__sflush_r+0xf4>
 8008908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890c:	b21b      	sxth	r3, r3
 800890e:	e01a      	b.n	8008946 <__sflush_r+0xee>
 8008910:	690f      	ldr	r7, [r1, #16]
 8008912:	2f00      	cmp	r7, #0
 8008914:	d0f6      	beq.n	8008904 <__sflush_r+0xac>
 8008916:	0793      	lsls	r3, r2, #30
 8008918:	bf18      	it	ne
 800891a:	2300      	movne	r3, #0
 800891c:	680e      	ldr	r6, [r1, #0]
 800891e:	bf08      	it	eq
 8008920:	694b      	ldreq	r3, [r1, #20]
 8008922:	1bf6      	subs	r6, r6, r7
 8008924:	600f      	str	r7, [r1, #0]
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	2e00      	cmp	r6, #0
 800892a:	ddeb      	ble.n	8008904 <__sflush_r+0xac>
 800892c:	4633      	mov	r3, r6
 800892e:	463a      	mov	r2, r7
 8008930:	4628      	mov	r0, r5
 8008932:	6a21      	ldr	r1, [r4, #32]
 8008934:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008938:	47e0      	blx	ip
 800893a:	2800      	cmp	r0, #0
 800893c:	dc07      	bgt.n	800894e <__sflush_r+0xf6>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894e:	4407      	add	r7, r0
 8008950:	1a36      	subs	r6, r6, r0
 8008952:	e7e9      	b.n	8008928 <__sflush_r+0xd0>
 8008954:	dfbffffe 	.word	0xdfbffffe

08008958 <_fflush_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	b913      	cbnz	r3, 8008968 <_fflush_r+0x10>
 8008962:	2500      	movs	r5, #0
 8008964:	4628      	mov	r0, r5
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	b118      	cbz	r0, 8008972 <_fflush_r+0x1a>
 800896a:	6a03      	ldr	r3, [r0, #32]
 800896c:	b90b      	cbnz	r3, 8008972 <_fflush_r+0x1a>
 800896e:	f7fd fd6b 	bl	8006448 <__sinit>
 8008972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f3      	beq.n	8008962 <_fflush_r+0xa>
 800897a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800897c:	07d0      	lsls	r0, r2, #31
 800897e:	d404      	bmi.n	800898a <_fflush_r+0x32>
 8008980:	0599      	lsls	r1, r3, #22
 8008982:	d402      	bmi.n	800898a <_fflush_r+0x32>
 8008984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008986:	f7fd fe9e 	bl	80066c6 <__retarget_lock_acquire_recursive>
 800898a:	4628      	mov	r0, r5
 800898c:	4621      	mov	r1, r4
 800898e:	f7ff ff63 	bl	8008858 <__sflush_r>
 8008992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008994:	4605      	mov	r5, r0
 8008996:	07da      	lsls	r2, r3, #31
 8008998:	d4e4      	bmi.n	8008964 <_fflush_r+0xc>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	059b      	lsls	r3, r3, #22
 800899e:	d4e1      	bmi.n	8008964 <_fflush_r+0xc>
 80089a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a2:	f7fd fe91 	bl	80066c8 <__retarget_lock_release_recursive>
 80089a6:	e7dd      	b.n	8008964 <_fflush_r+0xc>

080089a8 <memmove>:
 80089a8:	4288      	cmp	r0, r1
 80089aa:	b510      	push	{r4, lr}
 80089ac:	eb01 0402 	add.w	r4, r1, r2
 80089b0:	d902      	bls.n	80089b8 <memmove+0x10>
 80089b2:	4284      	cmp	r4, r0
 80089b4:	4623      	mov	r3, r4
 80089b6:	d807      	bhi.n	80089c8 <memmove+0x20>
 80089b8:	1e43      	subs	r3, r0, #1
 80089ba:	42a1      	cmp	r1, r4
 80089bc:	d008      	beq.n	80089d0 <memmove+0x28>
 80089be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c6:	e7f8      	b.n	80089ba <memmove+0x12>
 80089c8:	4601      	mov	r1, r0
 80089ca:	4402      	add	r2, r0
 80089cc:	428a      	cmp	r2, r1
 80089ce:	d100      	bne.n	80089d2 <memmove+0x2a>
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089da:	e7f7      	b.n	80089cc <memmove+0x24>

080089dc <_sbrk_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	2300      	movs	r3, #0
 80089e0:	4d05      	ldr	r5, [pc, #20]	@ (80089f8 <_sbrk_r+0x1c>)
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	f7f8 fffc 	bl	80019e4 <_sbrk>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_sbrk_r+0x1a>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_sbrk_r+0x1a>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20000a10 	.word	0x20000a10

080089fc <__assert_func>:
 80089fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089fe:	4614      	mov	r4, r2
 8008a00:	461a      	mov	r2, r3
 8008a02:	4b09      	ldr	r3, [pc, #36]	@ (8008a28 <__assert_func+0x2c>)
 8008a04:	4605      	mov	r5, r0
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68d8      	ldr	r0, [r3, #12]
 8008a0a:	b954      	cbnz	r4, 8008a22 <__assert_func+0x26>
 8008a0c:	4b07      	ldr	r3, [pc, #28]	@ (8008a2c <__assert_func+0x30>)
 8008a0e:	461c      	mov	r4, r3
 8008a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a14:	9100      	str	r1, [sp, #0]
 8008a16:	462b      	mov	r3, r5
 8008a18:	4905      	ldr	r1, [pc, #20]	@ (8008a30 <__assert_func+0x34>)
 8008a1a:	f000 f84f 	bl	8008abc <fiprintf>
 8008a1e:	f000 f85f 	bl	8008ae0 <abort>
 8008a22:	4b04      	ldr	r3, [pc, #16]	@ (8008a34 <__assert_func+0x38>)
 8008a24:	e7f4      	b.n	8008a10 <__assert_func+0x14>
 8008a26:	bf00      	nop
 8008a28:	200001a4 	.word	0x200001a4
 8008a2c:	08009754 	.word	0x08009754
 8008a30:	08009726 	.word	0x08009726
 8008a34:	08009719 	.word	0x08009719

08008a38 <_calloc_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	fba1 5402 	umull	r5, r4, r1, r2
 8008a3e:	b93c      	cbnz	r4, 8008a50 <_calloc_r+0x18>
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7ff f861 	bl	8007b08 <_malloc_r>
 8008a46:	4606      	mov	r6, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <_calloc_r+0x1e>
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	220c      	movs	r2, #12
 8008a52:	6002      	str	r2, [r0, #0]
 8008a54:	e7f9      	b.n	8008a4a <_calloc_r+0x12>
 8008a56:	462a      	mov	r2, r5
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f7fd fd8e 	bl	800657a <memset>
 8008a5e:	e7f5      	b.n	8008a4c <_calloc_r+0x14>

08008a60 <_realloc_r>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	4680      	mov	r8, r0
 8008a66:	4615      	mov	r5, r2
 8008a68:	460c      	mov	r4, r1
 8008a6a:	b921      	cbnz	r1, 8008a76 <_realloc_r+0x16>
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	f7ff b849 	b.w	8007b08 <_malloc_r>
 8008a76:	b92a      	cbnz	r2, 8008a84 <_realloc_r+0x24>
 8008a78:	f7fe fc9a 	bl	80073b0 <_free_r>
 8008a7c:	2400      	movs	r4, #0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	f000 f833 	bl	8008aee <_malloc_usable_size_r>
 8008a88:	4285      	cmp	r5, r0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	d802      	bhi.n	8008a94 <_realloc_r+0x34>
 8008a8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a92:	d8f4      	bhi.n	8008a7e <_realloc_r+0x1e>
 8008a94:	4629      	mov	r1, r5
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7ff f836 	bl	8007b08 <_malloc_r>
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0ec      	beq.n	8008a7c <_realloc_r+0x1c>
 8008aa2:	42b5      	cmp	r5, r6
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	bf28      	it	cs
 8008aaa:	4632      	movcs	r2, r6
 8008aac:	f7fd fe1b 	bl	80066e6 <memcpy>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7fe fc7c 	bl	80073b0 <_free_r>
 8008ab8:	463c      	mov	r4, r7
 8008aba:	e7e0      	b.n	8008a7e <_realloc_r+0x1e>

08008abc <fiprintf>:
 8008abc:	b40e      	push	{r1, r2, r3}
 8008abe:	b503      	push	{r0, r1, lr}
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	4805      	ldr	r0, [pc, #20]	@ (8008adc <fiprintf+0x20>)
 8008ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	f000 f83d 	bl	8008b4c <_vfiprintf_r>
 8008ad2:	b002      	add	sp, #8
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	b003      	add	sp, #12
 8008ada:	4770      	bx	lr
 8008adc:	200001a4 	.word	0x200001a4

08008ae0 <abort>:
 8008ae0:	2006      	movs	r0, #6
 8008ae2:	b508      	push	{r3, lr}
 8008ae4:	f000 fa06 	bl	8008ef4 <raise>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7f8 ff06 	bl	80018fa <_exit>

08008aee <_malloc_usable_size_r>:
 8008aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af2:	1f18      	subs	r0, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfbc      	itt	lt
 8008af8:	580b      	ldrlt	r3, [r1, r0]
 8008afa:	18c0      	addlt	r0, r0, r3
 8008afc:	4770      	bx	lr

08008afe <__sfputc_r>:
 8008afe:	6893      	ldr	r3, [r2, #8]
 8008b00:	b410      	push	{r4}
 8008b02:	3b01      	subs	r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	da07      	bge.n	8008b1a <__sfputc_r+0x1c>
 8008b0a:	6994      	ldr	r4, [r2, #24]
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	db01      	blt.n	8008b14 <__sfputc_r+0x16>
 8008b10:	290a      	cmp	r1, #10
 8008b12:	d102      	bne.n	8008b1a <__sfputc_r+0x1c>
 8008b14:	bc10      	pop	{r4}
 8008b16:	f000 b931 	b.w	8008d7c <__swbuf_r>
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	1c58      	adds	r0, r3, #1
 8008b1e:	6010      	str	r0, [r2, #0]
 8008b20:	7019      	strb	r1, [r3, #0]
 8008b22:	4608      	mov	r0, r1
 8008b24:	bc10      	pop	{r4}
 8008b26:	4770      	bx	lr

08008b28 <__sfputs_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4614      	mov	r4, r2
 8008b30:	18d5      	adds	r5, r2, r3
 8008b32:	42ac      	cmp	r4, r5
 8008b34:	d101      	bne.n	8008b3a <__sfputs_r+0x12>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e007      	b.n	8008b4a <__sfputs_r+0x22>
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	f7ff ffdc 	bl	8008afe <__sfputc_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d1f3      	bne.n	8008b32 <__sfputs_r+0xa>
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b4c <_vfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	460d      	mov	r5, r1
 8008b52:	4614      	mov	r4, r2
 8008b54:	4698      	mov	r8, r3
 8008b56:	4606      	mov	r6, r0
 8008b58:	b09d      	sub	sp, #116	@ 0x74
 8008b5a:	b118      	cbz	r0, 8008b64 <_vfiprintf_r+0x18>
 8008b5c:	6a03      	ldr	r3, [r0, #32]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x18>
 8008b60:	f7fd fc72 	bl	8006448 <__sinit>
 8008b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b72:	f7fd fda8 	bl	80066c6 <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x34>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b99b      	cbnz	r3, 8008ba8 <_vfiprintf_r+0x5c>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f938 	bl	8008df8 <__swsetup_r>
 8008b88:	b170      	cbz	r0, 8008ba8 <_vfiprintf_r+0x5c>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d504      	bpl.n	8008b9a <_vfiprintf_r+0x4e>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b01d      	add	sp, #116	@ 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	0598      	lsls	r0, r3, #22
 8008b9e:	d4f7      	bmi.n	8008b90 <_vfiprintf_r+0x44>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba2:	f7fd fd91 	bl	80066c8 <__retarget_lock_release_recursive>
 8008ba6:	e7f3      	b.n	8008b90 <_vfiprintf_r+0x44>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bac:	2320      	movs	r3, #32
 8008bae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bb2:	2330      	movs	r3, #48	@ 0x30
 8008bb4:	f04f 0901 	mov.w	r9, #1
 8008bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bbc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d68 <_vfiprintf_r+0x21c>
 8008bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	469a      	mov	sl, r3
 8008bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bcc:	b10a      	cbz	r2, 8008bd2 <_vfiprintf_r+0x86>
 8008bce:	2a25      	cmp	r2, #37	@ 0x25
 8008bd0:	d1f9      	bne.n	8008bc6 <_vfiprintf_r+0x7a>
 8008bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd6:	d00b      	beq.n	8008bf0 <_vfiprintf_r+0xa4>
 8008bd8:	465b      	mov	r3, fp
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffa2 	bl	8008b28 <__sfputs_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	f000 80a7 	beq.w	8008d38 <_vfiprintf_r+0x1ec>
 8008bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bec:	445a      	add	r2, fp
 8008bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 809f 	beq.w	8008d38 <_vfiprintf_r+0x1ec>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c04:	f10a 0a01 	add.w	sl, sl, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c10:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c12:	4654      	mov	r4, sl
 8008c14:	2205      	movs	r2, #5
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	4853      	ldr	r0, [pc, #332]	@ (8008d68 <_vfiprintf_r+0x21c>)
 8008c1c:	f7fd fd55 	bl	80066ca <memchr>
 8008c20:	9a04      	ldr	r2, [sp, #16]
 8008c22:	b9d8      	cbnz	r0, 8008c5c <_vfiprintf_r+0x110>
 8008c24:	06d1      	lsls	r1, r2, #27
 8008c26:	bf44      	itt	mi
 8008c28:	2320      	movmi	r3, #32
 8008c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c2e:	0713      	lsls	r3, r2, #28
 8008c30:	bf44      	itt	mi
 8008c32:	232b      	movmi	r3, #43	@ 0x2b
 8008c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c38:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c3e:	d015      	beq.n	8008c6c <_vfiprintf_r+0x120>
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	9a07      	ldr	r2, [sp, #28]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c50:	3b30      	subs	r3, #48	@ 0x30
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d94b      	bls.n	8008cee <_vfiprintf_r+0x1a2>
 8008c56:	b1b0      	cbz	r0, 8008c86 <_vfiprintf_r+0x13a>
 8008c58:	9207      	str	r2, [sp, #28]
 8008c5a:	e014      	b.n	8008c86 <_vfiprintf_r+0x13a>
 8008c5c:	eba0 0308 	sub.w	r3, r0, r8
 8008c60:	fa09 f303 	lsl.w	r3, r9, r3
 8008c64:	4313      	orrs	r3, r2
 8008c66:	46a2      	mov	sl, r4
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	e7d2      	b.n	8008c12 <_vfiprintf_r+0xc6>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	1d19      	adds	r1, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	9103      	str	r1, [sp, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbb      	ittet	lt
 8008c78:	425b      	neglt	r3, r3
 8008c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7e:	9307      	strge	r3, [sp, #28]
 8008c80:	9307      	strlt	r3, [sp, #28]
 8008c82:	bfb8      	it	lt
 8008c84:	9204      	strlt	r2, [sp, #16]
 8008c86:	7823      	ldrb	r3, [r4, #0]
 8008c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c8a:	d10a      	bne.n	8008ca2 <_vfiprintf_r+0x156>
 8008c8c:	7863      	ldrb	r3, [r4, #1]
 8008c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c90:	d132      	bne.n	8008cf8 <_vfiprintf_r+0x1ac>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	3402      	adds	r4, #2
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d6c <_vfiprintf_r+0x220>
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	4650      	mov	r0, sl
 8008caa:	7821      	ldrb	r1, [r4, #0]
 8008cac:	f7fd fd0d 	bl	80066ca <memchr>
 8008cb0:	b138      	cbz	r0, 8008cc2 <_vfiprintf_r+0x176>
 8008cb2:	2240      	movs	r2, #64	@ 0x40
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	4082      	lsls	r2, r0
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	3401      	adds	r4, #1
 8008cc0:	9304      	str	r3, [sp, #16]
 8008cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc6:	2206      	movs	r2, #6
 8008cc8:	4829      	ldr	r0, [pc, #164]	@ (8008d70 <_vfiprintf_r+0x224>)
 8008cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cce:	f7fd fcfc 	bl	80066ca <memchr>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d03f      	beq.n	8008d56 <_vfiprintf_r+0x20a>
 8008cd6:	4b27      	ldr	r3, [pc, #156]	@ (8008d74 <_vfiprintf_r+0x228>)
 8008cd8:	bb1b      	cbnz	r3, 8008d22 <_vfiprintf_r+0x1d6>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	3307      	adds	r3, #7
 8008cde:	f023 0307 	bic.w	r3, r3, #7
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	9303      	str	r3, [sp, #12]
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	443b      	add	r3, r7
 8008cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cec:	e76a      	b.n	8008bc4 <_vfiprintf_r+0x78>
 8008cee:	460c      	mov	r4, r1
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf6:	e7a8      	b.n	8008c4a <_vfiprintf_r+0xfe>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f04f 0c0a 	mov.w	ip, #10
 8008cfe:	4619      	mov	r1, r3
 8008d00:	3401      	adds	r4, #1
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	4620      	mov	r0, r4
 8008d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0a:	3a30      	subs	r2, #48	@ 0x30
 8008d0c:	2a09      	cmp	r2, #9
 8008d0e:	d903      	bls.n	8008d18 <_vfiprintf_r+0x1cc>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0c6      	beq.n	8008ca2 <_vfiprintf_r+0x156>
 8008d14:	9105      	str	r1, [sp, #20]
 8008d16:	e7c4      	b.n	8008ca2 <_vfiprintf_r+0x156>
 8008d18:	4604      	mov	r4, r0
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d20:	e7f0      	b.n	8008d04 <_vfiprintf_r+0x1b8>
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	462a      	mov	r2, r5
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <_vfiprintf_r+0x22c>)
 8008d2c:	a904      	add	r1, sp, #16
 8008d2e:	f7fc ff41 	bl	8005bb4 <_printf_float>
 8008d32:	4607      	mov	r7, r0
 8008d34:	1c78      	adds	r0, r7, #1
 8008d36:	d1d6      	bne.n	8008ce6 <_vfiprintf_r+0x19a>
 8008d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d3a:	07d9      	lsls	r1, r3, #31
 8008d3c:	d405      	bmi.n	8008d4a <_vfiprintf_r+0x1fe>
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d402      	bmi.n	8008d4a <_vfiprintf_r+0x1fe>
 8008d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d46:	f7fd fcbf 	bl	80066c8 <__retarget_lock_release_recursive>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	065b      	lsls	r3, r3, #25
 8008d4e:	f53f af1f 	bmi.w	8008b90 <_vfiprintf_r+0x44>
 8008d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d54:	e71e      	b.n	8008b94 <_vfiprintf_r+0x48>
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <_vfiprintf_r+0x22c>)
 8008d60:	a904      	add	r1, sp, #16
 8008d62:	f7fd f9c5 	bl	80060f0 <_printf_i>
 8008d66:	e7e4      	b.n	8008d32 <_vfiprintf_r+0x1e6>
 8008d68:	08009708 	.word	0x08009708
 8008d6c:	0800970e 	.word	0x0800970e
 8008d70:	08009712 	.word	0x08009712
 8008d74:	08005bb5 	.word	0x08005bb5
 8008d78:	08008b29 	.word	0x08008b29

08008d7c <__swbuf_r>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	460e      	mov	r6, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	4605      	mov	r5, r0
 8008d84:	b118      	cbz	r0, 8008d8e <__swbuf_r+0x12>
 8008d86:	6a03      	ldr	r3, [r0, #32]
 8008d88:	b90b      	cbnz	r3, 8008d8e <__swbuf_r+0x12>
 8008d8a:	f7fd fb5d 	bl	8006448 <__sinit>
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d501      	bpl.n	8008d9c <__swbuf_r+0x20>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	b943      	cbnz	r3, 8008dae <__swbuf_r+0x32>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 f82a 	bl	8008df8 <__swsetup_r>
 8008da4:	b118      	cbz	r0, 8008dae <__swbuf_r+0x32>
 8008da6:	f04f 37ff 	mov.w	r7, #4294967295
 8008daa:	4638      	mov	r0, r7
 8008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	b2f6      	uxtb	r6, r6
 8008db4:	1a98      	subs	r0, r3, r2
 8008db6:	6963      	ldr	r3, [r4, #20]
 8008db8:	4637      	mov	r7, r6
 8008dba:	4283      	cmp	r3, r0
 8008dbc:	dc05      	bgt.n	8008dca <__swbuf_r+0x4e>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f7ff fdc9 	bl	8008958 <_fflush_r>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d1ed      	bne.n	8008da6 <__swbuf_r+0x2a>
 8008dca:	68a3      	ldr	r3, [r4, #8]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	60a3      	str	r3, [r4, #8]
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	6022      	str	r2, [r4, #0]
 8008dd6:	701e      	strb	r6, [r3, #0]
 8008dd8:	6962      	ldr	r2, [r4, #20]
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d004      	beq.n	8008dea <__swbuf_r+0x6e>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	07db      	lsls	r3, r3, #31
 8008de4:	d5e1      	bpl.n	8008daa <__swbuf_r+0x2e>
 8008de6:	2e0a      	cmp	r6, #10
 8008de8:	d1df      	bne.n	8008daa <__swbuf_r+0x2e>
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f7ff fdb3 	bl	8008958 <_fflush_r>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0d9      	beq.n	8008daa <__swbuf_r+0x2e>
 8008df6:	e7d6      	b.n	8008da6 <__swbuf_r+0x2a>

08008df8 <__swsetup_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ea0 <__swsetup_r+0xa8>)
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	460c      	mov	r4, r1
 8008e02:	b118      	cbz	r0, 8008e0c <__swsetup_r+0x14>
 8008e04:	6a03      	ldr	r3, [r0, #32]
 8008e06:	b90b      	cbnz	r3, 8008e0c <__swsetup_r+0x14>
 8008e08:	f7fd fb1e 	bl	8006448 <__sinit>
 8008e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e10:	0719      	lsls	r1, r3, #28
 8008e12:	d422      	bmi.n	8008e5a <__swsetup_r+0x62>
 8008e14:	06da      	lsls	r2, r3, #27
 8008e16:	d407      	bmi.n	8008e28 <__swsetup_r+0x30>
 8008e18:	2209      	movs	r2, #9
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	e033      	b.n	8008e90 <__swsetup_r+0x98>
 8008e28:	0758      	lsls	r0, r3, #29
 8008e2a:	d512      	bpl.n	8008e52 <__swsetup_r+0x5a>
 8008e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e2e:	b141      	cbz	r1, 8008e42 <__swsetup_r+0x4a>
 8008e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e34:	4299      	cmp	r1, r3
 8008e36:	d002      	beq.n	8008e3e <__swsetup_r+0x46>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7fe fab9 	bl	80073b0 <_free_r>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0308 	orr.w	r3, r3, #8
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	b94b      	cbnz	r3, 8008e72 <__swsetup_r+0x7a>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e68:	d003      	beq.n	8008e72 <__swsetup_r+0x7a>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f000 f882 	bl	8008f76 <__smakebuf_r>
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	f013 0201 	ands.w	r2, r3, #1
 8008e7a:	d00a      	beq.n	8008e92 <__swsetup_r+0x9a>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	60a2      	str	r2, [r4, #8]
 8008e80:	6962      	ldr	r2, [r4, #20]
 8008e82:	4252      	negs	r2, r2
 8008e84:	61a2      	str	r2, [r4, #24]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	b942      	cbnz	r2, 8008e9c <__swsetup_r+0xa4>
 8008e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e8e:	d1c5      	bne.n	8008e1c <__swsetup_r+0x24>
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	0799      	lsls	r1, r3, #30
 8008e94:	bf58      	it	pl
 8008e96:	6962      	ldrpl	r2, [r4, #20]
 8008e98:	60a2      	str	r2, [r4, #8]
 8008e9a:	e7f4      	b.n	8008e86 <__swsetup_r+0x8e>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e7f7      	b.n	8008e90 <__swsetup_r+0x98>
 8008ea0:	200001a4 	.word	0x200001a4

08008ea4 <_raise_r>:
 8008ea4:	291f      	cmp	r1, #31
 8008ea6:	b538      	push	{r3, r4, r5, lr}
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	d904      	bls.n	8008eb8 <_raise_r+0x14>
 8008eae:	2316      	movs	r3, #22
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008eba:	b112      	cbz	r2, 8008ec2 <_raise_r+0x1e>
 8008ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <_raise_r+0x32>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f830 	bl	8008f28 <_getpid_r>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4628      	mov	r0, r5
 8008ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed2:	f000 b817 	b.w	8008f04 <_kill_r>
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d00a      	beq.n	8008ef0 <_raise_r+0x4c>
 8008eda:	1c59      	adds	r1, r3, #1
 8008edc:	d103      	bne.n	8008ee6 <_raise_r+0x42>
 8008ede:	2316      	movs	r3, #22
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e7e7      	b.n	8008eb6 <_raise_r+0x12>
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008eee:	4798      	blx	r3
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7e0      	b.n	8008eb6 <_raise_r+0x12>

08008ef4 <raise>:
 8008ef4:	4b02      	ldr	r3, [pc, #8]	@ (8008f00 <raise+0xc>)
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f7ff bfd3 	b.w	8008ea4 <_raise_r>
 8008efe:	bf00      	nop
 8008f00:	200001a4 	.word	0x200001a4

08008f04 <_kill_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	2300      	movs	r3, #0
 8008f08:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_kill_r+0x20>)
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	f7f8 fce2 	bl	80018da <_kill>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d102      	bne.n	8008f20 <_kill_r+0x1c>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	b103      	cbz	r3, 8008f20 <_kill_r+0x1c>
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	bf00      	nop
 8008f24:	20000a10 	.word	0x20000a10

08008f28 <_getpid_r>:
 8008f28:	f7f8 bcd0 	b.w	80018cc <_getpid>

08008f2c <__swhatbuf_r>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	4615      	mov	r5, r2
 8008f36:	2900      	cmp	r1, #0
 8008f38:	461e      	mov	r6, r3
 8008f3a:	b096      	sub	sp, #88	@ 0x58
 8008f3c:	da0c      	bge.n	8008f58 <__swhatbuf_r+0x2c>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	2100      	movs	r1, #0
 8008f42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f46:	bf14      	ite	ne
 8008f48:	2340      	movne	r3, #64	@ 0x40
 8008f4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f4e:	2000      	movs	r0, #0
 8008f50:	6031      	str	r1, [r6, #0]
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	b016      	add	sp, #88	@ 0x58
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	466a      	mov	r2, sp
 8008f5a:	f000 f849 	bl	8008ff0 <_fstat_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	dbed      	blt.n	8008f3e <__swhatbuf_r+0x12>
 8008f62:	9901      	ldr	r1, [sp, #4]
 8008f64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f6c:	4259      	negs	r1, r3
 8008f6e:	4159      	adcs	r1, r3
 8008f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f74:	e7eb      	b.n	8008f4e <__swhatbuf_r+0x22>

08008f76 <__smakebuf_r>:
 8008f76:	898b      	ldrh	r3, [r1, #12]
 8008f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f7a:	079d      	lsls	r5, r3, #30
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	d507      	bpl.n	8008f92 <__smakebuf_r+0x1c>
 8008f82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	6163      	str	r3, [r4, #20]
 8008f8e:	b003      	add	sp, #12
 8008f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f92:	466a      	mov	r2, sp
 8008f94:	ab01      	add	r3, sp, #4
 8008f96:	f7ff ffc9 	bl	8008f2c <__swhatbuf_r>
 8008f9a:	9f00      	ldr	r7, [sp, #0]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7fe fdb1 	bl	8007b08 <_malloc_r>
 8008fa6:	b948      	cbnz	r0, 8008fbc <__smakebuf_r+0x46>
 8008fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d4ee      	bmi.n	8008f8e <__smakebuf_r+0x18>
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7e2      	b.n	8008f82 <__smakebuf_r+0xc>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	b15b      	cbz	r3, 8008fe6 <__smakebuf_r+0x70>
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd4:	f000 f81e 	bl	8009014 <_isatty_r>
 8008fd8:	b128      	cbz	r0, 8008fe6 <__smakebuf_r+0x70>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f023 0303 	bic.w	r3, r3, #3
 8008fe0:	f043 0301 	orr.w	r3, r3, #1
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	431d      	orrs	r5, r3
 8008fea:	81a5      	strh	r5, [r4, #12]
 8008fec:	e7cf      	b.n	8008f8e <__smakebuf_r+0x18>
	...

08008ff0 <_fstat_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4d06      	ldr	r5, [pc, #24]	@ (8009010 <_fstat_r+0x20>)
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	f7f8 fccb 	bl	8001998 <_fstat>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d102      	bne.n	800900c <_fstat_r+0x1c>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	b103      	cbz	r3, 800900c <_fstat_r+0x1c>
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	bd38      	pop	{r3, r4, r5, pc}
 800900e:	bf00      	nop
 8009010:	20000a10 	.word	0x20000a10

08009014 <_isatty_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	2300      	movs	r3, #0
 8009018:	4d05      	ldr	r5, [pc, #20]	@ (8009030 <_isatty_r+0x1c>)
 800901a:	4604      	mov	r4, r0
 800901c:	4608      	mov	r0, r1
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	f7f8 fcc9 	bl	80019b6 <_isatty>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_isatty_r+0x1a>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_isatty_r+0x1a>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	20000a10 	.word	0x20000a10

08009034 <_init>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr

08009040 <_fini>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr
