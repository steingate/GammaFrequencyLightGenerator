
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f08  080097c0  080097c0  0000a7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c8  0800a6c8  0000c1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c8  0800a6c8  0000b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6d0  0800a6d0  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6d0  0800a6d0  0000b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6d4  0800a6d4  0000b6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800a6d8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  200001f4  0800a8cc  0000c1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800a8cc  0000ca20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b99  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d52  00000000  00000000  0001ddb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00020b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019e8f  00000000  00000000  00021ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016200  00000000  00000000  0003bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00090297  00000000  00000000  00051d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e200e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e00  00000000  00000000  000e2051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f3c  00000000  00000000  000e2e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e8d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	080097a4 	.word	0x080097a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	080097a4 	.word	0x080097a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2lz>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	2200      	movs	r2, #0
 8000acc:	2300      	movs	r3, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	460d      	mov	r5, r1
 8000ad2:	f7ff ff73 	bl	80009bc <__aeabi_dcmplt>
 8000ad6:	b928      	cbnz	r0, 8000ae4 <__aeabi_d2lz+0x1c>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4629      	mov	r1, r5
 8000adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae0:	f000 b80a 	b.w	8000af8 <__aeabi_d2ulz>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000aea:	f000 f805 	bl	8000af8 <__aeabi_d2ulz>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2ulz>:
 8000af8:	b5d0      	push	{r4, r6, r7, lr}
 8000afa:	2200      	movs	r2, #0
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <__aeabi_d2ulz+0x34>)
 8000afe:	4606      	mov	r6, r0
 8000b00:	460f      	mov	r7, r1
 8000b02:	f7ff fce9 	bl	80004d8 <__aeabi_dmul>
 8000b06:	f7ff ffbf 	bl	8000a88 <__aeabi_d2uiz>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	f7ff fc6a 	bl	80003e4 <__aeabi_ui2d>
 8000b10:	2200      	movs	r2, #0
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <__aeabi_d2ulz+0x38>)
 8000b14:	f7ff fce0 	bl	80004d8 <__aeabi_dmul>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	4639      	mov	r1, r7
 8000b20:	f7ff fb22 	bl	8000168 <__aeabi_dsub>
 8000b24:	f7ff ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b2c:	3df00000 	.word	0x3df00000
 8000b30:	41f00000 	.word	0x41f00000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b35      	ldr	r3, [pc, #212]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a34      	ldr	r2, [pc, #208]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b32      	ldr	r3, [pc, #200]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2e      	ldr	r2, [pc, #184]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <MX_GPIO_Init+0xec>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b96:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000b98:	f002 f900 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2138      	movs	r1, #56	@ 0x38
 8000ba0:	4821      	ldr	r0, [pc, #132]	@ (8000c28 <MX_GPIO_Init+0xf4>)
 8000ba2:	f002 f8fb 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ba6:	23f0      	movs	r3, #240	@ 0xf0
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xf8>)
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481a      	ldr	r0, [pc, #104]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000bba:	f001 ff6b 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <MX_GPIO_Init+0xf0>)
 8000bd8:	f001 ff5c 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bdc:	2338      	movs	r3, #56	@ 0x38
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_GPIO_Init+0xf4>)
 8000bf4:	f001 ff4e 	bl	8002a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f001 fe60 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fe79 	bl	80028fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	2017      	movs	r0, #23
 8000c0e:	f001 fe58 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c12:	2017      	movs	r0, #23
 8000c14:	f001 fe71 	bl	80028fa <HAL_NVIC_EnableIRQ>

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	10110000 	.word	0x10110000

08000c30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_I2C1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c6e:	f002 f8c5 	bl	8002dfc <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 fdc8 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000210 	.word	0x20000210
 8000c84:	40005400 	.word	0x40005400
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <HAL_I2C_MspInit+0x70>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d123      	bne.n	8000cf4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc4:	23c0      	movs	r3, #192	@ 0xc0
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <HAL_I2C_MspInit+0x78>)
 8000cd8:	f001 fedc 	bl	8002a94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce6:	61d3      	str	r3, [r2, #28]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 fca0 	bl	8002650 <HAL_Init>

  /* USER CODE BEGIN Init */
  Frequency_Light=(int)(Func/Set_LightFrequency);
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <main+0xac>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb75 	bl	8000404 <__aeabi_i2d>
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <main+0xb0>)
 8000d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d20:	f7ff fd04 	bl	800072c <__aeabi_ddiv>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fe84 	bl	8000a38 <__aeabi_d2iz>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <main+0xb4>)
 8000d34:	6013      	str	r3, [r2, #0]
  Frequency_Sound=(int)(Func/Set_SoundFrequency);
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <main+0xac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb62 	bl	8000404 <__aeabi_i2d>
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <main+0xb8>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	f7ff fcf1 	bl	800072c <__aeabi_ddiv>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fe71 	bl	8000a38 <__aeabi_d2iz>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <main+0xbc>)
 8000d5a:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f83e 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff fee8 	bl	8000b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f7ff ff64 	bl	8000c30 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d68:	f001 fa6e 	bl	8002248 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d6c:	f001 faba 	bl	80022e4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d70:	f001 fb60 	bl	8002434 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d74:	f001 fb88 	bl	8002488 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d78:	f001 fa18 	bl	80021ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000d7c:	f000 fd74 	bl	8001868 <OLED_Init>
  OLED_DisPlay_On();
 8000d80:	f000 fdce 	bl	8001920 <OLED_DisPlay_On>
  //Bluetooth_Init();
  HAL_TIM_Base_Start_IT(&htim2);
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <main+0xc0>)
 8000d86:	f003 f94d 	bl	8004024 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d8a:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <main+0xc4>)
 8000d8c:	f003 f94a 	bl	8004024 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d90:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <main+0xc8>)
 8000d92:	f003 f947 	bl	8004024 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY)
 8000d96:	480f      	ldr	r0, [pc, #60]	@ (8000dd4 <main+0xcc>)
 8000d98:	f004 f899 	bl	8004ece <HAL_UART_GetState>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b20      	cmp	r3, #32
 8000da0:	d104      	bne.n	8000dac <main+0xa4>
    {
      HAL_UART_Receive_IT(&huart1,UART_str,30);
 8000da2:	221e      	movs	r2, #30
 8000da4:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <main+0xd0>)
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <main+0xcc>)
 8000da8:	f003 fdbd 	bl	8004926 <HAL_UART_Receive_IT>
    }
    Display();
 8000dac:	f000 f9ee 	bl	800118c <Display>
  {
 8000db0:	e7f1      	b.n	8000d96 <main+0x8e>
 8000db2:	bf00      	nop
 8000db4:	2000001c 	.word	0x2000001c
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000026c 	.word	0x2000026c
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	20000270 	.word	0x20000270
 8000dc8:	20000768 	.word	0x20000768
 8000dcc:	200007b0 	.word	0x200007b0
 8000dd0:	200007f8 	.word	0x200007f8
 8000dd4:	20000840 	.word	0x20000840
 8000dd8:	2000028c 	.word	0x2000028c

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	@ 0x40
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2228      	movs	r2, #40	@ 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 ff7d 	bl	8006cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc9d 	bl	8003764 <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e30:	f000 fcec 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 ff0a 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e5a:	f000 fcd7 	bl	800180c <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3740      	adds	r7, #64	@ 0x40
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <BTDecode>:

/* USER CODE BEGIN 4 */
void BTDecode(){
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b0bf      	sub	sp, #252	@ 0xfc
 8000e6c:	af06      	add	r7, sp, #24
  char *tmp=strstr(UART_str,"Display");
 8000e6e:	4997      	ldr	r1, [pc, #604]	@ (80010cc <BTDecode+0x264>)
 8000e70:	4897      	ldr	r0, [pc, #604]	@ (80010d0 <BTDecode+0x268>)
 8000e72:	f005 ff54 	bl	8006d1e <strstr>
 8000e76:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04b      	beq.n	8000f1a <BTDecode+0xb2>
  {
    char str[180],at_str[30];
    memset(str,0,sizeof(str));
 8000e82:	463b      	mov	r3, r7
 8000e84:	22b4      	movs	r2, #180	@ 0xb4
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 ff2e 	bl	8006cea <memset>
    memset(at_str,0,sizeof(at_str));
 8000e8e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e92:	221e      	movs	r2, #30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 ff27 	bl	8006cea <memset>
    sprintf(at_str,"AT+BTSPPSEND=0,%d\r\n",sizeof(str));
 8000e9c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000ea0:	22b4      	movs	r2, #180	@ 0xb4
 8000ea2:	498c      	ldr	r1, [pc, #560]	@ (80010d4 <BTDecode+0x26c>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fead 	bl	8006c04 <siprintf>
    HAL_UART_Transmit(&huart1,at_str,sizeof(at_str),50);
 8000eaa:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000eae:	2332      	movs	r3, #50	@ 0x32
 8000eb0:	221e      	movs	r2, #30
 8000eb2:	4889      	ldr	r0, [pc, #548]	@ (80010d8 <BTDecode+0x270>)
 8000eb4:	f003 fcb4 	bl	8004820 <HAL_UART_Transmit>
    sprintf(str,"LightFrequency:%lf\r\nSoundFrequency:%lf\r\nLightValue:%d\r\nSoundValue:%d\r\nTimeLeft:%d\r\n",Set_LightFrequency,Set_SoundFrequency,Value_Light,Value_Sound,Time_Left);
 8000eb8:	4b88      	ldr	r3, [pc, #544]	@ (80010dc <BTDecode+0x274>)
 8000eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ebe:	4b88      	ldr	r3, [pc, #544]	@ (80010e0 <BTDecode+0x278>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	4c87      	ldr	r4, [pc, #540]	@ (80010e4 <BTDecode+0x27c>)
 8000ec6:	6824      	ldr	r4, [r4, #0]
 8000ec8:	4d87      	ldr	r5, [pc, #540]	@ (80010e8 <BTDecode+0x280>)
 8000eca:	682d      	ldr	r5, [r5, #0]
 8000ecc:	4e87      	ldr	r6, [pc, #540]	@ (80010ec <BTDecode+0x284>)
 8000ece:	6836      	ldr	r6, [r6, #0]
 8000ed0:	46bc      	mov	ip, r7
 8000ed2:	9604      	str	r6, [sp, #16]
 8000ed4:	9503      	str	r5, [sp, #12]
 8000ed6:	9402      	str	r4, [sp, #8]
 8000ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4983      	ldr	r1, [pc, #524]	@ (80010f0 <BTDecode+0x288>)
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	f005 fe8e 	bl	8006c04 <siprintf>
    uint16_t t=3127*200;
 8000ee8:	f648 23f8 	movw	r3, #35576	@ 0x8af8
 8000eec:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    while(t--);
 8000ef0:	bf00      	nop
 8000ef2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	f8a7 20de 	strh.w	r2, [r7, #222]	@ 0xde
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f8      	bne.n	8000ef2 <BTDecode+0x8a>
    HAL_UART_Transmit(&huart1,str,sizeof(str),50);
 8000f00:	4639      	mov	r1, r7
 8000f02:	2332      	movs	r3, #50	@ 0x32
 8000f04:	22b4      	movs	r2, #180	@ 0xb4
 8000f06:	4874      	ldr	r0, [pc, #464]	@ (80010d8 <BTDecode+0x270>)
 8000f08:	f003 fc8a 	bl	8004820 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,"+++",sizeof("+++"),50);
 8000f0c:	2332      	movs	r3, #50	@ 0x32
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4978      	ldr	r1, [pc, #480]	@ (80010f4 <BTDecode+0x28c>)
 8000f12:	4871      	ldr	r0, [pc, #452]	@ (80010d8 <BTDecode+0x270>)
 8000f14:	f003 fc84 	bl	8004820 <HAL_UART_Transmit>
 8000f18:	e0d5      	b.n	80010c6 <BTDecode+0x25e>
    return;
  }
  tmp=strstr(UART_str,"LightFrequency");
 8000f1a:	4977      	ldr	r1, [pc, #476]	@ (80010f8 <BTDecode+0x290>)
 8000f1c:	486c      	ldr	r0, [pc, #432]	@ (80010d0 <BTDecode+0x268>)
 8000f1e:	f005 fefe 	bl	8006d1e <strstr>
 8000f22:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d024      	beq.n	8000f78 <BTDecode+0x110>
  {
    Set_LightFrequency=atof(tmp+14*sizeof(char));
 8000f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f32:	330e      	adds	r3, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fab7 	bl	80054a8 <atof>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4967      	ldr	r1, [pc, #412]	@ (80010dc <BTDecode+0x274>)
 8000f40:	e9c1 2300 	strd	r2, r3, [r1]
    Frequency_Light=(int)(Func/Set_LightFrequency);
 8000f44:	4b6d      	ldr	r3, [pc, #436]	@ (80010fc <BTDecode+0x294>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa5b 	bl	8000404 <__aeabi_i2d>
 8000f4e:	4b63      	ldr	r3, [pc, #396]	@ (80010dc <BTDecode+0x274>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fbea 	bl	800072c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd6a 	bl	8000a38 <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a66      	ldr	r2, [pc, #408]	@ (8001100 <BTDecode+0x298>)
 8000f68:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"LightFrequencySet",sizeof("LightFrequencySet"),50);
 8000f6a:	2332      	movs	r3, #50	@ 0x32
 8000f6c:	2212      	movs	r2, #18
 8000f6e:	4965      	ldr	r1, [pc, #404]	@ (8001104 <BTDecode+0x29c>)
 8000f70:	4865      	ldr	r0, [pc, #404]	@ (8001108 <BTDecode+0x2a0>)
 8000f72:	f003 fc55 	bl	8004820 <HAL_UART_Transmit>
    return;
 8000f76:	e0a6      	b.n	80010c6 <BTDecode+0x25e>
  }
  tmp=strstr(UART_str,"SoundFrequency");
 8000f78:	4964      	ldr	r1, [pc, #400]	@ (800110c <BTDecode+0x2a4>)
 8000f7a:	4855      	ldr	r0, [pc, #340]	@ (80010d0 <BTDecode+0x268>)
 8000f7c:	f005 fecf 	bl	8006d1e <strstr>
 8000f80:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d024      	beq.n	8000fd6 <BTDecode+0x16e>
  {
    Set_SoundFrequency=atof(tmp+14*sizeof(char));
 8000f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f90:	330e      	adds	r3, #14
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 fa88 	bl	80054a8 <atof>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4950      	ldr	r1, [pc, #320]	@ (80010e0 <BTDecode+0x278>)
 8000f9e:	e9c1 2300 	strd	r2, r3, [r1]
    Frequency_Sound=(int)(Func/Set_SoundFrequency);
 8000fa2:	4b56      	ldr	r3, [pc, #344]	@ (80010fc <BTDecode+0x294>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa2c 	bl	8000404 <__aeabi_i2d>
 8000fac:	4b4c      	ldr	r3, [pc, #304]	@ (80010e0 <BTDecode+0x278>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fbbb 	bl	800072c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd3b 	bl	8000a38 <__aeabi_d2iz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a52      	ldr	r2, [pc, #328]	@ (8001110 <BTDecode+0x2a8>)
 8000fc6:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"SoundFrequencySet",sizeof("SoundFrequencySet"),50);
 8000fc8:	2332      	movs	r3, #50	@ 0x32
 8000fca:	2212      	movs	r2, #18
 8000fcc:	4951      	ldr	r1, [pc, #324]	@ (8001114 <BTDecode+0x2ac>)
 8000fce:	484e      	ldr	r0, [pc, #312]	@ (8001108 <BTDecode+0x2a0>)
 8000fd0:	f003 fc26 	bl	8004820 <HAL_UART_Transmit>
    return;
 8000fd4:	e077      	b.n	80010c6 <BTDecode+0x25e>
  }
  tmp=strstr(UART_str,"LightValue");
 8000fd6:	4950      	ldr	r1, [pc, #320]	@ (8001118 <BTDecode+0x2b0>)
 8000fd8:	483d      	ldr	r0, [pc, #244]	@ (80010d0 <BTDecode+0x268>)
 8000fda:	f005 fea0 	bl	8006d1e <strstr>
 8000fde:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8000fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00f      	beq.n	800100a <BTDecode+0x1a2>
  {
    Value_Light=atoi(tmp+10*sizeof(char));
 8000fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000fee:	330a      	adds	r3, #10
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fa5c 	bl	80054ae <atoi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80010e4 <BTDecode+0x27c>)
 8000ffa:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"LightValueSet",sizeof("LightValueSet"),50);
 8000ffc:	2332      	movs	r3, #50	@ 0x32
 8000ffe:	220e      	movs	r2, #14
 8001000:	4946      	ldr	r1, [pc, #280]	@ (800111c <BTDecode+0x2b4>)
 8001002:	4841      	ldr	r0, [pc, #260]	@ (8001108 <BTDecode+0x2a0>)
 8001004:	f003 fc0c 	bl	8004820 <HAL_UART_Transmit>
    return;
 8001008:	e05d      	b.n	80010c6 <BTDecode+0x25e>
  }
  tmp=strstr(UART_str,"SoundValue");
 800100a:	4945      	ldr	r1, [pc, #276]	@ (8001120 <BTDecode+0x2b8>)
 800100c:	4830      	ldr	r0, [pc, #192]	@ (80010d0 <BTDecode+0x268>)
 800100e:	f005 fe86 	bl	8006d1e <strstr>
 8001012:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 8001016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00f      	beq.n	800103e <BTDecode+0x1d6>
  {
    Value_Sound=atoi(tmp+10*sizeof(char));
 800101e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001022:	330a      	adds	r3, #10
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fa42 	bl	80054ae <atoi>
 800102a:	4603      	mov	r3, r0
 800102c:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <BTDecode+0x280>)
 800102e:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"SoundValueSet",sizeof("SoundValueSet"),50);
 8001030:	2332      	movs	r3, #50	@ 0x32
 8001032:	220e      	movs	r2, #14
 8001034:	493b      	ldr	r1, [pc, #236]	@ (8001124 <BTDecode+0x2bc>)
 8001036:	4834      	ldr	r0, [pc, #208]	@ (8001108 <BTDecode+0x2a0>)
 8001038:	f003 fbf2 	bl	8004820 <HAL_UART_Transmit>
    return;
 800103c:	e043      	b.n	80010c6 <BTDecode+0x25e>
  }
  tmp=strstr(UART_str,"WorkTime");
 800103e:	493a      	ldr	r1, [pc, #232]	@ (8001128 <BTDecode+0x2c0>)
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <BTDecode+0x268>)
 8001042:	f005 fe6c 	bl	8006d1e <strstr>
 8001046:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
  if (tmp!=NULL)
 800104a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d039      	beq.n	80010c6 <BTDecode+0x25e>
  {
    int tmp_v=(*(tmp+8)-'0')*10000+(*(tmp+9)-'0')*1000+(*(tmp+10)-'0')*100+(*(tmp+11)-'0')*10+(*(tmp+12)-'0');
 8001052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001056:	3308      	adds	r3, #8
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	3b30      	subs	r3, #48	@ 0x30
 800105c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001060:	fb03 f202 	mul.w	r2, r3, r2
 8001064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001068:	3309      	adds	r3, #9
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3b30      	subs	r3, #48	@ 0x30
 800106e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	441a      	add	r2, r3
 8001078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800107c:	330a      	adds	r3, #10
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b30      	subs	r3, #48	@ 0x30
 8001082:	2164      	movs	r1, #100	@ 0x64
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	18d1      	adds	r1, r2, r3
 800108a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800108e:	330b      	adds	r3, #11
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	18ca      	adds	r2, r1, r3
 80010a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010a4:	330c      	adds	r3, #12
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	3b30      	subs	r3, #48	@ 0x30
 80010aa:	4413      	add	r3, r2
 80010ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    Time_Left=tmp_v;
 80010b0:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <BTDecode+0x284>)
 80010b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010b6:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,"TimeLeftSet",sizeof("TimeLeftSet"),50);
 80010b8:	2332      	movs	r3, #50	@ 0x32
 80010ba:	220c      	movs	r2, #12
 80010bc:	491b      	ldr	r1, [pc, #108]	@ (800112c <BTDecode+0x2c4>)
 80010be:	4812      	ldr	r0, [pc, #72]	@ (8001108 <BTDecode+0x2a0>)
 80010c0:	f003 fbae 	bl	8004820 <HAL_UART_Transmit>
    return;
 80010c4:	bf00      	nop
  }
}
 80010c6:	37e4      	adds	r7, #228	@ 0xe4
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	080097c0 	.word	0x080097c0
 80010d0:	2000028c 	.word	0x2000028c
 80010d4:	080097c8 	.word	0x080097c8
 80010d8:	20000840 	.word	0x20000840
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000018 	.word	0x20000018
 80010f0:	080097dc 	.word	0x080097dc
 80010f4:	08009830 	.word	0x08009830
 80010f8:	08009834 	.word	0x08009834
 80010fc:	2000001c 	.word	0x2000001c
 8001100:	2000026c 	.word	0x2000026c
 8001104:	08009844 	.word	0x08009844
 8001108:	20000888 	.word	0x20000888
 800110c:	08009858 	.word	0x08009858
 8001110:	20000270 	.word	0x20000270
 8001114:	08009868 	.word	0x08009868
 8001118:	0800987c 	.word	0x0800987c
 800111c:	08009888 	.word	0x08009888
 8001120:	08009898 	.word	0x08009898
 8001124:	080098a4 	.word	0x080098a4
 8001128:	080098b4 	.word	0x080098b4
 800112c:	080098c0 	.word	0x080098c0

08001130 <Decode>:
void Decode(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  char *tmp=strstr(UART_str,"BTDATA");
 8001136:	4907      	ldr	r1, [pc, #28]	@ (8001154 <Decode+0x24>)
 8001138:	4807      	ldr	r0, [pc, #28]	@ (8001158 <Decode+0x28>)
 800113a:	f005 fdf0 	bl	8006d1e <strstr>
 800113e:	6078      	str	r0, [r7, #4]
  if (tmp!=NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <Decode+0x1a>
  {
    BTDecode();
 8001146:	f7ff fe8f 	bl	8000e68 <BTDecode>
  }
  
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	080098cc 	.word	0x080098cc
 8001158:	2000028c 	.word	0x2000028c

0800115c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (huart==&huart1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_UART_RxCpltCallback+0x28>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x14>
  {
    Decode();
 800116c:	f7ff ffe0 	bl	8001130 <Decode>
  }
  memset(UART_str,0,sizeof(UART_str));
 8001170:	2250      	movs	r2, #80	@ 0x50
 8001172:	2100      	movs	r1, #0
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <HAL_UART_RxCpltCallback+0x2c>)
 8001176:	f005 fdb8 	bl	8006cea <memset>
  //HAL_UART_Receive_IT(&huart1,UART_str,30);
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000840 	.word	0x20000840
 8001188:	2000028c 	.word	0x2000028c

0800118c <Display>:
  } else
  {
    HAL_UART_Transmit(&huart1,"BT_Connected\r\n",sizeof("BT_Connected\r\n"),50);
  }
}
void Display(){
 800118c:	b580      	push	{r7, lr}
 800118e:	b096      	sub	sp, #88	@ 0x58
 8001190:	af02      	add	r7, sp, #8
  OLED_NewFrame();
 8001192:	f000 fbd3 	bl	800193c <OLED_NewFrame>
  if (!Menu_State)
 8001196:	4b60      	ldr	r3, [pc, #384]	@ (8001318 <Display+0x18c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d14b      	bne.n	8001236 <Display+0xaa>
  {
    char str[80];
    sprintf(str,"光频:%f",Set_LightFrequency);
 800119e:	4b5f      	ldr	r3, [pc, #380]	@ (800131c <Display+0x190>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	4638      	mov	r0, r7
 80011a6:	495e      	ldr	r1, [pc, #376]	@ (8001320 <Display+0x194>)
 80011a8:	f005 fd2c 	bl	8006c04 <siprintf>
    OLED_PrintString(0,0,str,&font12x12,OLED_COLOR_NORMAL);
 80011ac:	463a      	mov	r2, r7
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001324 <Display+0x198>)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 fde5 	bl	8001d86 <OLED_PrintString>
    sprintf(str,"声频:%f",Set_SoundFrequency);
 80011bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001328 <Display+0x19c>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	4638      	mov	r0, r7
 80011c4:	4959      	ldr	r1, [pc, #356]	@ (800132c <Display+0x1a0>)
 80011c6:	f005 fd1d 	bl	8006c04 <siprintf>
    OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 80011ca:	463a      	mov	r2, r7
 80011cc:	2300      	movs	r3, #0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4b54      	ldr	r3, [pc, #336]	@ (8001324 <Display+0x198>)
 80011d2:	210c      	movs	r1, #12
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 fdd6 	bl	8001d86 <OLED_PrintString>
    sprintf(str,"光强:%d",Value_Light);
 80011da:	4b55      	ldr	r3, [pc, #340]	@ (8001330 <Display+0x1a4>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	463b      	mov	r3, r7
 80011e0:	4954      	ldr	r1, [pc, #336]	@ (8001334 <Display+0x1a8>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fd0e 	bl	8006c04 <siprintf>
    OLED_PrintString(0,24,str,&font12x12,OLED_COLOR_NORMAL);
 80011e8:	463a      	mov	r2, r7
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <Display+0x198>)
 80011f0:	2118      	movs	r1, #24
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 fdc7 	bl	8001d86 <OLED_PrintString>
    sprintf(str,"音量:%d",Value_Sound);
 80011f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <Display+0x1ac>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	463b      	mov	r3, r7
 80011fe:	494f      	ldr	r1, [pc, #316]	@ (800133c <Display+0x1b0>)
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fcff 	bl	8006c04 <siprintf>
    OLED_PrintString(0,36,str,&font12x12,OLED_COLOR_NORMAL);
 8001206:	463a      	mov	r2, r7
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b45      	ldr	r3, [pc, #276]	@ (8001324 <Display+0x198>)
 800120e:	2124      	movs	r1, #36	@ 0x24
 8001210:	2000      	movs	r0, #0
 8001212:	f000 fdb8 	bl	8001d86 <OLED_PrintString>
    sprintf(str,"剩余工作时间:%d",Time_Left);
 8001216:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <Display+0x1b4>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	463b      	mov	r3, r7
 800121c:	4949      	ldr	r1, [pc, #292]	@ (8001344 <Display+0x1b8>)
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fcf0 	bl	8006c04 <siprintf>
    OLED_PrintString(0,48,str,&font12x12,OLED_COLOR_NORMAL);
 8001224:	463a      	mov	r2, r7
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <Display+0x198>)
 800122c:	2130      	movs	r1, #48	@ 0x30
 800122e:	2000      	movs	r0, #0
 8001230:	f000 fda9 	bl	8001d86 <OLED_PrintString>
 8001234:	e069      	b.n	800130a <Display+0x17e>
  } else
  {
    OLED_PrintString(0,0,"设置模式",&font12x12,OLED_COLOR_NORMAL);
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b3a      	ldr	r3, [pc, #232]	@ (8001324 <Display+0x198>)
 800123c:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <Display+0x1bc>)
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fda0 	bl	8001d86 <OLED_PrintString>
    char str[80];
    switch (State)
 8001246:	4b41      	ldr	r3, [pc, #260]	@ (800134c <Display+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d85c      	bhi.n	8001308 <Display+0x17c>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <Display+0xc8>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001269 	.word	0x08001269
 8001258:	08001289 	.word	0x08001289
 800125c:	080012a9 	.word	0x080012a9
 8001260:	080012c9 	.word	0x080012c9
 8001264:	080012e9 	.word	0x080012e9
    {
      case 0:
        sprintf(str,"光频:%lf",Set_LightFrequency);
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <Display+0x190>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	4638      	mov	r0, r7
 8001270:	4937      	ldr	r1, [pc, #220]	@ (8001350 <Display+0x1c4>)
 8001272:	f005 fcc7 	bl	8006c04 <siprintf>
        OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 8001276:	463a      	mov	r2, r7
 8001278:	2300      	movs	r3, #0
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <Display+0x198>)
 800127e:	210c      	movs	r1, #12
 8001280:	2000      	movs	r0, #0
 8001282:	f000 fd80 	bl	8001d86 <OLED_PrintString>
        break;
 8001286:	e040      	b.n	800130a <Display+0x17e>
      case 1:
        sprintf(str,"声频:%lf",Set_SoundFrequency);
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <Display+0x19c>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	4638      	mov	r0, r7
 8001290:	4930      	ldr	r1, [pc, #192]	@ (8001354 <Display+0x1c8>)
 8001292:	f005 fcb7 	bl	8006c04 <siprintf>
        OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 8001296:	463a      	mov	r2, r7
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <Display+0x198>)
 800129e:	210c      	movs	r1, #12
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 fd70 	bl	8001d86 <OLED_PrintString>
        //OLED_PrintString(0,12,,&font12x12,OLED_COLOR_NORMAL);
        break;
 80012a6:	e030      	b.n	800130a <Display+0x17e>
      case 2:
        sprintf(str,"光强:%d",Value_Light);
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <Display+0x1a4>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	463b      	mov	r3, r7
 80012ae:	4921      	ldr	r1, [pc, #132]	@ (8001334 <Display+0x1a8>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 fca7 	bl	8006c04 <siprintf>
        OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 80012b6:	463a      	mov	r2, r7
 80012b8:	2300      	movs	r3, #0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <Display+0x198>)
 80012be:	210c      	movs	r1, #12
 80012c0:	2000      	movs	r0, #0
 80012c2:	f000 fd60 	bl	8001d86 <OLED_PrintString>
        //OLED_PrintString(0,12,,&font12x12,OLED_COLOR_NORMAL);
        break;
 80012c6:	e020      	b.n	800130a <Display+0x17e>
      case 3:
        sprintf(str,"音量:%d",Value_Sound);
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <Display+0x1ac>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	463b      	mov	r3, r7
 80012ce:	491b      	ldr	r1, [pc, #108]	@ (800133c <Display+0x1b0>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f005 fc97 	bl	8006c04 <siprintf>
        OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 80012d6:	463a      	mov	r2, r7
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <Display+0x198>)
 80012de:	210c      	movs	r1, #12
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 fd50 	bl	8001d86 <OLED_PrintString>
       // OLED_PrintString(0,12,"音量:%d",Value_Sound,&font12x12,OLED_COLOR_NORMAL);
        break;
 80012e6:	e010      	b.n	800130a <Display+0x17e>
      case 4:
        sprintf(str,"剩余工作时间:%d",Time_Left);
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <Display+0x1b4>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	463b      	mov	r3, r7
 80012ee:	4915      	ldr	r1, [pc, #84]	@ (8001344 <Display+0x1b8>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 fc87 	bl	8006c04 <siprintf>
        OLED_PrintString(0,12,str,&font12x12,OLED_COLOR_NORMAL);
 80012f6:	463a      	mov	r2, r7
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <Display+0x198>)
 80012fe:	210c      	movs	r1, #12
 8001300:	2000      	movs	r0, #0
 8001302:	f000 fd40 	bl	8001d86 <OLED_PrintString>
        //OLED_PrintString(0,12,"剩余工作时间:%d",Time_Left,&font12x12,OLED_COLOR_NORMAL);
        break;
 8001306:	e000      	b.n	800130a <Display+0x17e>
      default:
        break;
 8001308:	bf00      	nop
    }
  }
  OLED_ShowFrame();
 800130a:	f000 fb23 	bl	8001954 <OLED_ShowFrame>
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	@ 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000284 	.word	0x20000284
 800131c:	20000008 	.word	0x20000008
 8001320:	08009a08 	.word	0x08009a08
 8001324:	0800a268 	.word	0x0800a268
 8001328:	20000010 	.word	0x20000010
 800132c:	08009a14 	.word	0x08009a14
 8001330:	20000000 	.word	0x20000000
 8001334:	08009a20 	.word	0x08009a20
 8001338:	20000004 	.word	0x20000004
 800133c:	08009a2c 	.word	0x08009a2c
 8001340:	20000018 	.word	0x20000018
 8001344:	08009a38 	.word	0x08009a38
 8001348:	08009a50 	.word	0x08009a50
 800134c:	20000280 	.word	0x20000280
 8001350:	08009a60 	.word	0x08009a60
 8001354:	08009a6c 	.word	0x08009a6c

08001358 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d114      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
    Time_Left--;
 800136a:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a55      	ldr	r2, [pc, #340]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001372:	6013      	str	r3, [r2, #0]
    if (!Time_Left)
 8001374:	4b54      	ldr	r3, [pc, #336]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10b      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2110      	movs	r1, #16
 8001380:	4852      	ldr	r0, [pc, #328]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001382:	f001 fd0b 	bl	8002d9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	4850      	ldr	r0, [pc, #320]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800138c:	f001 fd06 	bl	8002d9c <HAL_GPIO_WritePin>
      HAL_PWR_EnterSTANDBYMode(); 
 8001390:	f002 f9d0 	bl	8003734 <HAL_PWR_EnterSTANDBYMode>
    }
  }
  if (htim->Instance==TIM3)//htim3的周期：7.28*1e-5s
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a4d      	ldr	r2, [pc, #308]	@ (80014d0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d153      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0xee>
  {
    Counter_Flag_Light++;
 800139e:	4b4d      	ldr	r3, [pc, #308]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a4b      	ldr	r2, [pc, #300]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80013a6:	6013      	str	r3, [r2, #0]
    Counter_Flag_Sound++;
 80013a8:	4b4b      	ldr	r3, [pc, #300]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a4a      	ldr	r2, [pc, #296]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80013b0:	6013      	str	r3, [r2, #0]
    if (Counter_Flag_Light>(int)(0.2*Frequency_Light))
 80013b2:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f824 	bl	8000404 <__aeabi_i2d>
 80013bc:	a340      	add	r3, pc, #256	@ (adr r3, 80014c0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f889 	bl	80004d8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb33 	bl	8000a38 <__aeabi_d2iz>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	da03      	bge.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    {
      Signal_Set_Light=0;
 80013dc:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e002      	b.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x92>
    } else
    {
      Signal_Set_Light=1;
 80013e4:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Sound>(int)(0.5*Frequency_Sound))
 80013ea:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f808 	bl	8000404 <__aeabi_i2d>
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013fa:	f7ff f86d 	bl	80004d8 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fb17 	bl	8000a38 <__aeabi_d2iz>
 800140a:	4602      	mov	r2, r0
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da03      	bge.n	800141c <HAL_TIM_PeriodElapsedCallback+0xc4>
    {
      Signal_Set_Sound=0;
 8001414:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e002      	b.n	8001422 <HAL_TIM_PeriodElapsedCallback+0xca>
    } else
    {
      Signal_Set_Sound=1;
 800141c:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x194>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Light==Frequency_Light)
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d102      	bne.n	8001434 <HAL_TIM_PeriodElapsedCallback+0xdc>
    {
      Counter_Flag_Light=0;
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    }
    if (Counter_Flag_Sound==Frequency_Sound)
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0xee>
    {
      Counter_Flag_Sound=0;
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
    }
  }
  if (htim->Instance==TIM4)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a29      	ldr	r2, [pc, #164]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d133      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x160>
  {
    Counter_Flag_TIM4++;
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001458:	6013      	str	r3, [r2, #0]
    if (Counter_Flag_TIM4>Value_Light)
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	dd05      	ble.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x11a>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2110      	movs	r1, #16
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800146c:	f001 fc96 	bl	8002d9c <HAL_GPIO_WritePin>
 8001470:	e007      	b.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x12a>
    } else
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,Signal_Set_Light);
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2110      	movs	r1, #16
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800147e:	f001 fc8d 	bl	8002d9c <HAL_GPIO_WritePin>
    }
    if (Counter_Flag_TIM4>Value_Sound)
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	dd05      	ble.n	800149a <HAL_TIM_PeriodElapsedCallback+0x142>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2120      	movs	r1, #32
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001494:	f001 fc82 	bl	8002d9c <HAL_GPIO_WritePin>
 8001498:	e007      	b.n	80014aa <HAL_TIM_PeriodElapsedCallback+0x152>
    } else
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,Signal_Set_Light);
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	2120      	movs	r1, #32
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80014a6:	f001 fc79 	bl	8002d9c <HAL_GPIO_WritePin>
    }
    if (Counter_Flag_TIM4==10)
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d102      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x160>
    {
      Counter_Flag_TIM4=0;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	9999999a 	.word	0x9999999a
 80014c4:	3fc99999 	.word	0x3fc99999
 80014c8:	20000018 	.word	0x20000018
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40000400 	.word	0x40000400
 80014d4:	20000264 	.word	0x20000264
 80014d8:	20000268 	.word	0x20000268
 80014dc:	2000026c 	.word	0x2000026c
 80014e0:	20000278 	.word	0x20000278
 80014e4:	20000270 	.word	0x20000270
 80014e8:	3fe00000 	.word	0x3fe00000
 80014ec:	2000027c 	.word	0x2000027c
 80014f0:	40000800 	.word	0x40000800
 80014f4:	20000274 	.word	0x20000274
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  uint_fast32_t Now_Tick=HAL_GetTick();
 800150a:	f001 f8f9 	bl	8002700 <HAL_GetTick>
 800150e:	60f8      	str	r0, [r7, #12]
  if(Now_Tick-Last_Tick<10){
 8001510:	4b8f      	ldr	r3, [pc, #572]	@ (8001750 <HAL_GPIO_EXTI_Callback+0x250>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b09      	cmp	r3, #9
 800151a:	d803      	bhi.n	8001524 <HAL_GPIO_EXTI_Callback+0x24>
    Last_Tick=Now_Tick;
 800151c:	4a8c      	ldr	r2, [pc, #560]	@ (8001750 <HAL_GPIO_EXTI_Callback+0x250>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6013      	str	r3, [r2, #0]
    return;
 8001522:	e161      	b.n	80017e8 <HAL_GPIO_EXTI_Callback+0x2e8>
  }
  Last_Tick=Now_Tick;
 8001524:	4a8a      	ldr	r2, [pc, #552]	@ (8001750 <HAL_GPIO_EXTI_Callback+0x250>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6013      	str	r3, [r2, #0]
  if (GPIO_Pin==GPIO_PIN_4&&Menu_State)
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d17c      	bne.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
 8001530:	4b88      	ldr	r3, [pc, #544]	@ (8001754 <HAL_GPIO_EXTI_Callback+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d078      	beq.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
  {
    switch (State)
 8001538:	4b87      	ldr	r3, [pc, #540]	@ (8001758 <HAL_GPIO_EXTI_Callback+0x258>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d873      	bhi.n	8001628 <HAL_GPIO_EXTI_Callback+0x128>
 8001540:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <HAL_GPIO_EXTI_Callback+0x48>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	0800155d 	.word	0x0800155d
 800154c:	080015a3 	.word	0x080015a3
 8001550:	080015e9 	.word	0x080015e9
 8001554:	08001603 	.word	0x08001603
 8001558:	0800161d 	.word	0x0800161d
    {
      case 0:
        Set_LightFrequency+=0.1;
 800155c:	4b7f      	ldr	r3, [pc, #508]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 800155e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001562:	a379      	add	r3, pc, #484	@ (adr r3, 8001748 <HAL_GPIO_EXTI_Callback+0x248>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7fe fe00 	bl	800016c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	497a      	ldr	r1, [pc, #488]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001572:	e9c1 2300 	strd	r2, r3, [r1]
        Set_LightFrequency=Set_LightFrequency>40?40:Set_LightFrequency;
 8001576:	4b79      	ldr	r3, [pc, #484]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x260>)
 8001582:	f7ff fa39 	bl	80009f8 <__aeabi_dcmpgt>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_EXTI_Callback+0x94>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b73      	ldr	r3, [pc, #460]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x260>)
 8001592:	e002      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x9a>
 8001594:	4b71      	ldr	r3, [pc, #452]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	4970      	ldr	r1, [pc, #448]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 800159c:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80015a0:	e043      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
      case 1:
        Set_SoundFrequency+=0.1;
 80015a2:	4b70      	ldr	r3, [pc, #448]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80015a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a8:	a367      	add	r3, pc, #412	@ (adr r3, 8001748 <HAL_GPIO_EXTI_Callback+0x248>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe fddd 	bl	800016c <__adddf3>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	496b      	ldr	r1, [pc, #428]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80015b8:	e9c1 2300 	strd	r2, r3, [r1]
        Set_SoundFrequency=Set_SoundFrequency>40?40:Set_SoundFrequency;
 80015bc:	4b69      	ldr	r3, [pc, #420]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b66      	ldr	r3, [pc, #408]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x260>)
 80015c8:	f7ff fa16 	bl	80009f8 <__aeabi_dcmpgt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_EXTI_Callback+0xda>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b62      	ldr	r3, [pc, #392]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x260>)
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0xe0>
 80015da:	4b62      	ldr	r3, [pc, #392]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	4960      	ldr	r1, [pc, #384]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80015e6:	e020      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
      case 2:
        Value_Light++;
 80015e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80015f0:	6013      	str	r3, [r2, #0]
        Value_Light=Value_Light>10?10:Value_Light;
 80015f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	bfa8      	it	ge
 80015fa:	230a      	movge	r3, #10
 80015fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80015fe:	6013      	str	r3, [r2, #0]
        break;
 8001600:	e013      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
      case 3:
        Value_Sound++;
 8001602:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 800160a:	6013      	str	r3, [r2, #0]
        Value_Sound=Value_Sound>10?10:Value_Sound;
 800160c:	4b57      	ldr	r3, [pc, #348]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b0a      	cmp	r3, #10
 8001612:	bfa8      	it	ge
 8001614:	230a      	movge	r3, #10
 8001616:	4a55      	ldr	r2, [pc, #340]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001618:	6013      	str	r3, [r2, #0]
        break;
 800161a:	e006      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
      case 4:
        Time_Left++;
 800161c:	4b54      	ldr	r3, [pc, #336]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a53      	ldr	r2, [pc, #332]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x270>)
 8001624:	6013      	str	r3, [r2, #0]
        break;
 8001626:	e000      	b.n	800162a <HAL_GPIO_EXTI_Callback+0x12a>
      default:
        break;
 8001628:	bf00      	nop
    }
  }
  if (GPIO_Pin==GPIO_PIN_5&&Menu_State)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b20      	cmp	r3, #32
 800162e:	d17a      	bne.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
 8001630:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <HAL_GPIO_EXTI_Callback+0x254>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d076      	beq.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
  {
    switch (State)
 8001638:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_GPIO_EXTI_Callback+0x258>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d871      	bhi.n	8001724 <HAL_GPIO_EXTI_Callback+0x224>
 8001640:	a201      	add	r2, pc, #4	@ (adr r2, 8001648 <HAL_GPIO_EXTI_Callback+0x148>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	0800165d 	.word	0x0800165d
 800164c:	080016a3 	.word	0x080016a3
 8001650:	080016e9 	.word	0x080016e9
 8001654:	08001701 	.word	0x08001701
 8001658:	08001719 	.word	0x08001719
    {
      case 0:
        Set_LightFrequency-=0.1;
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 800165e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001662:	a339      	add	r3, pc, #228	@ (adr r3, 8001748 <HAL_GPIO_EXTI_Callback+0x248>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fd7e 	bl	8000168 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	493a      	ldr	r1, [pc, #232]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001672:	e9c1 2300 	strd	r2, r3, [r1]
        Set_LightFrequency=Set_LightFrequency<37?37:Set_LightFrequency;
 8001676:	4b39      	ldr	r3, [pc, #228]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x274>)
 8001682:	f7ff f99b 	bl	80009bc <__aeabi_dcmplt>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x194>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x274>)
 8001692:	e002      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x19a>
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	4930      	ldr	r1, [pc, #192]	@ (800175c <HAL_GPIO_EXTI_Callback+0x25c>)
 800169c:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80016a0:	e041      	b.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
      case 1:
        Set_SoundFrequency-=0.1;
 80016a2:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80016a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a8:	a327      	add	r3, pc, #156	@ (adr r3, 8001748 <HAL_GPIO_EXTI_Callback+0x248>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe fd5b 	bl	8000168 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	492b      	ldr	r1, [pc, #172]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]
        Set_SoundFrequency=Set_SoundFrequency<37?37:Set_SoundFrequency;
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80016be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x274>)
 80016c8:	f7ff f978 	bl	80009bc <__aeabi_dcmplt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_EXTI_Callback+0x1da>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x274>)
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_EXTI_Callback+0x1e0>
 80016da:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	4920      	ldr	r1, [pc, #128]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x264>)
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80016e6:	e01e      	b.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
      case 2:
        Value_Light--;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80016f0:	6013      	str	r3, [r2, #0]
        Value_Light=Value_Light<0?0:Value_Light;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80016fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x268>)
 80016fc:	6013      	str	r3, [r2, #0]
        break;
 80016fe:	e012      	b.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
      case 3:
        Value_Sound--;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001708:	6013      	str	r3, [r2, #0]
        Value_Sound=Value_Sound<0?0:Value_Sound;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001712:	4a16      	ldr	r2, [pc, #88]	@ (800176c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001714:	6013      	str	r3, [r2, #0]
        break;
 8001716:	e006      	b.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
      case 4:
        Time_Left--;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a14      	ldr	r2, [pc, #80]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x270>)
 8001720:	6013      	str	r3, [r2, #0]
        break;
 8001722:	e000      	b.n	8001726 <HAL_GPIO_EXTI_Callback+0x226>
      default:
        break;
 8001724:	bf00      	nop
    }
  }
  if (GPIO_Pin==GPIO_PIN_6&&Menu_State)
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b40      	cmp	r3, #64	@ 0x40
 800172a:	d12a      	bne.n	8001782 <HAL_GPIO_EXTI_Callback+0x282>
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_GPIO_EXTI_Callback+0x254>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d026      	beq.n	8001782 <HAL_GPIO_EXTI_Callback+0x282>
  {
    if (State+1==5)
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_GPIO_EXTI_Callback+0x258>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d11d      	bne.n	8001778 <HAL_GPIO_EXTI_Callback+0x278>
    {
      State=0;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_GPIO_EXTI_Callback+0x258>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e01e      	b.n	8001782 <HAL_GPIO_EXTI_Callback+0x282>
 8001744:	f3af 8000 	nop.w
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fb99999 	.word	0x3fb99999
 8001750:	20000288 	.word	0x20000288
 8001754:	20000284 	.word	0x20000284
 8001758:	20000280 	.word	0x20000280
 800175c:	20000008 	.word	0x20000008
 8001760:	40440000 	.word	0x40440000
 8001764:	20000010 	.word	0x20000010
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004
 8001770:	20000018 	.word	0x20000018
 8001774:	40428000 	.word	0x40428000
    } else
    {
      State++;
 8001778:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001780:	6013      	str	r3, [r2, #0]
    }
  }
  if (GPIO_Pin==GPIO_PIN_7)
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b80      	cmp	r3, #128	@ 0x80
 8001786:	d109      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x29c>
  {
    Menu_State=!Menu_State;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800179a:	601a      	str	r2, [r3, #0]
  }
  Frequency_Light=(int)(Func/Set_LightFrequency);
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe2f 	bl	8000404 <__aeabi_i2d>
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ffbe 	bl	800072c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f93e 	bl	8000a38 <__aeabi_d2iz>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a10      	ldr	r2, [pc, #64]	@ (8001800 <HAL_GPIO_EXTI_Callback+0x300>)
 80017c0:	6013      	str	r3, [r2, #0]
  Frequency_Sound=(int)(Func/Set_SoundFrequency);
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe1c 	bl	8000404 <__aeabi_i2d>
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_GPIO_EXTI_Callback+0x304>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ffab 	bl	800072c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f92b 	bl	8000a38 <__aeabi_d2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x308>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000280 	.word	0x20000280
 80017f4:	20000284 	.word	0x20000284
 80017f8:	2000001c 	.word	0x2000001c
 80017fc:	20000008 	.word	0x20000008
 8001800:	2000026c 	.word	0x2000026c
 8001804:	20000010 	.word	0x20000010
 8001808:	20000270 	.word	0x20000270

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	b29b      	uxth	r3, r3
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	2178      	movs	r1, #120	@ 0x78
 8001832:	4803      	ldr	r0, [pc, #12]	@ (8001840 <OLED_Send+0x28>)
 8001834:	f001 fc26 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000210 	.word	0x20000210

08001844 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <OLED_SendCmd+0x20>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001854:	2102      	movs	r1, #2
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <OLED_SendCmd+0x20>)
 8001858:	f7ff ffde 	bl	8001818 <OLED_Send>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200006dc 	.word	0x200006dc

08001868 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800186c:	20ae      	movs	r0, #174	@ 0xae
 800186e:	f7ff ffe9 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001872:	2020      	movs	r0, #32
 8001874:	f7ff ffe6 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001878:	2010      	movs	r0, #16
 800187a:	f7ff ffe3 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800187e:	20b0      	movs	r0, #176	@ 0xb0
 8001880:	f7ff ffe0 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001884:	20c8      	movs	r0, #200	@ 0xc8
 8001886:	f7ff ffdd 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff ffda 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001890:	2010      	movs	r0, #16
 8001892:	f7ff ffd7 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001896:	2040      	movs	r0, #64	@ 0x40
 8001898:	f7ff ffd4 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 800189c:	2081      	movs	r0, #129	@ 0x81
 800189e:	f7ff ffd1 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80018a2:	20df      	movs	r0, #223	@ 0xdf
 80018a4:	f7ff ffce 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80018a8:	20a1      	movs	r0, #161	@ 0xa1
 80018aa:	f7ff ffcb 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80018ae:	20a6      	movs	r0, #166	@ 0xa6
 80018b0:	f7ff ffc8 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80018b4:	20a8      	movs	r0, #168	@ 0xa8
 80018b6:	f7ff ffc5 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80018ba:	203f      	movs	r0, #63	@ 0x3f
 80018bc:	f7ff ffc2 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80018c0:	20a4      	movs	r0, #164	@ 0xa4
 80018c2:	f7ff ffbf 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80018c6:	20d3      	movs	r0, #211	@ 0xd3
 80018c8:	f7ff ffbc 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ffb9 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80018d2:	20d5      	movs	r0, #213	@ 0xd5
 80018d4:	f7ff ffb6 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80018d8:	20f0      	movs	r0, #240	@ 0xf0
 80018da:	f7ff ffb3 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80018de:	20d9      	movs	r0, #217	@ 0xd9
 80018e0:	f7ff ffb0 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 80018e4:	2022      	movs	r0, #34	@ 0x22
 80018e6:	f7ff ffad 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 80018ea:	20da      	movs	r0, #218	@ 0xda
 80018ec:	f7ff ffaa 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80018f0:	2012      	movs	r0, #18
 80018f2:	f7ff ffa7 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 80018f6:	20db      	movs	r0, #219	@ 0xdb
 80018f8:	f7ff ffa4 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 80018fc:	2020      	movs	r0, #32
 80018fe:	f7ff ffa1 	bl	8001844 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001902:	208d      	movs	r0, #141	@ 0x8d
 8001904:	f7ff ff9e 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001908:	2014      	movs	r0, #20
 800190a:	f7ff ff9b 	bl	8001844 <OLED_SendCmd>

  OLED_NewFrame();
 800190e:	f000 f815 	bl	800193c <OLED_NewFrame>
  OLED_ShowFrame();
 8001912:	f000 f81f 	bl	8001954 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001916:	20af      	movs	r0, #175	@ 0xaf
 8001918:	f7ff ff94 	bl	8001844 <OLED_SendCmd>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <OLED_DisPlay_On>:

/**
 * @brief 开启OLED显示
 */
void OLED_DisPlay_On()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  OLED_SendCmd(0x8D); // 电荷泵使能
 8001924:	208d      	movs	r0, #141	@ 0x8d
 8001926:	f7ff ff8d 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0x14); // 开启电荷泵
 800192a:	2014      	movs	r0, #20
 800192c:	f7ff ff8a 	bl	8001844 <OLED_SendCmd>
  OLED_SendCmd(0xAF); // 点亮屏幕
 8001930:	20af      	movs	r0, #175	@ 0xaf
 8001932:	f7ff ff87 	bl	8001844 <OLED_SendCmd>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001944:	2100      	movs	r1, #0
 8001946:	4802      	ldr	r0, [pc, #8]	@ (8001950 <OLED_NewFrame+0x14>)
 8001948:	f005 f9cf 	bl	8006cea <memset>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200002dc 	.word	0x200002dc

08001954 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <OLED_ShowFrame+0x5c>)
 800195c:	2240      	movs	r2, #64	@ 0x40
 800195e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	e01b      	b.n	800199e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	3b50      	subs	r3, #80	@ 0x50
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff69 	bl	8001844 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff ff66 	bl	8001844 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001978:	2010      	movs	r0, #16
 800197a:	f7ff ff63 	bl	8001844 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800197e:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <OLED_ShowFrame+0x60>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <OLED_ShowFrame+0x64>)
 8001986:	4413      	add	r3, r2
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	4619      	mov	r1, r3
 800198c:	f005 fa63 	bl	8006e56 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001990:	2181      	movs	r1, #129	@ 0x81
 8001992:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <OLED_ShowFrame+0x5c>)
 8001994:	f7ff ff40 	bl	8001818 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	3301      	adds	r3, #1
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	d9e0      	bls.n	8001966 <OLED_ShowFrame+0x12>
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200006e0 	.word	0x200006e0
 80019b4:	200006e1 	.word	0x200006e1
 80019b8:	200002dc 	.word	0x200002dc

080019bc <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80019bc:	b490      	push	{r4, r7}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	4603      	mov	r3, r0
 80019d0:	71bb      	strb	r3, [r7, #6]
 80019d2:	460b      	mov	r3, r1
 80019d4:	717b      	strb	r3, [r7, #5]
 80019d6:	4613      	mov	r3, r2
 80019d8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d860      	bhi.n	8001aa2 <OLED_SetByte_Fine+0xe6>
 80019e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db5c      	blt.n	8001aa2 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80019e8:	7d3b      	ldrb	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80019ee:	797b      	ldrb	r3, [r7, #5]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80019f4:	7c3b      	ldrb	r3, [r7, #16]
 80019f6:	3301      	adds	r3, #1
 80019f8:	22ff      	movs	r2, #255	@ 0xff
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	793b      	ldrb	r3, [r7, #4]
 8001a0a:	f1c3 0308 	rsb	r3, r3, #8
 8001a0e:	21ff      	movs	r1, #255	@ 0xff
 8001a10:	fa41 f303 	asr.w	r3, r1, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <OLED_SetByte_Fine+0xf0>)
 8001a1e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	4922      	ldr	r1, [pc, #136]	@ (8001ab0 <OLED_SetByte_Fine+0xf4>)
 8001a26:	01d2      	lsls	r2, r2, #7
 8001a28:	440a      	add	r2, r1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	7818      	ldrb	r0, [r3, #0]
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <OLED_SetByte_Fine+0xf0>)
 8001a30:	7819      	ldrb	r1, [r3, #0]
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	4001      	ands	r1, r0
 8001a38:	b2c8      	uxtb	r0, r1
 8001a3a:	491d      	ldr	r1, [pc, #116]	@ (8001ab0 <OLED_SetByte_Fine+0xf4>)
 8001a3c:	01d2      	lsls	r2, r2, #7
 8001a3e:	440a      	add	r2, r1
 8001a40:	4413      	add	r3, r2
 8001a42:	4602      	mov	r2, r0
 8001a44:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001a46:	7c3b      	ldrb	r3, [r7, #16]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	22ff      	movs	r2, #255	@ 0xff
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	793b      	ldrb	r3, [r7, #4]
 8001a60:	f1c3 0308 	rsb	r3, r3, #8
 8001a64:	21ff      	movs	r1, #255	@ 0xff
 8001a66:	fa41 f303 	asr.w	r3, r1, r3
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <OLED_SetByte_Fine+0xf0>)
 8001a78:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <OLED_SetByte_Fine+0xf4>)
 8001a80:	01d2      	lsls	r2, r2, #7
 8001a82:	440a      	add	r2, r1
 8001a84:	4413      	add	r3, r2
 8001a86:	7818      	ldrb	r0, [r3, #0]
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <OLED_SetByte_Fine+0xf0>)
 8001a8a:	7819      	ldrb	r1, [r3, #0]
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	79bb      	ldrb	r3, [r7, #6]
 8001a90:	4301      	orrs	r1, r0
 8001a92:	b2c8      	uxtb	r0, r1
 8001a94:	4906      	ldr	r1, [pc, #24]	@ (8001ab0 <OLED_SetByte_Fine+0xf4>)
 8001a96:	01d2      	lsls	r2, r2, #7
 8001a98:	440a      	add	r2, r1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e000      	b.n	8001aa4 <OLED_SetByte_Fine+0xe8>
    return;
 8001aa2:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc90      	pop	{r4, r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000761 	.word	0x20000761
 8001ab0:	200002dc 	.word	0x200002dc

08001ab4 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	460b      	mov	r3, r1
 8001acc:	717b      	strb	r3, [r7, #5]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8001ae0:	7bba      	ldrb	r2, [r7, #14]
 8001ae2:	793b      	ldrb	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	dd29      	ble.n	8001b3e <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001aea:	797a      	ldrb	r2, [r7, #5]
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	7bbc      	ldrb	r4, [r7, #14]
 8001af6:	79f9      	ldrb	r1, [r7, #7]
 8001af8:	7bf8      	ldrb	r0, [r7, #15]
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2307      	movs	r3, #7
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4623      	mov	r3, r4
 8001b06:	f7ff ff59 	bl	80019bc <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2d8      	uxtb	r0, r3
 8001b10:	797a      	ldrb	r2, [r7, #5]
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	f1c3 0308 	rsb	r3, r3, #8
 8001b18:	fa42 f303 	asr.w	r3, r2, r3
 8001b1c:	b2dc      	uxtb	r4, r3
 8001b1e:	793a      	ldrb	r2, [r7, #4]
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	3b09      	subs	r3, #9
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b30:	9201      	str	r2, [sp, #4]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	4622      	mov	r2, r4
 8001b38:	f7ff ff40 	bl	80019bc <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001b3c:	e015      	b.n	8001b6a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001b3e:	797a      	ldrb	r2, [r7, #5]
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	b2dc      	uxtb	r4, r3
 8001b48:	7bba      	ldrb	r2, [r7, #14]
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	7bbd      	ldrb	r5, [r7, #14]
 8001b56:	79f9      	ldrb	r1, [r7, #7]
 8001b58:	7bf8      	ldrb	r0, [r7, #15]
 8001b5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b5e:	9201      	str	r2, [sp, #4]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	462b      	mov	r3, r5
 8001b64:	4622      	mov	r2, r4
 8001b66:	f7ff ff29 	bl	80019bc <OLED_SetByte_Fine>
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}

08001b72 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8001b72:	b590      	push	{r4, r7, lr}
 8001b74:	b087      	sub	sp, #28
 8001b76:	af02      	add	r7, sp, #8
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4623      	mov	r3, r4
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4603      	mov	r3, r0
 8001b86:	71bb      	strb	r3, [r7, #6]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	717b      	strb	r3, [r7, #5]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001b9e:	797a      	ldrb	r2, [r7, #5]
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	7bbc      	ldrb	r4, [r7, #14]
 8001baa:	79f9      	ldrb	r1, [r7, #7]
 8001bac:	7bf8      	ldrb	r0, [r7, #15]
 8001bae:	793b      	ldrb	r3, [r7, #4]
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	f7ff ff00 	bl	80019bc <OLED_SetByte_Fine>
  if (bit)
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d014      	beq.n	8001bec <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	797a      	ldrb	r2, [r7, #5]
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	f1c3 0308 	rsb	r3, r3, #8
 8001bd0:	fa42 f303 	asr.w	r3, r2, r3
 8001bd4:	b2dc      	uxtb	r4, r3
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	79f9      	ldrb	r1, [r7, #7]
 8001bde:	793a      	ldrb	r2, [r7, #4]
 8001be0:	9201      	str	r2, [sp, #4]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	4622      	mov	r2, r4
 8001be8:	f7ff fee8 	bl	80019bc <OLED_SetByte_Fine>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	603a      	str	r2, [r7, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	460b      	mov	r3, r1
 8001c04:	71bb      	strb	r3, [r7, #6]
 8001c06:	4613      	mov	r3, r2
 8001c08:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e025      	b.n	8001c6e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	73bb      	strb	r3, [r7, #14]
 8001c26:	e01b      	b.n	8001c60 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2d8      	uxtb	r0, r3
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2dc      	uxtb	r4, r3
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	7979      	ldrb	r1, [r7, #5]
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c54:	4621      	mov	r1, r4
 8001c56:	f7ff ff8c 	bl	8001b72 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	73bb      	strb	r3, [r7, #14]
 8001c60:	7bba      	ldrb	r2, [r7, #14]
 8001c62:	7b3b      	ldrb	r3, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3df      	bcc.n	8001c28 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3d5      	bcc.n	8001c22 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d028      	beq.n	8001cce <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	7b3a      	ldrb	r2, [r7, #12]
 8001c82:	b292      	uxth	r2, r2
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	737b      	strb	r3, [r7, #13]
 8001c8e:	e01a      	b.n	8001cc6 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	7b7b      	ldrb	r3, [r7, #13]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2d8      	uxtb	r0, r3
 8001c98:	7b3b      	ldrb	r3, [r7, #12]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2d9      	uxtb	r1, r3
 8001ca4:	893a      	ldrh	r2, [r7, #8]
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	4413      	add	r3, r2
 8001caa:	461a      	mov	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	7afc      	ldrb	r4, [r7, #11]
 8001cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4623      	mov	r3, r4
 8001cbc:	f7ff fefa 	bl	8001ab4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8001cc0:	7b7b      	ldrb	r3, [r7, #13]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	737b      	strb	r3, [r7, #13]
 8001cc6:	7b7a      	ldrb	r2, [r7, #13]
 8001cc8:	797b      	ldrb	r3, [r7, #5]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3e0      	bcc.n	8001c90 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}

08001cd6 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8001cd6:	b5b0      	push	{r4, r5, r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af02      	add	r7, sp, #8
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	71bb      	strb	r3, [r7, #6]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	797b      	ldrb	r3, [r7, #5]
 8001cf0:	f1a3 0120 	sub.w	r1, r3, #32
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3307      	adds	r3, #7
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da00      	bge.n	8001d00 <OLED_PrintASCIIChar+0x2a>
 8001cfe:	3307      	adds	r3, #7
 8001d00:	10db      	asrs	r3, r3, #3
 8001d02:	4618      	mov	r0, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	fb00 f303 	mul.w	r3, r0, r3
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	18d4      	adds	r4, r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	785d      	ldrb	r5, [r3, #1]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	79b9      	ldrb	r1, [r7, #6]
 8001d1c:	79f8      	ldrb	r0, [r7, #7]
 8001d1e:	7e3a      	ldrb	r2, [r7, #24]
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	462b      	mov	r3, r5
 8001d26:	4622      	mov	r2, r4
 8001d28:	f7ff ff64 	bl	8001bf4 <OLED_SetBlock>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}

08001d34 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db01      	blt.n	8001d4a <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e018      	b.n	8001d7c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8001d54:	d101      	bne.n	8001d5a <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	e010      	b.n	8001d7c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d62:	2be0      	cmp	r3, #224	@ 0xe0
 8001d64:	d101      	bne.n	8001d6a <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e008      	b.n	8001d7c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001d72:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d74:	d101      	bne.n	8001d7a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001d76:	2304      	movs	r3, #4
 8001d78:	e000      	b.n	8001d7c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001d86:	b5b0      	push	{r4, r5, r7, lr}
 8001d88:	b08a      	sub	sp, #40	@ 0x28
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	460b      	mov	r3, r1
 8001d96:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001d98:	2300      	movs	r3, #0
 8001d9a:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3307      	adds	r3, #7
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da00      	bge.n	8001da8 <OLED_PrintString+0x22>
 8001da6:	3307      	adds	r3, #7
 8001da8:	10db      	asrs	r3, r3, #3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	7852      	ldrb	r2, [r2, #1]
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3304      	adds	r3, #4
 8001db8:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8001dba:	e07d      	b.n	8001eb8 <OLED_PrintString+0x132>
  {
    found = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8001dc0:	8bfb      	ldrh	r3, [r7, #30]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ffb4 	bl	8001d34 <_OLED_GetUTF8Len>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8001dd0:	7ebb      	ldrb	r3, [r7, #26]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d078      	beq.n	8001ec8 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	773b      	strb	r3, [r7, #28]
 8001dda:	e032      	b.n	8001e42 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	7f3a      	ldrb	r2, [r7, #28]
 8001de2:	7ef9      	ldrb	r1, [r7, #27]
 8001de4:	fb01 f202 	mul.w	r2, r1, r2
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8001dec:	8bfb      	ldrh	r3, [r7, #30]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	7eba      	ldrb	r2, [r7, #26]
 8001df4:	6979      	ldr	r1, [r7, #20]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 ff67 	bl	8006cca <memcmp>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11c      	bne.n	8001e3c <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	1d1c      	adds	r4, r3, #4
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	785d      	ldrb	r5, [r3, #1]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	7bb9      	ldrb	r1, [r7, #14]
 8001e10:	7bf8      	ldrb	r0, [r7, #15]
 8001e12:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	f7ff fee9 	bl	8001bf4 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	785a      	ldrb	r2, [r3, #1]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4413      	add	r3, r2
 8001e2a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001e2c:	7ebb      	ldrb	r3, [r7, #26]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	8bfb      	ldrh	r3, [r7, #30]
 8001e32:	4413      	add	r3, r2
 8001e34:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	777b      	strb	r3, [r7, #29]
        break;
 8001e3a:	e007      	b.n	8001e4c <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8001e3c:	7f3b      	ldrb	r3, [r7, #28]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	773b      	strb	r3, [r7, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a1b      	ldrb	r3, [r3, #8]
 8001e46:	7f3a      	ldrb	r2, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3c7      	bcc.n	8001ddc <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8001e4c:	7f7b      	ldrb	r3, [r7, #29]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d132      	bne.n	8001eb8 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001e52:	7ebb      	ldrb	r3, [r7, #26]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d119      	bne.n	8001e8c <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001e58:	8bfb      	ldrh	r3, [r7, #30]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68dc      	ldr	r4, [r3, #12]
 8001e64:	7bb9      	ldrb	r1, [r7, #14]
 8001e66:	7bf8      	ldrb	r0, [r7, #15]
 8001e68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4623      	mov	r3, r4
 8001e70:	f7ff ff31 	bl	8001cd6 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	785a      	ldrb	r2, [r3, #1]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001e80:	7ebb      	ldrb	r3, [r7, #26]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	8bfb      	ldrh	r3, [r7, #30]
 8001e86:	4413      	add	r3, r2
 8001e88:	83fb      	strh	r3, [r7, #30]
 8001e8a:	e015      	b.n	8001eb8 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	7bb9      	ldrb	r1, [r7, #14]
 8001e92:	7bf8      	ldrb	r0, [r7, #15]
 8001e94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f7ff ff1a 	bl	8001cd6 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	785a      	ldrb	r2, [r3, #1]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	4413      	add	r3, r2
 8001eac:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001eae:	7ebb      	ldrb	r3, [r7, #26]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f af7b 	bne.w	8001dbc <OLED_PrintString+0x36>
      }
    }
  }
}
 8001ec6:	e000      	b.n	8001eca <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8001ec8:	bf00      	nop
}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_MspInit+0x60>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_MspInit+0x60>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <NMI_Handler+0x4>

08001f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <MemManage_Handler+0x4>

08001f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 fba8 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f94:	2010      	movs	r0, #16
 8001f96:	f000 ff19 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fa2:	2020      	movs	r0, #32
 8001fa4:	f000 ff12 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fa8:	2040      	movs	r0, #64	@ 0x40
 8001faa:	f000 ff0f 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fae:	2080      	movs	r0, #128	@ 0x80
 8001fb0:	f000 ff0c 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <TIM2_IRQHandler+0x10>)
 8001fbe:	f002 f883 	bl	80040c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000768 	.word	0x20000768

08001fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <TIM3_IRQHandler+0x10>)
 8001fd2:	f002 f879 	bl	80040c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200007b0 	.word	0x200007b0

08001fe0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <TIM4_IRQHandler+0x10>)
 8001fe6:	f002 f86f 	bl	80040c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200007f8 	.word	0x200007f8

08001ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <USART1_IRQHandler+0x10>)
 8001ffa:	f002 fcb9 	bl	8004970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000840 	.word	0x20000840

08002008 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <USART2_IRQHandler+0x10>)
 800200e:	f002 fcaf 	bl	8004970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000888 	.word	0x20000888

0800201c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <_kill>:

int _kill(int pid, int sig)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002034:	f004 fed4 	bl	8006de0 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	2216      	movs	r2, #22
 800203c:	601a      	str	r2, [r3, #0]
  return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_exit>:

void _exit (int status)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002052:	f04f 31ff 	mov.w	r1, #4294967295
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffe7 	bl	800202a <_kill>
  while (1) {}    /* Make sure we hang here */
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <_exit+0x12>

08002060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e00a      	b.n	8002088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002072:	f3af 8000 	nop.w
 8002076:	4601      	mov	r1, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	b2ca      	uxtb	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf0      	blt.n	8002072 <_read+0x12>
  }

  return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e009      	b.n	80020c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf1      	blt.n	80020ac <_write+0x12>
  }
  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f8:	605a      	str	r2, [r3, #4]
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <_isatty>:

int _isatty(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 fe3c 	bl	8006de0 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20005000 	.word	0x20005000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000764 	.word	0x20000764
 800219c:	20000a20 	.word	0x20000a20

080021a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021d2:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80021d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80021e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021f2:	4814      	ldr	r0, [pc, #80]	@ (8002244 <MX_TIM2_Init+0x98>)
 80021f4:	f001 fec6 	bl	8003f84 <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021fe:	f7ff fb05 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4619      	mov	r1, r3
 800220e:	480d      	ldr	r0, [pc, #52]	@ (8002244 <MX_TIM2_Init+0x98>)
 8002210:	f002 f862 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800221a:	f7ff faf7 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	@ (8002244 <MX_TIM2_Init+0x98>)
 800222c:	f002 fa38 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002236:	f7ff fae9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000768 	.word	0x20000768

08002248 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_TIM3_Init+0x94>)
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <MX_TIM3_Init+0x98>)
 8002268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1311;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_TIM3_Init+0x94>)
 800226c:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM3_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <MX_TIM3_Init+0x94>)
 800227a:	2202      	movs	r2, #2
 800227c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_TIM3_Init+0x94>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_TIM3_Init+0x94>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800228a:	4814      	ldr	r0, [pc, #80]	@ (80022dc <MX_TIM3_Init+0x94>)
 800228c:	f001 fe7a 	bl	8003f84 <HAL_TIM_Base_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002296:	f7ff fab9 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800229e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_TIM3_Init+0x94>)
 80022a8:	f002 f816 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022b2:	f7ff faab 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	@ (80022dc <MX_TIM3_Init+0x94>)
 80022c4:	f002 f9ec 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022ce:	f7ff fa9d 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200007b0 	.word	0x200007b0
 80022e0:	40000400 	.word	0x40000400

080022e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002302:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <MX_TIM4_Init+0x94>)
 8002304:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002308:	223c      	movs	r2, #60	@ 0x3c
 800230a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <MX_TIM4_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002314:	223c      	movs	r2, #60	@ 0x3c
 8002316:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <MX_TIM4_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002324:	4813      	ldr	r0, [pc, #76]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002326:	f001 fe2d 	bl	8003f84 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002330:	f7ff fa6c 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <MX_TIM4_Init+0x90>)
 8002342:	f001 ffc9 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800234c:	f7ff fa5e 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002358:	463b      	mov	r3, r7
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <MX_TIM4_Init+0x90>)
 800235e:	f002 f99f 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002368:	f7ff fa50 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200007f8 	.word	0x200007f8
 8002378:	40000800 	.word	0x40000800

0800237c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238c:	d114      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a25      	ldr	r2, [pc, #148]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	201c      	movs	r0, #28
 80023ac:	f000 fa89 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b0:	201c      	movs	r0, #28
 80023b2:	f000 faa2 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023b6:	e032      	b.n	800241e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_TIM_Base_MspInit+0xb0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d114      	bne.n	80023ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a18      	ldr	r2, [pc, #96]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	201d      	movs	r0, #29
 80023e0:	f000 fa6f 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023e4:	201d      	movs	r0, #29
 80023e6:	f000 fa88 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 80023ea:	e018      	b.n	800241e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <HAL_TIM_Base_MspInit+0xb4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d113      	bne.n	800241e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	201e      	movs	r0, #30
 8002414:	f000 fa55 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002418:	201e      	movs	r0, #30
 800241a:	f000 fa6e 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f002 f988 	bl	8004780 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff f9c9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000840 	.word	0x20000840
 8002484:	40013800 	.word	0x40013800

08002488 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <MX_USART2_UART_Init+0x50>)
 8002490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 8002494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800249a:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024ac:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024ae:	220c      	movs	r2, #12
 80024b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	@ (80024d4 <MX_USART2_UART_Init+0x4c>)
 80024c0:	f002 f95e 	bl	8004780 <HAL_UART_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024ca:	f7ff f99f 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000888 	.word	0x20000888
 80024d8:	40004400 	.word	0x40004400

080024dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3f      	ldr	r2, [pc, #252]	@ (80025f4 <HAL_UART_MspInit+0x118>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d13a      	bne.n	8002572 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fc:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b38      	ldr	r3, [pc, #224]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a37      	ldr	r2, [pc, #220]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800252c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0318 	add.w	r3, r7, #24
 800253e:	4619      	mov	r1, r3
 8002540:	482e      	ldr	r0, [pc, #184]	@ (80025fc <HAL_UART_MspInit+0x120>)
 8002542:	f000 faa7 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	4619      	mov	r1, r3
 800255a:	4828      	ldr	r0, [pc, #160]	@ (80025fc <HAL_UART_MspInit+0x120>)
 800255c:	f000 fa9a 	bl	8002a94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2025      	movs	r0, #37	@ 0x25
 8002566:	f000 f9ac 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800256a:	2025      	movs	r0, #37	@ 0x25
 800256c:	f000 f9c5 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002570:	e03c      	b.n	80025ec <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <HAL_UART_MspInit+0x124>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d137      	bne.n	80025ec <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800257c:	4b1e      	ldr	r3, [pc, #120]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 8002582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002586:	61d3      	str	r3, [r2, #28]
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	4b18      	ldr	r3, [pc, #96]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a17      	ldr	r2, [pc, #92]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_UART_MspInit+0x11c>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025ac:	2304      	movs	r3, #4
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4619      	mov	r1, r3
 80025be:	480f      	ldr	r0, [pc, #60]	@ (80025fc <HAL_UART_MspInit+0x120>)
 80025c0:	f000 fa68 	bl	8002a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025c4:	2308      	movs	r3, #8
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4619      	mov	r1, r3
 80025d6:	4809      	ldr	r0, [pc, #36]	@ (80025fc <HAL_UART_MspInit+0x120>)
 80025d8:	f000 fa5c 	bl	8002a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2026      	movs	r0, #38	@ 0x26
 80025e2:	f000 f96e 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e6:	2026      	movs	r0, #38	@ 0x26
 80025e8:	f000 f987 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	@ 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40004400 	.word	0x40004400

08002604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002604:	f7ff fdcc 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480b      	ldr	r0, [pc, #44]	@ (8002638 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800260a:	490c      	ldr	r1, [pc, #48]	@ (800263c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800260c:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <LoopFillZerobss+0x16>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002620:	4c09      	ldr	r4, [pc, #36]	@ (8002648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262e:	f004 fbdd 	bl	8006dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002632:	f7fe fb69 	bl	8000d08 <main>
  bx lr
 8002636:	4770      	bx	lr
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002640:	0800a6d8 	.word	0x0800a6d8
  ldr r2, =_sbss
 8002644:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002648:	20000a20 	.word	0x20000a20

0800264c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_2_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_Init+0x28>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_Init+0x28>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002660:	2003      	movs	r0, #3
 8002662:	f000 f923 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002666:	200f      	movs	r0, #15
 8002668:	f000 f808 	bl	800267c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800266c:	f7ff fc32 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_InitTick+0x54>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_InitTick+0x58>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f93b 	bl	8002916 <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f000 f903 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <HAL_InitTick+0x5c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000020 	.word	0x20000020
 80026d4:	20000028 	.word	0x20000028
 80026d8:	20000024 	.word	0x20000024

080026dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_IncTick+0x1c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_IncTick+0x20>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_IncTick+0x20>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000028 	.word	0x20000028
 80026fc:	200008d0 	.word	0x200008d0

08002700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b02      	ldr	r3, [pc, #8]	@ (8002710 <HAL_GetTick+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	200008d0 	.word	0x200008d0

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4906      	ldr	r1, [pc, #24]	@ (80027ac <__NVIC_EnableIRQ+0x34>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff90 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff2d 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff42 	bl	800275c <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff90 	bl	8002804 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5f 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff35 	bl	8002778 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d008      	beq.n	8002958 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e020      	b.n	800299a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020e 	bic.w	r2, r2, #14
 8002966:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d005      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e051      	b.n	8002a6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020e 	bic.w	r2, r2, #14
 80029d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_DMA_Abort_IT+0xd4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d029      	beq.n	8002a46 <HAL_DMA_Abort_IT+0xa2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a21      	ldr	r2, [pc, #132]	@ (8002a7c <HAL_DMA_Abort_IT+0xd8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x9e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <HAL_DMA_Abort_IT+0xdc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01a      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x98>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a84 <HAL_DMA_Abort_IT+0xe0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x92>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <HAL_DMA_Abort_IT+0xe4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00a      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x8c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a8c <HAL_DMA_Abort_IT+0xe8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d102      	bne.n	8002a2a <HAL_DMA_Abort_IT+0x86>
 8002a24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a28:	e00e      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a2e:	e00b      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a34:	e008      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3a:	e005      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a40:	e002      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a42:	2310      	movs	r3, #16
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
 8002a46:	2301      	movs	r3, #1
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_DMA_Abort_IT+0xec>)
 8002a4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
    } 
  }
  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40020008 	.word	0x40020008
 8002a7c:	4002001c 	.word	0x4002001c
 8002a80:	40020030 	.word	0x40020030
 8002a84:	40020044 	.word	0x40020044
 8002a88:	40020058 	.word	0x40020058
 8002a8c:	4002006c 	.word	0x4002006c
 8002a90:	40020000 	.word	0x40020000

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	@ 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e169      	b.n	8002d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 8158 	bne.w	8002d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a9a      	ldr	r2, [pc, #616]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d05e      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ad0:	4a98      	ldr	r2, [pc, #608]	@ (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d875      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ad6:	4a98      	ldr	r2, [pc, #608]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d058      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002adc:	4a96      	ldr	r2, [pc, #600]	@ (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d86f      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ae2:	4a96      	ldr	r2, [pc, #600]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d052      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ae8:	4a94      	ldr	r2, [pc, #592]	@ (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d869      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002aee:	4a94      	ldr	r2, [pc, #592]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04c      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002af4:	4a92      	ldr	r2, [pc, #584]	@ (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d863      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002afa:	4a92      	ldr	r2, [pc, #584]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d046      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002b00:	4a90      	ldr	r2, [pc, #576]	@ (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d85d      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d82a      	bhi.n	8002b60 <HAL_GPIO_Init+0xcc>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d859      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <HAL_GPIO_Init+0x80>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b8f 	.word	0x08002b8f
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b7b 	.word	0x08002b7b
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bc3 	.word	0x08002bc3
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bc3 	.word	0x08002bc3
 8002b38:	08002bc3 	.word	0x08002bc3
 8002b3c:	08002bc3 	.word	0x08002bc3
 8002b40:	08002bc3 	.word	0x08002bc3
 8002b44:	08002bc3 	.word	0x08002bc3
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002bc3 	.word	0x08002bc3
 8002b50:	08002bc3 	.word	0x08002bc3
 8002b54:	08002bc3 	.word	0x08002bc3
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	4a79      	ldr	r2, [pc, #484]	@ (8002d48 <HAL_GPIO_Init+0x2b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b66:	e02c      	b.n	8002bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e029      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e024      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e01f      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e01a      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b96:	2304      	movs	r3, #4
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e013      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	611a      	str	r2, [r3, #16]
          break;
 8002bae:	e009      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	615a      	str	r2, [r3, #20]
          break;
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          break;
 8002bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2bff      	cmp	r3, #255	@ 0xff
 8002bc8:	d801      	bhi.n	8002bce <HAL_GPIO_Init+0x13a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_Init+0x13e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2bff      	cmp	r3, #255	@ 0xff
 8002bd8:	d802      	bhi.n	8002be0 <HAL_GPIO_Init+0x14c>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x152>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	3b08      	subs	r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	210f      	movs	r1, #15
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80b1 	beq.w	8002d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2c:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_GPIO_Init+0x2c0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_GPIO_Init+0x1ec>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <HAL_GPIO_Init+0x2c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_GPIO_Init+0x1e8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <HAL_GPIO_Init+0x2c8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x1e4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_GPIO_Init+0x1e0>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c74:	2304      	movs	r3, #4
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c92:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cac:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	492c      	ldr	r1, [pc, #176]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4928      	ldr	r1, [pc, #160]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4922      	ldr	r1, [pc, #136]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	491e      	ldr	r1, [pc, #120]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4918      	ldr	r1, [pc, #96]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4914      	ldr	r1, [pc, #80]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e021      	b.n	8002d76 <HAL_GPIO_Init+0x2e2>
 8002d32:	bf00      	nop
 8002d34:	10320000 	.word	0x10320000
 8002d38:	10310000 	.word	0x10310000
 8002d3c:	10220000 	.word	0x10220000
 8002d40:	10210000 	.word	0x10210000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4909      	ldr	r1, [pc, #36]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ae8e 	bne.w	8002aa8 <HAL_GPIO_Init+0x14>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	372c      	adds	r7, #44	@ 0x2c
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb88 	bl	8001500 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd ff32 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 f84a 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	@ (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	@ (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	@ (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff fb32 	bl	8002700 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 80e0 	bne.w	800326c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4970      	ldr	r1, [pc, #448]	@ (8003278 <HAL_I2C_Master_Transmit+0x1f4>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f964 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0d3      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0cc      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a50      	ldr	r2, [pc, #320]	@ (800327c <HAL_I2C_Master_Transmit+0x1f8>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f89c 	bl	8003280 <I2C_MasterRequestWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003168:	e066      	b.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa22 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_I2C_Master_Transmit+0x188>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa19 	bl	8003648 <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d194      	bne.n	800316a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d006      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d003      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a8:	d108      	bne.n	80032bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00b      	b.n	80032d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b12      	cmp	r3, #18
 80032c2:	d107      	bne.n	80032d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f84f 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d103      	bne.n	8003304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e035      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e01b      	b.n	800335c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030f 	orn	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <I2C_MasterRequestWrite+0xfc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f898 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e010      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4907      	ldr	r1, [pc, #28]	@ (8003380 <I2C_MasterRequestWrite+0x100>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f888 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010008 	.word	0x00010008
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	e048      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d044      	beq.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7ff f9af 	bl	8002700 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d139      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e023      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	e00c      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d093      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	e071      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d123      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d041      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7ff f90a 	bl	8002700 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d136      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10c      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e00b      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af6d 	bne.w	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f886 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d028      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7ff f88f 	bl	8002700 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11d      	bne.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d016      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d1c3      	bne.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f83e 	bl	80036d8 <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d028      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7ff f847 	bl	8002700 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d016      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d1c3      	bne.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d11b      	bne.n	8003728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003738:	4b08      	ldr	r3, [pc, #32]	@ (800375c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a07      	ldr	r2, [pc, #28]	@ (800375c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003744:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4a05      	ldr	r2, [pc, #20]	@ (8003760 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003750:	bf30      	wfi
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e272      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003784:	4b92      	ldr	r3, [pc, #584]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003790:	4b8f      	ldr	r3, [pc, #572]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
 800379c:	4b8c      	ldr	r3, [pc, #560]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b89      	ldr	r3, [pc, #548]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06c      	beq.n	8003890 <HAL_RCC_OscConfig+0x12c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d168      	bne.n	8003890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e24c      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x76>
 80037cc:	4b80      	ldr	r3, [pc, #512]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7f      	ldr	r2, [pc, #508]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e02e      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b7b      	ldr	r3, [pc, #492]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7a      	ldr	r2, [pc, #488]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b78      	ldr	r3, [pc, #480]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a77      	ldr	r2, [pc, #476]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0xbc>
 8003806:	4b72      	ldr	r3, [pc, #456]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a71      	ldr	r2, [pc, #452]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6f      	ldr	r3, [pc, #444]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6e      	ldr	r2, [pc, #440]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 8003820:	4b6b      	ldr	r3, [pc, #428]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6a      	ldr	r2, [pc, #424]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b68      	ldr	r3, [pc, #416]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a67      	ldr	r2, [pc, #412]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe ff5e 	bl	8002700 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe ff5a 	bl	8002700 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e200      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5d      	ldr	r3, [pc, #372]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xe4>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe ff4a 	bl	8002700 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe ff46 	bl	8002700 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1ec      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x10c>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	4b4c      	ldr	r3, [pc, #304]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038aa:	4b49      	ldr	r3, [pc, #292]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
 80038b6:	4b46      	ldr	r3, [pc, #280]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b43      	ldr	r3, [pc, #268]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1c0      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4939      	ldr	r1, [pc, #228]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <HAL_RCC_OscConfig+0x270>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe feff 	bl	8002700 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fefb 	bl	8002700 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1a1      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2d      	ldr	r3, [pc, #180]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b2a      	ldr	r3, [pc, #168]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4927      	ldr	r1, [pc, #156]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b26      	ldr	r3, [pc, #152]	@ (80039d4 <HAL_RCC_OscConfig+0x270>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fede 	bl	8002700 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe feda 	bl	8002700 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e180      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03a      	beq.n	80039e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <HAL_RCC_OscConfig+0x274>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fe febe 	bl	8002700 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe feba 	bl	8002700 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e160      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f000 face 	bl	8003f48 <RCC_Delay>
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fe fea4 	bl	8002700 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe fea0 	bl	8002700 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d908      	bls.n	80039dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e146      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	42420000 	.word	0x42420000
 80039d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b92      	ldr	r3, [pc, #584]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e9      	bne.n	80039bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a6 	beq.w	8003b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b8b      	ldr	r3, [pc, #556]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b88      	ldr	r3, [pc, #544]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4a87      	ldr	r2, [pc, #540]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	61d3      	str	r3, [r2, #28]
 8003a12:	4b85      	ldr	r3, [pc, #532]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b82      	ldr	r3, [pc, #520]	@ (8003c2c <HAL_RCC_OscConfig+0x4c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c2c <HAL_RCC_OscConfig+0x4c8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7e      	ldr	r2, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x4c8>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fe61 	bl	8002700 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fe5d 	bl	8002700 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	@ 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e103      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b75      	ldr	r3, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x4c8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x312>
 8003a68:	4b6f      	ldr	r3, [pc, #444]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	e02d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a69      	ldr	r2, [pc, #420]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6213      	str	r3, [r2, #32]
 8003a8a:	4b67      	ldr	r3, [pc, #412]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a66      	ldr	r2, [pc, #408]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x356>
 8003aa0:	4b61      	ldr	r3, [pc, #388]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a60      	ldr	r2, [pc, #384]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	4b5e      	ldr	r3, [pc, #376]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003aba:	4b5b      	ldr	r3, [pc, #364]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a5a      	ldr	r2, [pc, #360]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a57      	ldr	r2, [pc, #348]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fe fe11 	bl	8002700 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fe0d 	bl	8002700 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0b1      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x37e>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fdfb 	bl	8002700 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fe fdf7 	bl	8002700 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e09b      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b40      	ldr	r3, [pc, #256]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b3c      	ldr	r3, [pc, #240]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8087 	beq.w	8003c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d061      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d146      	bne.n	8003bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b33      	ldr	r3, [pc, #204]	@ (8003c30 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fdcb 	bl	8002700 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fdc7 	bl	8002700 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e06d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b80:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b96:	4b24      	ldr	r3, [pc, #144]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4921      	ldr	r1, [pc, #132]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a19      	ldr	r1, [r3, #32]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	491b      	ldr	r1, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fd9b 	bl	8002700 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe fd97 	bl	8002700 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e03d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x46a>
 8003bec:	e035      	b.n	8003c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_RCC_OscConfig+0x4cc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fd84 	bl	8002700 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fd80 	bl	8002700 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e026      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x498>
 8003c1a:	e01e      	b.n	8003c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e019      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <HAL_RCC_OscConfig+0x500>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0d0      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b67      	ldr	r3, [pc, #412]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	4965      	ldr	r1, [pc, #404]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d040      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b41      	ldr	r3, [pc, #260]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e073      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3d      	ldr	r3, [pc, #244]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06b      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b39      	ldr	r3, [pc, #228]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4936      	ldr	r1, [pc, #216]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe fcd2 	bl	8002700 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe fcce 	bl	8002700 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e053      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2d      	ldr	r3, [pc, #180]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d210      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4922      	ldr	r1, [pc, #136]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	@ (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x1cc>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_ClockConfig+0x1d0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fc30 	bl	800267c <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40022000 	.word	0x40022000
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	0800a278 	.word	0x0800a278
 8003e34:	20000020 	.word	0x20000020
 8003e38:	20000024 	.word	0x20000024

08003e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x30>
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x36>
 8003e6a:	e027      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e6e:	613b      	str	r3, [r7, #16]
      break;
 8003e70:	e027      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0c9b      	lsrs	r3, r3, #18
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0c5b      	lsrs	r3, r3, #17
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	4a11      	ldr	r2, [pc, #68]	@ (8003edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ebe:	613b      	str	r3, [r7, #16]
      break;
 8003ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec2:	693b      	ldr	r3, [r7, #16]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	0800a290 	.word	0x0800a290
 8003edc:	0800a2a0 	.word	0x0800a2a0
 8003ee0:	003d0900 	.word	0x003d0900

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b02      	ldr	r3, [pc, #8]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000020 	.word	0x20000020

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003efc:	f7ff fff2 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	0800a288 	.word	0x0800a288

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f24:	f7ff ffde 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	0adb      	lsrs	r3, r3, #11
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	0800a288 	.word	0x0800a288

08003f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <RCC_Delay+0x34>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	@ (8003f80 <RCC_Delay+0x38>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0a5b      	lsrs	r3, r3, #9
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f64:	bf00      	nop
  }
  while (Delay --);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e5a      	subs	r2, r3, #1
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f9      	bne.n	8003f64 <RCC_Delay+0x1c>
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	20000020 	.word	0x20000020
 8003f80:	10624dd3 	.word	0x10624dd3

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e041      	b.n	800401a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe f9e6 	bl	800237c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fa74 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d001      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e03a      	b.n	80040b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <HAL_TIM_Base_Start_IT+0x98>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x58>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x58>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a14      	ldr	r2, [pc, #80]	@ (80040c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x58>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a13      	ldr	r2, [pc, #76]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d010      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	e007      	b.n	80040b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800

080040c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0202 	mvn.w	r2, #2
 80040f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9b4 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9a7 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f9b6 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d122      	bne.n	8004178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d11b      	bne.n	8004178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0204 	mvn.w	r2, #4
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f98a 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f97d 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f98c 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b08      	cmp	r3, #8
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0208 	mvn.w	r2, #8
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2204      	movs	r2, #4
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f960 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f953 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f962 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0210 	mvn.w	r2, #16
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2208      	movs	r2, #8
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f936 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f929 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f938 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10e      	bne.n	800424c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d107      	bne.n	800424c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0201 	mvn.w	r2, #1
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd f886 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004256:	2b80      	cmp	r3, #128	@ 0x80
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b80      	cmp	r3, #128	@ 0x80
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa7b 	bl	800476e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8fc 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0220 	mvn.w	r2, #32
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa46 	bl	800475c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIM_ConfigClockSource+0x1c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0b4      	b.n	800445e <HAL_TIM_ConfigClockSource+0x186>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xd4>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x172>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xa6>
 8004348:	2b70      	cmp	r3, #112	@ 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004350:	2b60      	cmp	r3, #96	@ 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004358:	2b50      	cmp	r3, #80	@ 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x13a>
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b30      	cmp	r3, #48	@ 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	f000 f968 	bl	8004662 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 f951 	bl	8004662 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 f8c8 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	@ 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f91f 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f8e6 	bl	80045d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	@ 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f90f 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8a8 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f8ff 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 f8f6 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
	...

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a29      	ldr	r2, [pc, #164]	@ (8004568 <TIM_Base_SetConfig+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a26      	ldr	r2, [pc, #152]	@ (800456c <TIM_Base_SetConfig+0xbc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <TIM_Base_SetConfig+0xc0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <TIM_Base_SetConfig+0xb8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a19      	ldr	r2, [pc, #100]	@ (800456c <TIM_Base_SetConfig+0xbc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <TIM_Base_SetConfig+0xc0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <TIM_Base_SetConfig+0xb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800

08004574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 030a 	bic.w	r3, r3, #10
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0210 	bic.w	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	031b      	lsls	r3, r3, #12
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	f043 0307 	orr.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800467c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	021a      	lsls	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	431a      	orrs	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	609a      	str	r2, [r3, #8]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e046      	b.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d009      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10c      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4313      	orrs	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800

0800475c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e042      	b.n	8004818 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fe98 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	@ 0x24
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fde1 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	d16d      	bne.n	800491c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Transmit+0x2c>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e066      	b.n	800491e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2221      	movs	r2, #33	@ 0x21
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800485e:	f7fd ff4f 	bl	8002700 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004878:	d108      	bne.n	800488c <HAL_UART_Transmit+0x6c>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e003      	b.n	8004894 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004894:	e02a      	b.n	80048ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fb31 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e036      	b.n	800491e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	3302      	adds	r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	e007      	b.n	80048de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	3301      	adds	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1cf      	bne.n	8004896 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2140      	movs	r1, #64	@ 0x40
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fb01 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e006      	b.n	800491e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	4613      	mov	r3, r2
 8004932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	d112      	bne.n	8004966 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Receive_IT+0x26>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e00b      	b.n	8004968 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	461a      	mov	r2, r3
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fb41 	bl	8004fe4 <UART_Start_Receive_IT>
 8004962:	4603      	mov	r3, r0
 8004964:	e000      	b.n	8004968 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b0ba      	sub	sp, #232	@ 0xe8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_UART_IRQHandler+0x66>
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fc1e 	bl	8005210 <UART_Receive_IT>
      return;
 80049d4:	e25b      	b.n	8004e8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80de 	beq.w	8004b9c <HAL_UART_IRQHandler+0x22c>
 80049e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80d1 	beq.w	8004b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_UART_IRQHandler+0xae>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0xd2>
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f043 0202 	orr.w	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_UART_IRQHandler+0xf6>
 8004a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	f043 0204 	orr.w	r2, r3, #4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d011      	beq.n	8004a96 <HAL_UART_IRQHandler+0x126>
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 81f2 	beq.w	8004e84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_UART_IRQHandler+0x14e>
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fba9 	bl	8005210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <HAL_UART_IRQHandler+0x17a>
 8004ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04f      	beq.n	8004b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fab3 	bl	8005056 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d041      	beq.n	8004b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3314      	adds	r3, #20
 8004b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1d9      	bne.n	8004afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	4a7e      	ldr	r2, [pc, #504]	@ (8004d50 <HAL_UART_IRQHandler+0x3e0>)
 8004b58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd ff20 	bl	80029a4 <HAL_DMA_Abort_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00e      	b.n	8004b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f993 	bl	8004ea6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e00a      	b.n	8004b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f98f 	bl	8004ea6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e006      	b.n	8004b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f98b 	bl	8004ea6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b96:	e175      	b.n	8004e84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	bf00      	nop
    return;
 8004b9a:	e173      	b.n	8004e84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 814f 	bne.w	8004e44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8148 	beq.w	8004e44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8141 	beq.w	8004e44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80b6 	beq.w	8004d54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8145 	beq.w	8004e88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f080 813e 	bcs.w	8004e88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f000 8088 	beq.w	8004d30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1d9      	bne.n	8004c20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e1      	bne.n	8004c6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3314      	adds	r3, #20
 8004cae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ccc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e3      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e3      	bne.n	8004cee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd fdff 	bl	800292e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8b6 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d4c:	e09c      	b.n	8004e88 <HAL_UART_IRQHandler+0x518>
 8004d4e:	bf00      	nop
 8004d50:	0800511b 	.word	0x0800511b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 808e 	beq.w	8004e8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8089 	beq.w	8004e8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004da0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e3      	bne.n	8004d7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e3      	bne.n	8004db2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0310 	bic.w	r3, r3, #16
 8004e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e1c:	61fa      	str	r2, [r7, #28]
 8004e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	69b9      	ldr	r1, [r7, #24]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e3      	bne.n	8004df8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f83b 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e42:	e023      	b.n	8004e8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <HAL_UART_IRQHandler+0x4f4>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f970 	bl	8005142 <UART_Transmit_IT>
    return;
 8004e62:	e014      	b.n	8004e8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <HAL_UART_IRQHandler+0x51e>
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9af 	bl	80051e0 <UART_EndTransmit_IT>
    return;
 8004e82:	e004      	b.n	8004e8e <HAL_UART_IRQHandler+0x51e>
    return;
 8004e84:	bf00      	nop
 8004e86:	e002      	b.n	8004e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e8c:	bf00      	nop
  }
}
 8004e8e:	37e8      	adds	r7, #232	@ 0xe8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b2db      	uxtb	r3, r3
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b090      	sub	sp, #64	@ 0x40
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	e050      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d04c      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f28:	f7fd fbea 	bl	8002700 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d241      	bcs.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f58:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f8c:	623a      	str	r2, [r7, #32]
 8004f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e00f      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d09f      	beq.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3740      	adds	r7, #64	@ 0x40
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2222      	movs	r2, #34	@ 0x22
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b095      	sub	sp, #84	@ 0x54
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800507e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005084:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d119      	bne.n	8005102 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 0310 	bic.w	r3, r3, #16
 80050e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ee:	61ba      	str	r2, [r7, #24]
 80050f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	613b      	str	r3, [r7, #16]
   return(result);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005110:	bf00      	nop
 8005112:	3754      	adds	r7, #84	@ 0x54
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff feb6 	bl	8004ea6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b21      	cmp	r3, #33	@ 0x21
 8005154:	d13e      	bne.n	80051d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515e:	d114      	bne.n	800518a <UART_Transmit_IT+0x48>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d110      	bne.n	800518a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800517c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]
 8005188:	e008      	b.n	800519c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6211      	str	r1, [r2, #32]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fe47 	bl	8004e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	@ 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b22      	cmp	r3, #34	@ 0x22
 8005222:	f040 80ae 	bne.w	8005382 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	d117      	bne.n	8005260 <UART_Receive_IT+0x50>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d113      	bne.n	8005260 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	b29a      	uxth	r2, r3
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
 800525e:	e026      	b.n	80052ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	d007      	beq.n	8005284 <UART_Receive_IT+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <UART_Receive_IT+0x82>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e008      	b.n	80052a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4619      	mov	r1, r3
 80052bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d15d      	bne.n	800537e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0220 	bic.w	r2, r2, #32
 80052d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fda3 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb fef1 	bl	800115c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e002      	b.n	8005384 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	@ 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053c6:	f023 030c 	bic.w	r3, r3, #12
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <UART_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d103      	bne.n	80053fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe fd94 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	e002      	b.n	8005402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe fd7c 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8005400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <UART_SetConfig+0x118>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	0119      	lsls	r1, r3, #4
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009a      	lsls	r2, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	fbb2 f2f3 	udiv	r2, r2, r3
 8005438:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <UART_SetConfig+0x118>)
 800543a:	fba3 0302 	umull	r0, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2064      	movs	r0, #100	@ 0x64
 8005442:	fb00 f303 	mul.w	r3, r0, r3
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	@ 0x32
 800544c:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <UART_SetConfig+0x118>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005458:	4419      	add	r1, r3
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <UART_SetConfig+0x118>)
 8005472:	fba3 0302 	umull	r0, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2064      	movs	r0, #100	@ 0x64
 800547a:	fb00 f303 	mul.w	r3, r0, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	@ 0x32
 8005484:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <UART_SetConfig+0x118>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	440a      	add	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013800 	.word	0x40013800
 80054a4:	51eb851f 	.word	0x51eb851f

080054a8 <atof>:
 80054a8:	2100      	movs	r1, #0
 80054aa:	f000 bdfd 	b.w	80060a8 <strtod>

080054ae <atoi>:
 80054ae:	220a      	movs	r2, #10
 80054b0:	2100      	movs	r1, #0
 80054b2:	f000 be7f 	b.w	80061b4 <strtol>

080054b6 <sulp>:
 80054b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	460f      	mov	r7, r1
 80054bc:	4690      	mov	r8, r2
 80054be:	f003 faeb 	bl	8008a98 <__ulp>
 80054c2:	4604      	mov	r4, r0
 80054c4:	460d      	mov	r5, r1
 80054c6:	f1b8 0f00 	cmp.w	r8, #0
 80054ca:	d011      	beq.n	80054f0 <sulp+0x3a>
 80054cc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80054d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	dd0b      	ble.n	80054f0 <sulp+0x3a>
 80054d8:	2400      	movs	r4, #0
 80054da:	051b      	lsls	r3, r3, #20
 80054dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80054e0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	f7fa fff6 	bl	80004d8 <__aeabi_dmul>
 80054ec:	4604      	mov	r4, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054f8 <_strtod_l>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b09f      	sub	sp, #124	@ 0x7c
 80054fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005500:	2200      	movs	r2, #0
 8005502:	460c      	mov	r4, r1
 8005504:	921a      	str	r2, [sp, #104]	@ 0x68
 8005506:	f04f 0a00 	mov.w	sl, #0
 800550a:	f04f 0b00 	mov.w	fp, #0
 800550e:	460a      	mov	r2, r1
 8005510:	9005      	str	r0, [sp, #20]
 8005512:	9219      	str	r2, [sp, #100]	@ 0x64
 8005514:	7811      	ldrb	r1, [r2, #0]
 8005516:	292b      	cmp	r1, #43	@ 0x2b
 8005518:	d048      	beq.n	80055ac <_strtod_l+0xb4>
 800551a:	d836      	bhi.n	800558a <_strtod_l+0x92>
 800551c:	290d      	cmp	r1, #13
 800551e:	d830      	bhi.n	8005582 <_strtod_l+0x8a>
 8005520:	2908      	cmp	r1, #8
 8005522:	d830      	bhi.n	8005586 <_strtod_l+0x8e>
 8005524:	2900      	cmp	r1, #0
 8005526:	d039      	beq.n	800559c <_strtod_l+0xa4>
 8005528:	2200      	movs	r2, #0
 800552a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800552c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800552e:	782a      	ldrb	r2, [r5, #0]
 8005530:	2a30      	cmp	r2, #48	@ 0x30
 8005532:	f040 80b1 	bne.w	8005698 <_strtod_l+0x1a0>
 8005536:	786a      	ldrb	r2, [r5, #1]
 8005538:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800553c:	2a58      	cmp	r2, #88	@ 0x58
 800553e:	d16c      	bne.n	800561a <_strtod_l+0x122>
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005544:	4a8e      	ldr	r2, [pc, #568]	@ (8005780 <_strtod_l+0x288>)
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	ab1a      	add	r3, sp, #104	@ 0x68
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	9805      	ldr	r0, [sp, #20]
 800554e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005550:	a919      	add	r1, sp, #100	@ 0x64
 8005552:	f002 fb95 	bl	8007c80 <__gethex>
 8005556:	f010 060f 	ands.w	r6, r0, #15
 800555a:	4604      	mov	r4, r0
 800555c:	d005      	beq.n	800556a <_strtod_l+0x72>
 800555e:	2e06      	cmp	r6, #6
 8005560:	d126      	bne.n	80055b0 <_strtod_l+0xb8>
 8005562:	2300      	movs	r3, #0
 8005564:	3501      	adds	r5, #1
 8005566:	9519      	str	r5, [sp, #100]	@ 0x64
 8005568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800556a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 8584 	bne.w	800607a <_strtod_l+0xb82>
 8005572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005574:	b1bb      	cbz	r3, 80055a6 <_strtod_l+0xae>
 8005576:	4650      	mov	r0, sl
 8005578:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800557c:	b01f      	add	sp, #124	@ 0x7c
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	2920      	cmp	r1, #32
 8005584:	d1d0      	bne.n	8005528 <_strtod_l+0x30>
 8005586:	3201      	adds	r2, #1
 8005588:	e7c3      	b.n	8005512 <_strtod_l+0x1a>
 800558a:	292d      	cmp	r1, #45	@ 0x2d
 800558c:	d1cc      	bne.n	8005528 <_strtod_l+0x30>
 800558e:	2101      	movs	r1, #1
 8005590:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005592:	1c51      	adds	r1, r2, #1
 8005594:	9119      	str	r1, [sp, #100]	@ 0x64
 8005596:	7852      	ldrb	r2, [r2, #1]
 8005598:	2a00      	cmp	r2, #0
 800559a:	d1c7      	bne.n	800552c <_strtod_l+0x34>
 800559c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800559e:	9419      	str	r4, [sp, #100]	@ 0x64
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 8568 	bne.w	8006076 <_strtod_l+0xb7e>
 80055a6:	4650      	mov	r0, sl
 80055a8:	4659      	mov	r1, fp
 80055aa:	e7e7      	b.n	800557c <_strtod_l+0x84>
 80055ac:	2100      	movs	r1, #0
 80055ae:	e7ef      	b.n	8005590 <_strtod_l+0x98>
 80055b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80055b2:	b13a      	cbz	r2, 80055c4 <_strtod_l+0xcc>
 80055b4:	2135      	movs	r1, #53	@ 0x35
 80055b6:	a81c      	add	r0, sp, #112	@ 0x70
 80055b8:	f003 fb5e 	bl	8008c78 <__copybits>
 80055bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	f002 ff38 	bl	8008434 <_Bfree>
 80055c4:	3e01      	subs	r6, #1
 80055c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80055c8:	2e04      	cmp	r6, #4
 80055ca:	d806      	bhi.n	80055da <_strtod_l+0xe2>
 80055cc:	e8df f006 	tbb	[pc, r6]
 80055d0:	201d0314 	.word	0x201d0314
 80055d4:	14          	.byte	0x14
 80055d5:	00          	.byte	0x00
 80055d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80055da:	05e1      	lsls	r1, r4, #23
 80055dc:	bf48      	it	mi
 80055de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80055e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80055e6:	0d1b      	lsrs	r3, r3, #20
 80055e8:	051b      	lsls	r3, r3, #20
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1bd      	bne.n	800556a <_strtod_l+0x72>
 80055ee:	f001 fbf7 	bl	8006de0 <__errno>
 80055f2:	2322      	movs	r3, #34	@ 0x22
 80055f4:	6003      	str	r3, [r0, #0]
 80055f6:	e7b8      	b.n	800556a <_strtod_l+0x72>
 80055f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80055fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005600:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005604:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005608:	e7e7      	b.n	80055da <_strtod_l+0xe2>
 800560a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005784 <_strtod_l+0x28c>
 800560e:	e7e4      	b.n	80055da <_strtod_l+0xe2>
 8005610:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005614:	f04f 3aff 	mov.w	sl, #4294967295
 8005618:	e7df      	b.n	80055da <_strtod_l+0xe2>
 800561a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b30      	cmp	r3, #48	@ 0x30
 8005624:	d0f9      	beq.n	800561a <_strtod_l+0x122>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d09f      	beq.n	800556a <_strtod_l+0x72>
 800562a:	2301      	movs	r3, #1
 800562c:	9309      	str	r3, [sp, #36]	@ 0x24
 800562e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005630:	220a      	movs	r2, #10
 8005632:	930c      	str	r3, [sp, #48]	@ 0x30
 8005634:	2300      	movs	r3, #0
 8005636:	461f      	mov	r7, r3
 8005638:	9308      	str	r3, [sp, #32]
 800563a:	930a      	str	r3, [sp, #40]	@ 0x28
 800563c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800563e:	7805      	ldrb	r5, [r0, #0]
 8005640:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005644:	b2d9      	uxtb	r1, r3
 8005646:	2909      	cmp	r1, #9
 8005648:	d928      	bls.n	800569c <_strtod_l+0x1a4>
 800564a:	2201      	movs	r2, #1
 800564c:	494e      	ldr	r1, [pc, #312]	@ (8005788 <_strtod_l+0x290>)
 800564e:	f001 fb54 	bl	8006cfa <strncmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	d032      	beq.n	80056bc <_strtod_l+0x1c4>
 8005656:	2000      	movs	r0, #0
 8005658:	462a      	mov	r2, r5
 800565a:	4681      	mov	r9, r0
 800565c:	463d      	mov	r5, r7
 800565e:	4603      	mov	r3, r0
 8005660:	2a65      	cmp	r2, #101	@ 0x65
 8005662:	d001      	beq.n	8005668 <_strtod_l+0x170>
 8005664:	2a45      	cmp	r2, #69	@ 0x45
 8005666:	d114      	bne.n	8005692 <_strtod_l+0x19a>
 8005668:	b91d      	cbnz	r5, 8005672 <_strtod_l+0x17a>
 800566a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800566c:	4302      	orrs	r2, r0
 800566e:	d095      	beq.n	800559c <_strtod_l+0xa4>
 8005670:	2500      	movs	r5, #0
 8005672:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005674:	1c62      	adds	r2, r4, #1
 8005676:	9219      	str	r2, [sp, #100]	@ 0x64
 8005678:	7862      	ldrb	r2, [r4, #1]
 800567a:	2a2b      	cmp	r2, #43	@ 0x2b
 800567c:	d077      	beq.n	800576e <_strtod_l+0x276>
 800567e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005680:	d07b      	beq.n	800577a <_strtod_l+0x282>
 8005682:	f04f 0c00 	mov.w	ip, #0
 8005686:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800568a:	2909      	cmp	r1, #9
 800568c:	f240 8082 	bls.w	8005794 <_strtod_l+0x29c>
 8005690:	9419      	str	r4, [sp, #100]	@ 0x64
 8005692:	f04f 0800 	mov.w	r8, #0
 8005696:	e0a2      	b.n	80057de <_strtod_l+0x2e6>
 8005698:	2300      	movs	r3, #0
 800569a:	e7c7      	b.n	800562c <_strtod_l+0x134>
 800569c:	2f08      	cmp	r7, #8
 800569e:	bfd5      	itete	le
 80056a0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80056a2:	9908      	ldrgt	r1, [sp, #32]
 80056a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80056a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80056ac:	f100 0001 	add.w	r0, r0, #1
 80056b0:	bfd4      	ite	le
 80056b2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80056b4:	9308      	strgt	r3, [sp, #32]
 80056b6:	3701      	adds	r7, #1
 80056b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80056ba:	e7bf      	b.n	800563c <_strtod_l+0x144>
 80056bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80056c2:	785a      	ldrb	r2, [r3, #1]
 80056c4:	b37f      	cbz	r7, 8005726 <_strtod_l+0x22e>
 80056c6:	4681      	mov	r9, r0
 80056c8:	463d      	mov	r5, r7
 80056ca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d912      	bls.n	80056f8 <_strtod_l+0x200>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7c4      	b.n	8005660 <_strtod_l+0x168>
 80056d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056d8:	3001      	adds	r0, #1
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80056de:	785a      	ldrb	r2, [r3, #1]
 80056e0:	2a30      	cmp	r2, #48	@ 0x30
 80056e2:	d0f8      	beq.n	80056d6 <_strtod_l+0x1de>
 80056e4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	f200 84cb 	bhi.w	8006084 <_strtod_l+0xb8c>
 80056ee:	4681      	mov	r9, r0
 80056f0:	2000      	movs	r0, #0
 80056f2:	4605      	mov	r5, r0
 80056f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80056f8:	3a30      	subs	r2, #48	@ 0x30
 80056fa:	f100 0301 	add.w	r3, r0, #1
 80056fe:	d02a      	beq.n	8005756 <_strtod_l+0x25e>
 8005700:	4499      	add	r9, r3
 8005702:	210a      	movs	r1, #10
 8005704:	462b      	mov	r3, r5
 8005706:	eb00 0c05 	add.w	ip, r0, r5
 800570a:	4563      	cmp	r3, ip
 800570c:	d10d      	bne.n	800572a <_strtod_l+0x232>
 800570e:	1c69      	adds	r1, r5, #1
 8005710:	4401      	add	r1, r0
 8005712:	4428      	add	r0, r5
 8005714:	2808      	cmp	r0, #8
 8005716:	dc16      	bgt.n	8005746 <_strtod_l+0x24e>
 8005718:	230a      	movs	r3, #10
 800571a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800571c:	fb03 2300 	mla	r3, r3, r0, r2
 8005720:	930a      	str	r3, [sp, #40]	@ 0x28
 8005722:	2300      	movs	r3, #0
 8005724:	e018      	b.n	8005758 <_strtod_l+0x260>
 8005726:	4638      	mov	r0, r7
 8005728:	e7da      	b.n	80056e0 <_strtod_l+0x1e8>
 800572a:	2b08      	cmp	r3, #8
 800572c:	f103 0301 	add.w	r3, r3, #1
 8005730:	dc03      	bgt.n	800573a <_strtod_l+0x242>
 8005732:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005734:	434e      	muls	r6, r1
 8005736:	960a      	str	r6, [sp, #40]	@ 0x28
 8005738:	e7e7      	b.n	800570a <_strtod_l+0x212>
 800573a:	2b10      	cmp	r3, #16
 800573c:	bfde      	ittt	le
 800573e:	9e08      	ldrle	r6, [sp, #32]
 8005740:	434e      	mulle	r6, r1
 8005742:	9608      	strle	r6, [sp, #32]
 8005744:	e7e1      	b.n	800570a <_strtod_l+0x212>
 8005746:	280f      	cmp	r0, #15
 8005748:	dceb      	bgt.n	8005722 <_strtod_l+0x22a>
 800574a:	230a      	movs	r3, #10
 800574c:	9808      	ldr	r0, [sp, #32]
 800574e:	fb03 2300 	mla	r3, r3, r0, r2
 8005752:	9308      	str	r3, [sp, #32]
 8005754:	e7e5      	b.n	8005722 <_strtod_l+0x22a>
 8005756:	4629      	mov	r1, r5
 8005758:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800575a:	460d      	mov	r5, r1
 800575c:	1c50      	adds	r0, r2, #1
 800575e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005760:	7852      	ldrb	r2, [r2, #1]
 8005762:	4618      	mov	r0, r3
 8005764:	e7b1      	b.n	80056ca <_strtod_l+0x1d2>
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	2301      	movs	r3, #1
 800576c:	e77d      	b.n	800566a <_strtod_l+0x172>
 800576e:	f04f 0c00 	mov.w	ip, #0
 8005772:	1ca2      	adds	r2, r4, #2
 8005774:	9219      	str	r2, [sp, #100]	@ 0x64
 8005776:	78a2      	ldrb	r2, [r4, #2]
 8005778:	e785      	b.n	8005686 <_strtod_l+0x18e>
 800577a:	f04f 0c01 	mov.w	ip, #1
 800577e:	e7f8      	b.n	8005772 <_strtod_l+0x27a>
 8005780:	0800a2b8 	.word	0x0800a2b8
 8005784:	7ff00000 	.word	0x7ff00000
 8005788:	0800a2a2 	.word	0x0800a2a2
 800578c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800578e:	1c51      	adds	r1, r2, #1
 8005790:	9119      	str	r1, [sp, #100]	@ 0x64
 8005792:	7852      	ldrb	r2, [r2, #1]
 8005794:	2a30      	cmp	r2, #48	@ 0x30
 8005796:	d0f9      	beq.n	800578c <_strtod_l+0x294>
 8005798:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800579c:	2908      	cmp	r1, #8
 800579e:	f63f af78 	bhi.w	8005692 <_strtod_l+0x19a>
 80057a2:	f04f 080a 	mov.w	r8, #10
 80057a6:	3a30      	subs	r2, #48	@ 0x30
 80057a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80057aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80057ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80057ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80057b0:	1c56      	adds	r6, r2, #1
 80057b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80057b4:	7852      	ldrb	r2, [r2, #1]
 80057b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80057ba:	f1be 0f09 	cmp.w	lr, #9
 80057be:	d939      	bls.n	8005834 <_strtod_l+0x33c>
 80057c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80057c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80057c6:	1a76      	subs	r6, r6, r1
 80057c8:	2e08      	cmp	r6, #8
 80057ca:	dc03      	bgt.n	80057d4 <_strtod_l+0x2dc>
 80057cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80057ce:	4588      	cmp	r8, r1
 80057d0:	bfa8      	it	ge
 80057d2:	4688      	movge	r8, r1
 80057d4:	f1bc 0f00 	cmp.w	ip, #0
 80057d8:	d001      	beq.n	80057de <_strtod_l+0x2e6>
 80057da:	f1c8 0800 	rsb	r8, r8, #0
 80057de:	2d00      	cmp	r5, #0
 80057e0:	d14e      	bne.n	8005880 <_strtod_l+0x388>
 80057e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057e4:	4308      	orrs	r0, r1
 80057e6:	f47f aec0 	bne.w	800556a <_strtod_l+0x72>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f47f aed6 	bne.w	800559c <_strtod_l+0xa4>
 80057f0:	2a69      	cmp	r2, #105	@ 0x69
 80057f2:	d028      	beq.n	8005846 <_strtod_l+0x34e>
 80057f4:	dc25      	bgt.n	8005842 <_strtod_l+0x34a>
 80057f6:	2a49      	cmp	r2, #73	@ 0x49
 80057f8:	d025      	beq.n	8005846 <_strtod_l+0x34e>
 80057fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80057fc:	f47f aece 	bne.w	800559c <_strtod_l+0xa4>
 8005800:	499a      	ldr	r1, [pc, #616]	@ (8005a6c <_strtod_l+0x574>)
 8005802:	a819      	add	r0, sp, #100	@ 0x64
 8005804:	f002 fc5e 	bl	80080c4 <__match>
 8005808:	2800      	cmp	r0, #0
 800580a:	f43f aec7 	beq.w	800559c <_strtod_l+0xa4>
 800580e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b28      	cmp	r3, #40	@ 0x28
 8005814:	d12e      	bne.n	8005874 <_strtod_l+0x37c>
 8005816:	4996      	ldr	r1, [pc, #600]	@ (8005a70 <_strtod_l+0x578>)
 8005818:	aa1c      	add	r2, sp, #112	@ 0x70
 800581a:	a819      	add	r0, sp, #100	@ 0x64
 800581c:	f002 fc66 	bl	80080ec <__hexnan>
 8005820:	2805      	cmp	r0, #5
 8005822:	d127      	bne.n	8005874 <_strtod_l+0x37c>
 8005824:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005826:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800582a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800582e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005832:	e69a      	b.n	800556a <_strtod_l+0x72>
 8005834:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005836:	fb08 2101 	mla	r1, r8, r1, r2
 800583a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800583e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005840:	e7b5      	b.n	80057ae <_strtod_l+0x2b6>
 8005842:	2a6e      	cmp	r2, #110	@ 0x6e
 8005844:	e7da      	b.n	80057fc <_strtod_l+0x304>
 8005846:	498b      	ldr	r1, [pc, #556]	@ (8005a74 <_strtod_l+0x57c>)
 8005848:	a819      	add	r0, sp, #100	@ 0x64
 800584a:	f002 fc3b 	bl	80080c4 <__match>
 800584e:	2800      	cmp	r0, #0
 8005850:	f43f aea4 	beq.w	800559c <_strtod_l+0xa4>
 8005854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005856:	4988      	ldr	r1, [pc, #544]	@ (8005a78 <_strtod_l+0x580>)
 8005858:	3b01      	subs	r3, #1
 800585a:	a819      	add	r0, sp, #100	@ 0x64
 800585c:	9319      	str	r3, [sp, #100]	@ 0x64
 800585e:	f002 fc31 	bl	80080c4 <__match>
 8005862:	b910      	cbnz	r0, 800586a <_strtod_l+0x372>
 8005864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005866:	3301      	adds	r3, #1
 8005868:	9319      	str	r3, [sp, #100]	@ 0x64
 800586a:	f04f 0a00 	mov.w	sl, #0
 800586e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005a7c <_strtod_l+0x584>
 8005872:	e67a      	b.n	800556a <_strtod_l+0x72>
 8005874:	4882      	ldr	r0, [pc, #520]	@ (8005a80 <_strtod_l+0x588>)
 8005876:	f001 fafd 	bl	8006e74 <nan>
 800587a:	4682      	mov	sl, r0
 800587c:	468b      	mov	fp, r1
 800587e:	e674      	b.n	800556a <_strtod_l+0x72>
 8005880:	eba8 0309 	sub.w	r3, r8, r9
 8005884:	2f00      	cmp	r7, #0
 8005886:	bf08      	it	eq
 8005888:	462f      	moveq	r7, r5
 800588a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800588c:	2d10      	cmp	r5, #16
 800588e:	462c      	mov	r4, r5
 8005890:	9309      	str	r3, [sp, #36]	@ 0x24
 8005892:	bfa8      	it	ge
 8005894:	2410      	movge	r4, #16
 8005896:	f7fa fda5 	bl	80003e4 <__aeabi_ui2d>
 800589a:	2d09      	cmp	r5, #9
 800589c:	4682      	mov	sl, r0
 800589e:	468b      	mov	fp, r1
 80058a0:	dc11      	bgt.n	80058c6 <_strtod_l+0x3ce>
 80058a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f43f ae60 	beq.w	800556a <_strtod_l+0x72>
 80058aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ac:	dd76      	ble.n	800599c <_strtod_l+0x4a4>
 80058ae:	2b16      	cmp	r3, #22
 80058b0:	dc5d      	bgt.n	800596e <_strtod_l+0x476>
 80058b2:	4974      	ldr	r1, [pc, #464]	@ (8005a84 <_strtod_l+0x58c>)
 80058b4:	4652      	mov	r2, sl
 80058b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80058ba:	465b      	mov	r3, fp
 80058bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c0:	f7fa fe0a 	bl	80004d8 <__aeabi_dmul>
 80058c4:	e7d9      	b.n	800587a <_strtod_l+0x382>
 80058c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005a84 <_strtod_l+0x58c>)
 80058c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	4682      	mov	sl, r0
 80058d6:	9808      	ldr	r0, [sp, #32]
 80058d8:	468b      	mov	fp, r1
 80058da:	f7fa fd83 	bl	80003e4 <__aeabi_ui2d>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	f7fa fc41 	bl	800016c <__adddf3>
 80058ea:	2d0f      	cmp	r5, #15
 80058ec:	4682      	mov	sl, r0
 80058ee:	468b      	mov	fp, r1
 80058f0:	ddd7      	ble.n	80058a2 <_strtod_l+0x3aa>
 80058f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f4:	1b2c      	subs	r4, r5, r4
 80058f6:	441c      	add	r4, r3
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	f340 8096 	ble.w	8005a2a <_strtod_l+0x532>
 80058fe:	f014 030f 	ands.w	r3, r4, #15
 8005902:	d00a      	beq.n	800591a <_strtod_l+0x422>
 8005904:	495f      	ldr	r1, [pc, #380]	@ (8005a84 <_strtod_l+0x58c>)
 8005906:	4652      	mov	r2, sl
 8005908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800590c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005910:	465b      	mov	r3, fp
 8005912:	f7fa fde1 	bl	80004d8 <__aeabi_dmul>
 8005916:	4682      	mov	sl, r0
 8005918:	468b      	mov	fp, r1
 800591a:	f034 040f 	bics.w	r4, r4, #15
 800591e:	d073      	beq.n	8005a08 <_strtod_l+0x510>
 8005920:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005924:	dd48      	ble.n	80059b8 <_strtod_l+0x4c0>
 8005926:	2400      	movs	r4, #0
 8005928:	46a0      	mov	r8, r4
 800592a:	46a1      	mov	r9, r4
 800592c:	940a      	str	r4, [sp, #40]	@ 0x28
 800592e:	2322      	movs	r3, #34	@ 0x22
 8005930:	f04f 0a00 	mov.w	sl, #0
 8005934:	9a05      	ldr	r2, [sp, #20]
 8005936:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005a7c <_strtod_l+0x584>
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	f43f ae13 	beq.w	800556a <_strtod_l+0x72>
 8005944:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005946:	9805      	ldr	r0, [sp, #20]
 8005948:	f002 fd74 	bl	8008434 <_Bfree>
 800594c:	4649      	mov	r1, r9
 800594e:	9805      	ldr	r0, [sp, #20]
 8005950:	f002 fd70 	bl	8008434 <_Bfree>
 8005954:	4641      	mov	r1, r8
 8005956:	9805      	ldr	r0, [sp, #20]
 8005958:	f002 fd6c 	bl	8008434 <_Bfree>
 800595c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800595e:	9805      	ldr	r0, [sp, #20]
 8005960:	f002 fd68 	bl	8008434 <_Bfree>
 8005964:	4621      	mov	r1, r4
 8005966:	9805      	ldr	r0, [sp, #20]
 8005968:	f002 fd64 	bl	8008434 <_Bfree>
 800596c:	e5fd      	b.n	800556a <_strtod_l+0x72>
 800596e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005970:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005974:	4293      	cmp	r3, r2
 8005976:	dbbc      	blt.n	80058f2 <_strtod_l+0x3fa>
 8005978:	4c42      	ldr	r4, [pc, #264]	@ (8005a84 <_strtod_l+0x58c>)
 800597a:	f1c5 050f 	rsb	r5, r5, #15
 800597e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005982:	4652      	mov	r2, sl
 8005984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005988:	465b      	mov	r3, fp
 800598a:	f7fa fda5 	bl	80004d8 <__aeabi_dmul>
 800598e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005990:	1b5d      	subs	r5, r3, r5
 8005992:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005996:	e9d4 2300 	ldrd	r2, r3, [r4]
 800599a:	e791      	b.n	80058c0 <_strtod_l+0x3c8>
 800599c:	3316      	adds	r3, #22
 800599e:	dba8      	blt.n	80058f2 <_strtod_l+0x3fa>
 80059a0:	4b38      	ldr	r3, [pc, #224]	@ (8005a84 <_strtod_l+0x58c>)
 80059a2:	eba9 0808 	sub.w	r8, r9, r8
 80059a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80059aa:	4650      	mov	r0, sl
 80059ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80059b0:	4659      	mov	r1, fp
 80059b2:	f7fa febb 	bl	800072c <__aeabi_ddiv>
 80059b6:	e760      	b.n	800587a <_strtod_l+0x382>
 80059b8:	4b33      	ldr	r3, [pc, #204]	@ (8005a88 <_strtod_l+0x590>)
 80059ba:	4650      	mov	r0, sl
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	2300      	movs	r3, #0
 80059c0:	4659      	mov	r1, fp
 80059c2:	461e      	mov	r6, r3
 80059c4:	1124      	asrs	r4, r4, #4
 80059c6:	2c01      	cmp	r4, #1
 80059c8:	dc21      	bgt.n	8005a0e <_strtod_l+0x516>
 80059ca:	b10b      	cbz	r3, 80059d0 <_strtod_l+0x4d8>
 80059cc:	4682      	mov	sl, r0
 80059ce:	468b      	mov	fp, r1
 80059d0:	492d      	ldr	r1, [pc, #180]	@ (8005a88 <_strtod_l+0x590>)
 80059d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80059d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80059da:	4652      	mov	r2, sl
 80059dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059e0:	465b      	mov	r3, fp
 80059e2:	f7fa fd79 	bl	80004d8 <__aeabi_dmul>
 80059e6:	4b25      	ldr	r3, [pc, #148]	@ (8005a7c <_strtod_l+0x584>)
 80059e8:	460a      	mov	r2, r1
 80059ea:	400b      	ands	r3, r1
 80059ec:	4927      	ldr	r1, [pc, #156]	@ (8005a8c <_strtod_l+0x594>)
 80059ee:	4682      	mov	sl, r0
 80059f0:	428b      	cmp	r3, r1
 80059f2:	d898      	bhi.n	8005926 <_strtod_l+0x42e>
 80059f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80059f8:	428b      	cmp	r3, r1
 80059fa:	bf86      	itte	hi
 80059fc:	f04f 3aff 	movhi.w	sl, #4294967295
 8005a00:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005a90 <_strtod_l+0x598>
 8005a04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	e07a      	b.n	8005b04 <_strtod_l+0x60c>
 8005a0e:	07e2      	lsls	r2, r4, #31
 8005a10:	d505      	bpl.n	8005a1e <_strtod_l+0x526>
 8005a12:	9b08      	ldr	r3, [sp, #32]
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fd5e 	bl	80004d8 <__aeabi_dmul>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9a08      	ldr	r2, [sp, #32]
 8005a20:	3601      	adds	r6, #1
 8005a22:	3208      	adds	r2, #8
 8005a24:	1064      	asrs	r4, r4, #1
 8005a26:	9208      	str	r2, [sp, #32]
 8005a28:	e7cd      	b.n	80059c6 <_strtod_l+0x4ce>
 8005a2a:	d0ed      	beq.n	8005a08 <_strtod_l+0x510>
 8005a2c:	4264      	negs	r4, r4
 8005a2e:	f014 020f 	ands.w	r2, r4, #15
 8005a32:	d00a      	beq.n	8005a4a <_strtod_l+0x552>
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <_strtod_l+0x58c>)
 8005a36:	4650      	mov	r0, sl
 8005a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fe73 	bl	800072c <__aeabi_ddiv>
 8005a46:	4682      	mov	sl, r0
 8005a48:	468b      	mov	fp, r1
 8005a4a:	1124      	asrs	r4, r4, #4
 8005a4c:	d0dc      	beq.n	8005a08 <_strtod_l+0x510>
 8005a4e:	2c1f      	cmp	r4, #31
 8005a50:	dd20      	ble.n	8005a94 <_strtod_l+0x59c>
 8005a52:	2400      	movs	r4, #0
 8005a54:	46a0      	mov	r8, r4
 8005a56:	46a1      	mov	r9, r4
 8005a58:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a5a:	2322      	movs	r3, #34	@ 0x22
 8005a5c:	9a05      	ldr	r2, [sp, #20]
 8005a5e:	f04f 0a00 	mov.w	sl, #0
 8005a62:	f04f 0b00 	mov.w	fp, #0
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e768      	b.n	800593c <_strtod_l+0x444>
 8005a6a:	bf00      	nop
 8005a6c:	0800a406 	.word	0x0800a406
 8005a70:	0800a2a4 	.word	0x0800a2a4
 8005a74:	0800a3fe 	.word	0x0800a3fe
 8005a78:	0800a438 	.word	0x0800a438
 8005a7c:	7ff00000 	.word	0x7ff00000
 8005a80:	0800a6c4 	.word	0x0800a6c4
 8005a84:	0800a5b0 	.word	0x0800a5b0
 8005a88:	0800a588 	.word	0x0800a588
 8005a8c:	7ca00000 	.word	0x7ca00000
 8005a90:	7fefffff 	.word	0x7fefffff
 8005a94:	f014 0310 	ands.w	r3, r4, #16
 8005a98:	bf18      	it	ne
 8005a9a:	236a      	movne	r3, #106	@ 0x6a
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	9308      	str	r3, [sp, #32]
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4ea9      	ldr	r6, [pc, #676]	@ (8005d4c <_strtod_l+0x854>)
 8005aa6:	07e2      	lsls	r2, r4, #31
 8005aa8:	d504      	bpl.n	8005ab4 <_strtod_l+0x5bc>
 8005aaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aae:	f7fa fd13 	bl	80004d8 <__aeabi_dmul>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	1064      	asrs	r4, r4, #1
 8005ab6:	f106 0608 	add.w	r6, r6, #8
 8005aba:	d1f4      	bne.n	8005aa6 <_strtod_l+0x5ae>
 8005abc:	b10b      	cbz	r3, 8005ac2 <_strtod_l+0x5ca>
 8005abe:	4682      	mov	sl, r0
 8005ac0:	468b      	mov	fp, r1
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	b1b3      	cbz	r3, 8005af4 <_strtod_l+0x5fc>
 8005ac6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005aca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	dd0f      	ble.n	8005af4 <_strtod_l+0x5fc>
 8005ad4:	2b1f      	cmp	r3, #31
 8005ad6:	dd57      	ble.n	8005b88 <_strtod_l+0x690>
 8005ad8:	2b34      	cmp	r3, #52	@ 0x34
 8005ada:	bfd8      	it	le
 8005adc:	f04f 33ff 	movle.w	r3, #4294967295
 8005ae0:	f04f 0a00 	mov.w	sl, #0
 8005ae4:	bfcf      	iteee	gt
 8005ae6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005aea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005aee:	4093      	lslle	r3, r2
 8005af0:	ea03 0b01 	andle.w	fp, r3, r1
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	4650      	mov	r0, sl
 8005afa:	4659      	mov	r1, fp
 8005afc:	f7fa ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d1a6      	bne.n	8005a52 <_strtod_l+0x55a>
 8005b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b06:	463a      	mov	r2, r7
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	9805      	ldr	r0, [sp, #20]
 8005b10:	f002 fcf8 	bl	8008504 <__s2b>
 8005b14:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f43f af05 	beq.w	8005926 <_strtod_l+0x42e>
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b20:	eba9 0308 	sub.w	r3, r9, r8
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	bfa8      	it	ge
 8005b28:	2300      	movge	r3, #0
 8005b2a:	46a0      	mov	r8, r4
 8005b2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8005b2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005b32:	9316      	str	r3, [sp, #88]	@ 0x58
 8005b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b36:	9805      	ldr	r0, [sp, #20]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	f002 fc3b 	bl	80083b4 <_Balloc>
 8005b3e:	4681      	mov	r9, r0
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f43f aef4 	beq.w	800592e <_strtod_l+0x436>
 8005b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b48:	300c      	adds	r0, #12
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	f103 010c 	add.w	r1, r3, #12
 8005b50:	3202      	adds	r2, #2
 8005b52:	0092      	lsls	r2, r2, #2
 8005b54:	f001 f97f 	bl	8006e56 <memcpy>
 8005b58:	ab1c      	add	r3, sp, #112	@ 0x70
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	4652      	mov	r2, sl
 8005b62:	465b      	mov	r3, fp
 8005b64:	9805      	ldr	r0, [sp, #20]
 8005b66:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005b6a:	f002 fffd 	bl	8008b68 <__d2b>
 8005b6e:	901a      	str	r0, [sp, #104]	@ 0x68
 8005b70:	2800      	cmp	r0, #0
 8005b72:	f43f aedc 	beq.w	800592e <_strtod_l+0x436>
 8005b76:	2101      	movs	r1, #1
 8005b78:	9805      	ldr	r0, [sp, #20]
 8005b7a:	f002 fd59 	bl	8008630 <__i2b>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	b948      	cbnz	r0, 8005b96 <_strtod_l+0x69e>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	e6d2      	b.n	800592e <_strtod_l+0x436>
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	ea03 0a0a 	and.w	sl, r3, sl
 8005b94:	e7ae      	b.n	8005af4 <_strtod_l+0x5fc>
 8005b96:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005b98:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	bfab      	itete	ge
 8005b9e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005ba0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005ba2:	18ef      	addge	r7, r5, r3
 8005ba4:	1b5e      	sublt	r6, r3, r5
 8005ba6:	9b08      	ldr	r3, [sp, #32]
 8005ba8:	bfa8      	it	ge
 8005baa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005bac:	eba5 0503 	sub.w	r5, r5, r3
 8005bb0:	4415      	add	r5, r2
 8005bb2:	4b67      	ldr	r3, [pc, #412]	@ (8005d50 <_strtod_l+0x858>)
 8005bb4:	f105 35ff 	add.w	r5, r5, #4294967295
 8005bb8:	bfb8      	it	lt
 8005bba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005bbc:	429d      	cmp	r5, r3
 8005bbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005bc2:	da50      	bge.n	8005c66 <_strtod_l+0x76e>
 8005bc4:	1b5b      	subs	r3, r3, r5
 8005bc6:	2b1f      	cmp	r3, #31
 8005bc8:	f04f 0101 	mov.w	r1, #1
 8005bcc:	eba2 0203 	sub.w	r2, r2, r3
 8005bd0:	dc3d      	bgt.n	8005c4e <_strtod_l+0x756>
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9310      	str	r3, [sp, #64]	@ 0x40
 8005bdc:	18bd      	adds	r5, r7, r2
 8005bde:	9b08      	ldr	r3, [sp, #32]
 8005be0:	42af      	cmp	r7, r5
 8005be2:	4416      	add	r6, r2
 8005be4:	441e      	add	r6, r3
 8005be6:	463b      	mov	r3, r7
 8005be8:	bfa8      	it	ge
 8005bea:	462b      	movge	r3, r5
 8005bec:	42b3      	cmp	r3, r6
 8005bee:	bfa8      	it	ge
 8005bf0:	4633      	movge	r3, r6
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bfc2      	ittt	gt
 8005bf6:	1aed      	subgt	r5, r5, r3
 8005bf8:	1af6      	subgt	r6, r6, r3
 8005bfa:	1aff      	subgt	r7, r7, r3
 8005bfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	dd16      	ble.n	8005c30 <_strtod_l+0x738>
 8005c02:	4641      	mov	r1, r8
 8005c04:	461a      	mov	r2, r3
 8005c06:	9805      	ldr	r0, [sp, #20]
 8005c08:	f002 fdd0 	bl	80087ac <__pow5mult>
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0b7      	beq.n	8005b82 <_strtod_l+0x68a>
 8005c12:	4601      	mov	r1, r0
 8005c14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005c16:	9805      	ldr	r0, [sp, #20]
 8005c18:	f002 fd20 	bl	800865c <__multiply>
 8005c1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f ae85 	beq.w	800592e <_strtod_l+0x436>
 8005c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c26:	9805      	ldr	r0, [sp, #20]
 8005c28:	f002 fc04 	bl	8008434 <_Bfree>
 8005c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	dc1d      	bgt.n	8005c70 <_strtod_l+0x778>
 8005c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dd23      	ble.n	8005c82 <_strtod_l+0x78a>
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005c3e:	9805      	ldr	r0, [sp, #20]
 8005c40:	f002 fdb4 	bl	80087ac <__pow5mult>
 8005c44:	4681      	mov	r9, r0
 8005c46:	b9e0      	cbnz	r0, 8005c82 <_strtod_l+0x78a>
 8005c48:	f04f 0900 	mov.w	r9, #0
 8005c4c:	e66f      	b.n	800592e <_strtod_l+0x436>
 8005c4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005c52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005c56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005c5a:	35e2      	adds	r5, #226	@ 0xe2
 8005c5c:	fa01 f305 	lsl.w	r3, r1, r5
 8005c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005c64:	e7ba      	b.n	8005bdc <_strtod_l+0x6e4>
 8005c66:	2300      	movs	r3, #0
 8005c68:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c6e:	e7b5      	b.n	8005bdc <_strtod_l+0x6e4>
 8005c70:	462a      	mov	r2, r5
 8005c72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c74:	9805      	ldr	r0, [sp, #20]
 8005c76:	f002 fdf3 	bl	8008860 <__lshift>
 8005c7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d1d9      	bne.n	8005c34 <_strtod_l+0x73c>
 8005c80:	e655      	b.n	800592e <_strtod_l+0x436>
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	dd07      	ble.n	8005c96 <_strtod_l+0x79e>
 8005c86:	4649      	mov	r1, r9
 8005c88:	4632      	mov	r2, r6
 8005c8a:	9805      	ldr	r0, [sp, #20]
 8005c8c:	f002 fde8 	bl	8008860 <__lshift>
 8005c90:	4681      	mov	r9, r0
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d0d8      	beq.n	8005c48 <_strtod_l+0x750>
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	dd08      	ble.n	8005cac <_strtod_l+0x7b4>
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	463a      	mov	r2, r7
 8005c9e:	9805      	ldr	r0, [sp, #20]
 8005ca0:	f002 fdde 	bl	8008860 <__lshift>
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f43f ae41 	beq.w	800592e <_strtod_l+0x436>
 8005cac:	464a      	mov	r2, r9
 8005cae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cb0:	9805      	ldr	r0, [sp, #20]
 8005cb2:	f002 fe5d 	bl	8008970 <__mdiff>
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f43f ae38 	beq.w	800592e <_strtod_l+0x436>
 8005cbe:	68c3      	ldr	r3, [r0, #12]
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60c3      	str	r3, [r0, #12]
 8005cc8:	f002 fe36 	bl	8008938 <__mcmp>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	da45      	bge.n	8005d5c <_strtod_l+0x864>
 8005cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cd2:	ea53 030a 	orrs.w	r3, r3, sl
 8005cd6:	d16b      	bne.n	8005db0 <_strtod_l+0x8b8>
 8005cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d167      	bne.n	8005db0 <_strtod_l+0x8b8>
 8005ce0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ce4:	0d1b      	lsrs	r3, r3, #20
 8005ce6:	051b      	lsls	r3, r3, #20
 8005ce8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005cec:	d960      	bls.n	8005db0 <_strtod_l+0x8b8>
 8005cee:	6963      	ldr	r3, [r4, #20]
 8005cf0:	b913      	cbnz	r3, 8005cf8 <_strtod_l+0x800>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	dd5b      	ble.n	8005db0 <_strtod_l+0x8b8>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	9805      	ldr	r0, [sp, #20]
 8005cfe:	f002 fdaf 	bl	8008860 <__lshift>
 8005d02:	4641      	mov	r1, r8
 8005d04:	4604      	mov	r4, r0
 8005d06:	f002 fe17 	bl	8008938 <__mcmp>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	dd50      	ble.n	8005db0 <_strtod_l+0x8b8>
 8005d0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005d12:	9a08      	ldr	r2, [sp, #32]
 8005d14:	0d1b      	lsrs	r3, r3, #20
 8005d16:	051b      	lsls	r3, r3, #20
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d06a      	beq.n	8005df2 <_strtod_l+0x8fa>
 8005d1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005d20:	d867      	bhi.n	8005df2 <_strtod_l+0x8fa>
 8005d22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005d26:	f67f ae98 	bls.w	8005a5a <_strtod_l+0x562>
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	4659      	mov	r1, fp
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <_strtod_l+0x85c>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7fa fbd1 	bl	80004d8 <__aeabi_dmul>
 8005d36:	4b08      	ldr	r3, [pc, #32]	@ (8005d58 <_strtod_l+0x860>)
 8005d38:	4682      	mov	sl, r0
 8005d3a:	400b      	ands	r3, r1
 8005d3c:	468b      	mov	fp, r1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f47f ae00 	bne.w	8005944 <_strtod_l+0x44c>
 8005d44:	2322      	movs	r3, #34	@ 0x22
 8005d46:	9a05      	ldr	r2, [sp, #20]
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e5fb      	b.n	8005944 <_strtod_l+0x44c>
 8005d4c:	0800a2d0 	.word	0x0800a2d0
 8005d50:	fffffc02 	.word	0xfffffc02
 8005d54:	39500000 	.word	0x39500000
 8005d58:	7ff00000 	.word	0x7ff00000
 8005d5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005d60:	d165      	bne.n	8005e2e <_strtod_l+0x936>
 8005d62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d68:	b35a      	cbz	r2, 8005dc2 <_strtod_l+0x8ca>
 8005d6a:	4a99      	ldr	r2, [pc, #612]	@ (8005fd0 <_strtod_l+0xad8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d12b      	bne.n	8005dc8 <_strtod_l+0x8d0>
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	4651      	mov	r1, sl
 8005d74:	b303      	cbz	r3, 8005db8 <_strtod_l+0x8c0>
 8005d76:	465a      	mov	r2, fp
 8005d78:	4b96      	ldr	r3, [pc, #600]	@ (8005fd4 <_strtod_l+0xadc>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	d81b      	bhi.n	8005dbe <_strtod_l+0x8c6>
 8005d86:	0d1b      	lsrs	r3, r3, #20
 8005d88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d119      	bne.n	8005dc8 <_strtod_l+0x8d0>
 8005d94:	4b90      	ldr	r3, [pc, #576]	@ (8005fd8 <_strtod_l+0xae0>)
 8005d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d102      	bne.n	8005da2 <_strtod_l+0x8aa>
 8005d9c:	3101      	adds	r1, #1
 8005d9e:	f43f adc6 	beq.w	800592e <_strtod_l+0x436>
 8005da2:	f04f 0a00 	mov.w	sl, #0
 8005da6:	4b8b      	ldr	r3, [pc, #556]	@ (8005fd4 <_strtod_l+0xadc>)
 8005da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005daa:	401a      	ands	r2, r3
 8005dac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005db0:	9b08      	ldr	r3, [sp, #32]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1b9      	bne.n	8005d2a <_strtod_l+0x832>
 8005db6:	e5c5      	b.n	8005944 <_strtod_l+0x44c>
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbc:	e7e8      	b.n	8005d90 <_strtod_l+0x898>
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	e7e6      	b.n	8005d90 <_strtod_l+0x898>
 8005dc2:	ea53 030a 	orrs.w	r3, r3, sl
 8005dc6:	d0a2      	beq.n	8005d0e <_strtod_l+0x816>
 8005dc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005dca:	b1db      	cbz	r3, 8005e04 <_strtod_l+0x90c>
 8005dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dce:	4213      	tst	r3, r2
 8005dd0:	d0ee      	beq.n	8005db0 <_strtod_l+0x8b8>
 8005dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	9a08      	ldr	r2, [sp, #32]
 8005dda:	b1bb      	cbz	r3, 8005e0c <_strtod_l+0x914>
 8005ddc:	f7ff fb6b 	bl	80054b6 <sulp>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005de8:	f7fa f9c0 	bl	800016c <__adddf3>
 8005dec:	4682      	mov	sl, r0
 8005dee:	468b      	mov	fp, r1
 8005df0:	e7de      	b.n	8005db0 <_strtod_l+0x8b8>
 8005df2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005df6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005dfa:	f04f 3aff 	mov.w	sl, #4294967295
 8005dfe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005e02:	e7d5      	b.n	8005db0 <_strtod_l+0x8b8>
 8005e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e06:	ea13 0f0a 	tst.w	r3, sl
 8005e0a:	e7e1      	b.n	8005dd0 <_strtod_l+0x8d8>
 8005e0c:	f7ff fb53 	bl	80054b6 <sulp>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e18:	f7fa f9a6 	bl	8000168 <__aeabi_dsub>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	4682      	mov	sl, r0
 8005e22:	468b      	mov	fp, r1
 8005e24:	f7fa fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0c1      	beq.n	8005db0 <_strtod_l+0x8b8>
 8005e2c:	e615      	b.n	8005a5a <_strtod_l+0x562>
 8005e2e:	4641      	mov	r1, r8
 8005e30:	4620      	mov	r0, r4
 8005e32:	f002 fef1 	bl	8008c18 <__ratio>
 8005e36:	2200      	movs	r2, #0
 8005e38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	460f      	mov	r7, r1
 8005e40:	f7fa fdc6 	bl	80009d0 <__aeabi_dcmple>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d06d      	beq.n	8005f24 <_strtod_l+0xa2c>
 8005e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d178      	bne.n	8005f40 <_strtod_l+0xa48>
 8005e4e:	f1ba 0f00 	cmp.w	sl, #0
 8005e52:	d156      	bne.n	8005f02 <_strtod_l+0xa0a>
 8005e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d158      	bne.n	8005f10 <_strtod_l+0xa18>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	4b5d      	ldr	r3, [pc, #372]	@ (8005fdc <_strtod_l+0xae4>)
 8005e66:	f7fa fda9 	bl	80009bc <__aeabi_dcmplt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d157      	bne.n	8005f1e <_strtod_l+0xa26>
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	2200      	movs	r2, #0
 8005e74:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe0 <_strtod_l+0xae8>)
 8005e76:	f7fa fb2f 	bl	80004d8 <__aeabi_dmul>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005e82:	9606      	str	r6, [sp, #24]
 8005e84:	9307      	str	r3, [sp, #28]
 8005e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e8a:	4d52      	ldr	r5, [pc, #328]	@ (8005fd4 <_strtod_l+0xadc>)
 8005e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005e90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e92:	401d      	ands	r5, r3
 8005e94:	4b53      	ldr	r3, [pc, #332]	@ (8005fe4 <_strtod_l+0xaec>)
 8005e96:	429d      	cmp	r5, r3
 8005e98:	f040 80aa 	bne.w	8005ff0 <_strtod_l+0xaf8>
 8005e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	f002 fdf7 	bl	8008a98 <__ulp>
 8005eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eae:	f7fa fb13 	bl	80004d8 <__aeabi_dmul>
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	465b      	mov	r3, fp
 8005eb6:	f7fa f959 	bl	800016c <__adddf3>
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4945      	ldr	r1, [pc, #276]	@ (8005fd4 <_strtod_l+0xadc>)
 8005ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe8 <_strtod_l+0xaf0>)
 8005ec0:	4019      	ands	r1, r3
 8005ec2:	4291      	cmp	r1, r2
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	d942      	bls.n	8005f4e <_strtod_l+0xa56>
 8005ec8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005eca:	4b43      	ldr	r3, [pc, #268]	@ (8005fd8 <_strtod_l+0xae0>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d103      	bne.n	8005ed8 <_strtod_l+0x9e0>
 8005ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f43f ad2b 	beq.w	800592e <_strtod_l+0x436>
 8005ed8:	f04f 3aff 	mov.w	sl, #4294967295
 8005edc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005fd8 <_strtod_l+0xae0>
 8005ee0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ee2:	9805      	ldr	r0, [sp, #20]
 8005ee4:	f002 faa6 	bl	8008434 <_Bfree>
 8005ee8:	4649      	mov	r1, r9
 8005eea:	9805      	ldr	r0, [sp, #20]
 8005eec:	f002 faa2 	bl	8008434 <_Bfree>
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	9805      	ldr	r0, [sp, #20]
 8005ef4:	f002 fa9e 	bl	8008434 <_Bfree>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	9805      	ldr	r0, [sp, #20]
 8005efc:	f002 fa9a 	bl	8008434 <_Bfree>
 8005f00:	e618      	b.n	8005b34 <_strtod_l+0x63c>
 8005f02:	f1ba 0f01 	cmp.w	sl, #1
 8005f06:	d103      	bne.n	8005f10 <_strtod_l+0xa18>
 8005f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f43f ada5 	beq.w	8005a5a <_strtod_l+0x562>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b36      	ldr	r3, [pc, #216]	@ (8005fec <_strtod_l+0xaf4>)
 8005f14:	2600      	movs	r6, #0
 8005f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f1a:	4f30      	ldr	r7, [pc, #192]	@ (8005fdc <_strtod_l+0xae4>)
 8005f1c:	e7b3      	b.n	8005e86 <_strtod_l+0x98e>
 8005f1e:	2600      	movs	r6, #0
 8005f20:	4f2f      	ldr	r7, [pc, #188]	@ (8005fe0 <_strtod_l+0xae8>)
 8005f22:	e7ac      	b.n	8005e7e <_strtod_l+0x986>
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe0 <_strtod_l+0xae8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f7fa fad4 	bl	80004d8 <__aeabi_dmul>
 8005f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f32:	4606      	mov	r6, r0
 8005f34:	460f      	mov	r7, r1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0a1      	beq.n	8005e7e <_strtod_l+0x986>
 8005f3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005f3e:	e7a2      	b.n	8005e86 <_strtod_l+0x98e>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4b26      	ldr	r3, [pc, #152]	@ (8005fdc <_strtod_l+0xae4>)
 8005f44:	4616      	mov	r6, r2
 8005f46:	461f      	mov	r7, r3
 8005f48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f4c:	e79b      	b.n	8005e86 <_strtod_l+0x98e>
 8005f4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005f52:	9b08      	ldr	r3, [sp, #32]
 8005f54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1c1      	bne.n	8005ee0 <_strtod_l+0x9e8>
 8005f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f60:	0d1b      	lsrs	r3, r3, #20
 8005f62:	051b      	lsls	r3, r3, #20
 8005f64:	429d      	cmp	r5, r3
 8005f66:	d1bb      	bne.n	8005ee0 <_strtod_l+0x9e8>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa fdac 	bl	8000ac8 <__aeabi_d2lz>
 8005f70:	f7fa fa84 	bl	800047c <__aeabi_l2d>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa f8f4 	bl	8000168 <__aeabi_dsub>
 8005f80:	460b      	mov	r3, r1
 8005f82:	4602      	mov	r2, r0
 8005f84:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005f88:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f8e:	ea46 060a 	orr.w	r6, r6, sl
 8005f92:	431e      	orrs	r6, r3
 8005f94:	d069      	beq.n	800606a <_strtod_l+0xb72>
 8005f96:	a30a      	add	r3, pc, #40	@ (adr r3, 8005fc0 <_strtod_l+0xac8>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa fd0e 	bl	80009bc <__aeabi_dcmplt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f47f accf 	bne.w	8005944 <_strtod_l+0x44c>
 8005fa6:	a308      	add	r3, pc, #32	@ (adr r3, 8005fc8 <_strtod_l+0xad0>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb0:	f7fa fd22 	bl	80009f8 <__aeabi_dcmpgt>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d093      	beq.n	8005ee0 <_strtod_l+0x9e8>
 8005fb8:	e4c4      	b.n	8005944 <_strtod_l+0x44c>
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	94a03595 	.word	0x94a03595
 8005fc4:	3fdfffff 	.word	0x3fdfffff
 8005fc8:	35afe535 	.word	0x35afe535
 8005fcc:	3fe00000 	.word	0x3fe00000
 8005fd0:	000fffff 	.word	0x000fffff
 8005fd4:	7ff00000 	.word	0x7ff00000
 8005fd8:	7fefffff 	.word	0x7fefffff
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	7fe00000 	.word	0x7fe00000
 8005fe8:	7c9fffff 	.word	0x7c9fffff
 8005fec:	bff00000 	.word	0xbff00000
 8005ff0:	9b08      	ldr	r3, [sp, #32]
 8005ff2:	b323      	cbz	r3, 800603e <_strtod_l+0xb46>
 8005ff4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005ff8:	d821      	bhi.n	800603e <_strtod_l+0xb46>
 8005ffa:	a327      	add	r3, pc, #156	@ (adr r3, 8006098 <_strtod_l+0xba0>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	4630      	mov	r0, r6
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa fce4 	bl	80009d0 <__aeabi_dcmple>
 8006008:	b1a0      	cbz	r0, 8006034 <_strtod_l+0xb3c>
 800600a:	4639      	mov	r1, r7
 800600c:	4630      	mov	r0, r6
 800600e:	f7fa fd3b 	bl	8000a88 <__aeabi_d2uiz>
 8006012:	2801      	cmp	r0, #1
 8006014:	bf38      	it	cc
 8006016:	2001      	movcc	r0, #1
 8006018:	f7fa f9e4 	bl	80003e4 <__aeabi_ui2d>
 800601c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	b9fb      	cbnz	r3, 8006064 <_strtod_l+0xb6c>
 8006024:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006028:	9014      	str	r0, [sp, #80]	@ 0x50
 800602a:	9315      	str	r3, [sp, #84]	@ 0x54
 800602c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006030:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006034:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006036:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800603a:	1b5b      	subs	r3, r3, r5
 800603c:	9311      	str	r3, [sp, #68]	@ 0x44
 800603e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006042:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006046:	f002 fd27 	bl	8008a98 <__ulp>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4650      	mov	r0, sl
 8006050:	4659      	mov	r1, fp
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800605a:	f7fa f887 	bl	800016c <__adddf3>
 800605e:	4682      	mov	sl, r0
 8006060:	468b      	mov	fp, r1
 8006062:	e776      	b.n	8005f52 <_strtod_l+0xa5a>
 8006064:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006068:	e7e0      	b.n	800602c <_strtod_l+0xb34>
 800606a:	a30d      	add	r3, pc, #52	@ (adr r3, 80060a0 <_strtod_l+0xba8>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa fca4 	bl	80009bc <__aeabi_dcmplt>
 8006074:	e79e      	b.n	8005fb4 <_strtod_l+0xabc>
 8006076:	2300      	movs	r3, #0
 8006078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800607a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800607c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	f7ff ba77 	b.w	8005572 <_strtod_l+0x7a>
 8006084:	2a65      	cmp	r2, #101	@ 0x65
 8006086:	f43f ab6e 	beq.w	8005766 <_strtod_l+0x26e>
 800608a:	2a45      	cmp	r2, #69	@ 0x45
 800608c:	f43f ab6b 	beq.w	8005766 <_strtod_l+0x26e>
 8006090:	2301      	movs	r3, #1
 8006092:	f7ff bba6 	b.w	80057e2 <_strtod_l+0x2ea>
 8006096:	bf00      	nop
 8006098:	ffc00000 	.word	0xffc00000
 800609c:	41dfffff 	.word	0x41dfffff
 80060a0:	94a03595 	.word	0x94a03595
 80060a4:	3fcfffff 	.word	0x3fcfffff

080060a8 <strtod>:
 80060a8:	460a      	mov	r2, r1
 80060aa:	4601      	mov	r1, r0
 80060ac:	4802      	ldr	r0, [pc, #8]	@ (80060b8 <strtod+0x10>)
 80060ae:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <strtod+0x14>)
 80060b0:	6800      	ldr	r0, [r0, #0]
 80060b2:	f7ff ba21 	b.w	80054f8 <_strtod_l>
 80060b6:	bf00      	nop
 80060b8:	200001a4 	.word	0x200001a4
 80060bc:	20000038 	.word	0x20000038

080060c0 <_strtol_l.constprop.0>:
 80060c0:	2b24      	cmp	r3, #36	@ 0x24
 80060c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c6:	4686      	mov	lr, r0
 80060c8:	4690      	mov	r8, r2
 80060ca:	d801      	bhi.n	80060d0 <_strtol_l.constprop.0+0x10>
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d106      	bne.n	80060de <_strtol_l.constprop.0+0x1e>
 80060d0:	f000 fe86 	bl	8006de0 <__errno>
 80060d4:	2316      	movs	r3, #22
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	2000      	movs	r0, #0
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	460d      	mov	r5, r1
 80060e0:	4833      	ldr	r0, [pc, #204]	@ (80061b0 <_strtol_l.constprop.0+0xf0>)
 80060e2:	462a      	mov	r2, r5
 80060e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060e8:	5d06      	ldrb	r6, [r0, r4]
 80060ea:	f016 0608 	ands.w	r6, r6, #8
 80060ee:	d1f8      	bne.n	80060e2 <_strtol_l.constprop.0+0x22>
 80060f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80060f2:	d12d      	bne.n	8006150 <_strtol_l.constprop.0+0x90>
 80060f4:	2601      	movs	r6, #1
 80060f6:	782c      	ldrb	r4, [r5, #0]
 80060f8:	1c95      	adds	r5, r2, #2
 80060fa:	f033 0210 	bics.w	r2, r3, #16
 80060fe:	d109      	bne.n	8006114 <_strtol_l.constprop.0+0x54>
 8006100:	2c30      	cmp	r4, #48	@ 0x30
 8006102:	d12a      	bne.n	800615a <_strtol_l.constprop.0+0x9a>
 8006104:	782a      	ldrb	r2, [r5, #0]
 8006106:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800610a:	2a58      	cmp	r2, #88	@ 0x58
 800610c:	d125      	bne.n	800615a <_strtol_l.constprop.0+0x9a>
 800610e:	2310      	movs	r3, #16
 8006110:	786c      	ldrb	r4, [r5, #1]
 8006112:	3502      	adds	r5, #2
 8006114:	2200      	movs	r2, #0
 8006116:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800611a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800611e:	fbbc f9f3 	udiv	r9, ip, r3
 8006122:	4610      	mov	r0, r2
 8006124:	fb03 ca19 	mls	sl, r3, r9, ip
 8006128:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800612c:	2f09      	cmp	r7, #9
 800612e:	d81b      	bhi.n	8006168 <_strtol_l.constprop.0+0xa8>
 8006130:	463c      	mov	r4, r7
 8006132:	42a3      	cmp	r3, r4
 8006134:	dd27      	ble.n	8006186 <_strtol_l.constprop.0+0xc6>
 8006136:	1c57      	adds	r7, r2, #1
 8006138:	d007      	beq.n	800614a <_strtol_l.constprop.0+0x8a>
 800613a:	4581      	cmp	r9, r0
 800613c:	d320      	bcc.n	8006180 <_strtol_l.constprop.0+0xc0>
 800613e:	d101      	bne.n	8006144 <_strtol_l.constprop.0+0x84>
 8006140:	45a2      	cmp	sl, r4
 8006142:	db1d      	blt.n	8006180 <_strtol_l.constprop.0+0xc0>
 8006144:	2201      	movs	r2, #1
 8006146:	fb00 4003 	mla	r0, r0, r3, r4
 800614a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800614e:	e7eb      	b.n	8006128 <_strtol_l.constprop.0+0x68>
 8006150:	2c2b      	cmp	r4, #43	@ 0x2b
 8006152:	bf04      	itt	eq
 8006154:	782c      	ldrbeq	r4, [r5, #0]
 8006156:	1c95      	addeq	r5, r2, #2
 8006158:	e7cf      	b.n	80060fa <_strtol_l.constprop.0+0x3a>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1da      	bne.n	8006114 <_strtol_l.constprop.0+0x54>
 800615e:	2c30      	cmp	r4, #48	@ 0x30
 8006160:	bf0c      	ite	eq
 8006162:	2308      	moveq	r3, #8
 8006164:	230a      	movne	r3, #10
 8006166:	e7d5      	b.n	8006114 <_strtol_l.constprop.0+0x54>
 8006168:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800616c:	2f19      	cmp	r7, #25
 800616e:	d801      	bhi.n	8006174 <_strtol_l.constprop.0+0xb4>
 8006170:	3c37      	subs	r4, #55	@ 0x37
 8006172:	e7de      	b.n	8006132 <_strtol_l.constprop.0+0x72>
 8006174:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006178:	2f19      	cmp	r7, #25
 800617a:	d804      	bhi.n	8006186 <_strtol_l.constprop.0+0xc6>
 800617c:	3c57      	subs	r4, #87	@ 0x57
 800617e:	e7d8      	b.n	8006132 <_strtol_l.constprop.0+0x72>
 8006180:	f04f 32ff 	mov.w	r2, #4294967295
 8006184:	e7e1      	b.n	800614a <_strtol_l.constprop.0+0x8a>
 8006186:	1c53      	adds	r3, r2, #1
 8006188:	d108      	bne.n	800619c <_strtol_l.constprop.0+0xdc>
 800618a:	2322      	movs	r3, #34	@ 0x22
 800618c:	4660      	mov	r0, ip
 800618e:	f8ce 3000 	str.w	r3, [lr]
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d0a0      	beq.n	80060da <_strtol_l.constprop.0+0x1a>
 8006198:	1e69      	subs	r1, r5, #1
 800619a:	e006      	b.n	80061aa <_strtol_l.constprop.0+0xea>
 800619c:	b106      	cbz	r6, 80061a0 <_strtol_l.constprop.0+0xe0>
 800619e:	4240      	negs	r0, r0
 80061a0:	f1b8 0f00 	cmp.w	r8, #0
 80061a4:	d099      	beq.n	80060da <_strtol_l.constprop.0+0x1a>
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	d1f6      	bne.n	8006198 <_strtol_l.constprop.0+0xd8>
 80061aa:	f8c8 1000 	str.w	r1, [r8]
 80061ae:	e794      	b.n	80060da <_strtol_l.constprop.0+0x1a>
 80061b0:	0800a2f9 	.word	0x0800a2f9

080061b4 <strtol>:
 80061b4:	4613      	mov	r3, r2
 80061b6:	460a      	mov	r2, r1
 80061b8:	4601      	mov	r1, r0
 80061ba:	4802      	ldr	r0, [pc, #8]	@ (80061c4 <strtol+0x10>)
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f7ff bf7f 	b.w	80060c0 <_strtol_l.constprop.0>
 80061c2:	bf00      	nop
 80061c4:	200001a4 	.word	0x200001a4

080061c8 <__cvt>:
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ce:	461d      	mov	r5, r3
 80061d0:	bfbb      	ittet	lt
 80061d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80061d6:	461d      	movlt	r5, r3
 80061d8:	2300      	movge	r3, #0
 80061da:	232d      	movlt	r3, #45	@ 0x2d
 80061dc:	b088      	sub	sp, #32
 80061de:	4614      	mov	r4, r2
 80061e0:	bfb8      	it	lt
 80061e2:	4614      	movlt	r4, r2
 80061e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80061e8:	7013      	strb	r3, [r2, #0]
 80061ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80061f0:	f023 0820 	bic.w	r8, r3, #32
 80061f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061f8:	d005      	beq.n	8006206 <__cvt+0x3e>
 80061fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061fe:	d100      	bne.n	8006202 <__cvt+0x3a>
 8006200:	3601      	adds	r6, #1
 8006202:	2302      	movs	r3, #2
 8006204:	e000      	b.n	8006208 <__cvt+0x40>
 8006206:	2303      	movs	r3, #3
 8006208:	aa07      	add	r2, sp, #28
 800620a:	9204      	str	r2, [sp, #16]
 800620c:	aa06      	add	r2, sp, #24
 800620e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006212:	e9cd 3600 	strd	r3, r6, [sp]
 8006216:	4622      	mov	r2, r4
 8006218:	462b      	mov	r3, r5
 800621a:	f000 feb9 	bl	8006f90 <_dtoa_r>
 800621e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006222:	4607      	mov	r7, r0
 8006224:	d119      	bne.n	800625a <__cvt+0x92>
 8006226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006228:	07db      	lsls	r3, r3, #31
 800622a:	d50e      	bpl.n	800624a <__cvt+0x82>
 800622c:	eb00 0906 	add.w	r9, r0, r6
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa fbb6 	bl	80009a8 <__aeabi_dcmpeq>
 800623c:	b108      	cbz	r0, 8006242 <__cvt+0x7a>
 800623e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006242:	2230      	movs	r2, #48	@ 0x30
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	454b      	cmp	r3, r9
 8006248:	d31e      	bcc.n	8006288 <__cvt+0xc0>
 800624a:	4638      	mov	r0, r7
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006250:	1bdb      	subs	r3, r3, r7
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	b008      	add	sp, #32
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800625e:	eb00 0906 	add.w	r9, r0, r6
 8006262:	d1e5      	bne.n	8006230 <__cvt+0x68>
 8006264:	7803      	ldrb	r3, [r0, #0]
 8006266:	2b30      	cmp	r3, #48	@ 0x30
 8006268:	d10a      	bne.n	8006280 <__cvt+0xb8>
 800626a:	2200      	movs	r2, #0
 800626c:	2300      	movs	r3, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fb99 	bl	80009a8 <__aeabi_dcmpeq>
 8006276:	b918      	cbnz	r0, 8006280 <__cvt+0xb8>
 8006278:	f1c6 0601 	rsb	r6, r6, #1
 800627c:	f8ca 6000 	str.w	r6, [sl]
 8006280:	f8da 3000 	ldr.w	r3, [sl]
 8006284:	4499      	add	r9, r3
 8006286:	e7d3      	b.n	8006230 <__cvt+0x68>
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	9107      	str	r1, [sp, #28]
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e7d9      	b.n	8006244 <__cvt+0x7c>

08006290 <__exponent>:
 8006290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	bfb6      	itet	lt
 8006296:	232d      	movlt	r3, #45	@ 0x2d
 8006298:	232b      	movge	r3, #43	@ 0x2b
 800629a:	4249      	neglt	r1, r1
 800629c:	2909      	cmp	r1, #9
 800629e:	7002      	strb	r2, [r0, #0]
 80062a0:	7043      	strb	r3, [r0, #1]
 80062a2:	dd29      	ble.n	80062f8 <__exponent+0x68>
 80062a4:	f10d 0307 	add.w	r3, sp, #7
 80062a8:	461d      	mov	r5, r3
 80062aa:	270a      	movs	r7, #10
 80062ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80062b0:	461a      	mov	r2, r3
 80062b2:	fb07 1416 	mls	r4, r7, r6, r1
 80062b6:	3430      	adds	r4, #48	@ 0x30
 80062b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062bc:	460c      	mov	r4, r1
 80062be:	2c63      	cmp	r4, #99	@ 0x63
 80062c0:	4631      	mov	r1, r6
 80062c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062c6:	dcf1      	bgt.n	80062ac <__exponent+0x1c>
 80062c8:	3130      	adds	r1, #48	@ 0x30
 80062ca:	1e94      	subs	r4, r2, #2
 80062cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062d0:	4623      	mov	r3, r4
 80062d2:	1c41      	adds	r1, r0, #1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	d30a      	bcc.n	80062ee <__exponent+0x5e>
 80062d8:	f10d 0309 	add.w	r3, sp, #9
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	42ac      	cmp	r4, r5
 80062e0:	bf88      	it	hi
 80062e2:	2300      	movhi	r3, #0
 80062e4:	3302      	adds	r3, #2
 80062e6:	4403      	add	r3, r0
 80062e8:	1a18      	subs	r0, r3, r0
 80062ea:	b003      	add	sp, #12
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062f6:	e7ed      	b.n	80062d4 <__exponent+0x44>
 80062f8:	2330      	movs	r3, #48	@ 0x30
 80062fa:	3130      	adds	r1, #48	@ 0x30
 80062fc:	7083      	strb	r3, [r0, #2]
 80062fe:	70c1      	strb	r1, [r0, #3]
 8006300:	1d03      	adds	r3, r0, #4
 8006302:	e7f1      	b.n	80062e8 <__exponent+0x58>

08006304 <_printf_float>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	b091      	sub	sp, #68	@ 0x44
 800630a:	460c      	mov	r4, r1
 800630c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006310:	4616      	mov	r6, r2
 8006312:	461f      	mov	r7, r3
 8006314:	4605      	mov	r5, r0
 8006316:	f000 fd19 	bl	8006d4c <_localeconv_r>
 800631a:	6803      	ldr	r3, [r0, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	9308      	str	r3, [sp, #32]
 8006320:	f7f9 ff16 	bl	8000150 <strlen>
 8006324:	2300      	movs	r3, #0
 8006326:	930e      	str	r3, [sp, #56]	@ 0x38
 8006328:	f8d8 3000 	ldr.w	r3, [r8]
 800632c:	9009      	str	r0, [sp, #36]	@ 0x24
 800632e:	3307      	adds	r3, #7
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	f103 0208 	add.w	r2, r3, #8
 8006338:	f894 a018 	ldrb.w	sl, [r4, #24]
 800633c:	f8d4 b000 	ldr.w	fp, [r4]
 8006340:	f8c8 2000 	str.w	r2, [r8]
 8006344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006348:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800634c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800634e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800635a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800635e:	4b9c      	ldr	r3, [pc, #624]	@ (80065d0 <_printf_float+0x2cc>)
 8006360:	f7fa fb54 	bl	8000a0c <__aeabi_dcmpun>
 8006364:	bb70      	cbnz	r0, 80063c4 <_printf_float+0xc0>
 8006366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800636a:	f04f 32ff 	mov.w	r2, #4294967295
 800636e:	4b98      	ldr	r3, [pc, #608]	@ (80065d0 <_printf_float+0x2cc>)
 8006370:	f7fa fb2e 	bl	80009d0 <__aeabi_dcmple>
 8006374:	bb30      	cbnz	r0, 80063c4 <_printf_float+0xc0>
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7fa fb1d 	bl	80009bc <__aeabi_dcmplt>
 8006382:	b110      	cbz	r0, 800638a <_printf_float+0x86>
 8006384:	232d      	movs	r3, #45	@ 0x2d
 8006386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800638a:	4a92      	ldr	r2, [pc, #584]	@ (80065d4 <_printf_float+0x2d0>)
 800638c:	4b92      	ldr	r3, [pc, #584]	@ (80065d8 <_printf_float+0x2d4>)
 800638e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006392:	bf94      	ite	ls
 8006394:	4690      	movls	r8, r2
 8006396:	4698      	movhi	r8, r3
 8006398:	2303      	movs	r3, #3
 800639a:	f04f 0900 	mov.w	r9, #0
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	f02b 0304 	bic.w	r3, fp, #4
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	4633      	mov	r3, r6
 80063a8:	4621      	mov	r1, r4
 80063aa:	4628      	mov	r0, r5
 80063ac:	9700      	str	r7, [sp, #0]
 80063ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80063b0:	f000 f9d4 	bl	800675c <_printf_common>
 80063b4:	3001      	adds	r0, #1
 80063b6:	f040 8090 	bne.w	80064da <_printf_float+0x1d6>
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	b011      	add	sp, #68	@ 0x44
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7fa fb1e 	bl	8000a0c <__aeabi_dcmpun>
 80063d0:	b148      	cbz	r0, 80063e6 <_printf_float+0xe2>
 80063d2:	464b      	mov	r3, r9
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bfb8      	it	lt
 80063d8:	232d      	movlt	r3, #45	@ 0x2d
 80063da:	4a80      	ldr	r2, [pc, #512]	@ (80065dc <_printf_float+0x2d8>)
 80063dc:	bfb8      	it	lt
 80063de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063e2:	4b7f      	ldr	r3, [pc, #508]	@ (80065e0 <_printf_float+0x2dc>)
 80063e4:	e7d3      	b.n	800638e <_printf_float+0x8a>
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	d13f      	bne.n	8006470 <_printf_float+0x16c>
 80063f0:	2306      	movs	r3, #6
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	9206      	str	r2, [sp, #24]
 80063fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8006400:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006404:	aa0d      	add	r2, sp, #52	@ 0x34
 8006406:	9203      	str	r2, [sp, #12]
 8006408:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800640c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	4642      	mov	r2, r8
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4628      	mov	r0, r5
 8006418:	464b      	mov	r3, r9
 800641a:	910a      	str	r1, [sp, #40]	@ 0x28
 800641c:	f7ff fed4 	bl	80061c8 <__cvt>
 8006420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006422:	4680      	mov	r8, r0
 8006424:	2947      	cmp	r1, #71	@ 0x47
 8006426:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006428:	d128      	bne.n	800647c <_printf_float+0x178>
 800642a:	1cc8      	adds	r0, r1, #3
 800642c:	db02      	blt.n	8006434 <_printf_float+0x130>
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	4299      	cmp	r1, r3
 8006432:	dd40      	ble.n	80064b6 <_printf_float+0x1b2>
 8006434:	f1aa 0a02 	sub.w	sl, sl, #2
 8006438:	fa5f fa8a 	uxtb.w	sl, sl
 800643c:	4652      	mov	r2, sl
 800643e:	3901      	subs	r1, #1
 8006440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006444:	910d      	str	r1, [sp, #52]	@ 0x34
 8006446:	f7ff ff23 	bl	8006290 <__exponent>
 800644a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800644c:	4681      	mov	r9, r0
 800644e:	1813      	adds	r3, r2, r0
 8006450:	2a01      	cmp	r2, #1
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	dc02      	bgt.n	800645c <_printf_float+0x158>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	07d2      	lsls	r2, r2, #31
 800645a:	d501      	bpl.n	8006460 <_printf_float+0x15c>
 800645c:	3301      	adds	r3, #1
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006464:	2b00      	cmp	r3, #0
 8006466:	d09e      	beq.n	80063a6 <_printf_float+0xa2>
 8006468:	232d      	movs	r3, #45	@ 0x2d
 800646a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800646e:	e79a      	b.n	80063a6 <_printf_float+0xa2>
 8006470:	2947      	cmp	r1, #71	@ 0x47
 8006472:	d1bf      	bne.n	80063f4 <_printf_float+0xf0>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1bd      	bne.n	80063f4 <_printf_float+0xf0>
 8006478:	2301      	movs	r3, #1
 800647a:	e7ba      	b.n	80063f2 <_printf_float+0xee>
 800647c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006480:	d9dc      	bls.n	800643c <_printf_float+0x138>
 8006482:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006486:	d118      	bne.n	80064ba <_printf_float+0x1b6>
 8006488:	2900      	cmp	r1, #0
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	dd0b      	ble.n	80064a6 <_printf_float+0x1a2>
 800648e:	6121      	str	r1, [r4, #16]
 8006490:	b913      	cbnz	r3, 8006498 <_printf_float+0x194>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	07d0      	lsls	r0, r2, #31
 8006496:	d502      	bpl.n	800649e <_printf_float+0x19a>
 8006498:	3301      	adds	r3, #1
 800649a:	440b      	add	r3, r1
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064a4:	e7dc      	b.n	8006460 <_printf_float+0x15c>
 80064a6:	b913      	cbnz	r3, 80064ae <_printf_float+0x1aa>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	07d2      	lsls	r2, r2, #31
 80064ac:	d501      	bpl.n	80064b2 <_printf_float+0x1ae>
 80064ae:	3302      	adds	r3, #2
 80064b0:	e7f4      	b.n	800649c <_printf_float+0x198>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e7f2      	b.n	800649c <_printf_float+0x198>
 80064b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064bc:	4299      	cmp	r1, r3
 80064be:	db05      	blt.n	80064cc <_printf_float+0x1c8>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	6121      	str	r1, [r4, #16]
 80064c4:	07d8      	lsls	r0, r3, #31
 80064c6:	d5ea      	bpl.n	800649e <_printf_float+0x19a>
 80064c8:	1c4b      	adds	r3, r1, #1
 80064ca:	e7e7      	b.n	800649c <_printf_float+0x198>
 80064cc:	2900      	cmp	r1, #0
 80064ce:	bfcc      	ite	gt
 80064d0:	2201      	movgt	r2, #1
 80064d2:	f1c1 0202 	rsble	r2, r1, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	e7e0      	b.n	800649c <_printf_float+0x198>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	055a      	lsls	r2, r3, #21
 80064de:	d407      	bmi.n	80064f0 <_printf_float+0x1ec>
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	4642      	mov	r2, r8
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	d12b      	bne.n	8006546 <_printf_float+0x242>
 80064ee:	e764      	b.n	80063ba <_printf_float+0xb6>
 80064f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064f4:	f240 80dc 	bls.w	80066b0 <_printf_float+0x3ac>
 80064f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	f7fa fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8006504:	2800      	cmp	r0, #0
 8006506:	d033      	beq.n	8006570 <_printf_float+0x26c>
 8006508:	2301      	movs	r3, #1
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	4a35      	ldr	r2, [pc, #212]	@ (80065e4 <_printf_float+0x2e0>)
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af51 	beq.w	80063ba <_printf_float+0xb6>
 8006518:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800651c:	4543      	cmp	r3, r8
 800651e:	db02      	blt.n	8006526 <_printf_float+0x222>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	07d8      	lsls	r0, r3, #31
 8006524:	d50f      	bpl.n	8006546 <_printf_float+0x242>
 8006526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f af42 	beq.w	80063ba <_printf_float+0xb6>
 8006536:	f04f 0900 	mov.w	r9, #0
 800653a:	f108 38ff 	add.w	r8, r8, #4294967295
 800653e:	f104 0a1a 	add.w	sl, r4, #26
 8006542:	45c8      	cmp	r8, r9
 8006544:	dc09      	bgt.n	800655a <_printf_float+0x256>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	079b      	lsls	r3, r3, #30
 800654a:	f100 8102 	bmi.w	8006752 <_printf_float+0x44e>
 800654e:	68e0      	ldr	r0, [r4, #12]
 8006550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006552:	4298      	cmp	r0, r3
 8006554:	bfb8      	it	lt
 8006556:	4618      	movlt	r0, r3
 8006558:	e731      	b.n	80063be <_printf_float+0xba>
 800655a:	2301      	movs	r3, #1
 800655c:	4652      	mov	r2, sl
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	f43f af28 	beq.w	80063ba <_printf_float+0xb6>
 800656a:	f109 0901 	add.w	r9, r9, #1
 800656e:	e7e8      	b.n	8006542 <_printf_float+0x23e>
 8006570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006572:	2b00      	cmp	r3, #0
 8006574:	dc38      	bgt.n	80065e8 <_printf_float+0x2e4>
 8006576:	2301      	movs	r3, #1
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	4a19      	ldr	r2, [pc, #100]	@ (80065e4 <_printf_float+0x2e0>)
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	f43f af1a 	beq.w	80063ba <_printf_float+0xb6>
 8006586:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800658a:	ea59 0303 	orrs.w	r3, r9, r3
 800658e:	d102      	bne.n	8006596 <_printf_float+0x292>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07d9      	lsls	r1, r3, #31
 8006594:	d5d7      	bpl.n	8006546 <_printf_float+0x242>
 8006596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f af0a 	beq.w	80063ba <_printf_float+0xb6>
 80065a6:	f04f 0a00 	mov.w	sl, #0
 80065aa:	f104 0b1a 	add.w	fp, r4, #26
 80065ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b0:	425b      	negs	r3, r3
 80065b2:	4553      	cmp	r3, sl
 80065b4:	dc01      	bgt.n	80065ba <_printf_float+0x2b6>
 80065b6:	464b      	mov	r3, r9
 80065b8:	e793      	b.n	80064e2 <_printf_float+0x1de>
 80065ba:	2301      	movs	r3, #1
 80065bc:	465a      	mov	r2, fp
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f aef8 	beq.w	80063ba <_printf_float+0xb6>
 80065ca:	f10a 0a01 	add.w	sl, sl, #1
 80065ce:	e7ee      	b.n	80065ae <_printf_float+0x2aa>
 80065d0:	7fefffff 	.word	0x7fefffff
 80065d4:	0800a3f9 	.word	0x0800a3f9
 80065d8:	0800a3fd 	.word	0x0800a3fd
 80065dc:	0800a401 	.word	0x0800a401
 80065e0:	0800a405 	.word	0x0800a405
 80065e4:	0800a409 	.word	0x0800a409
 80065e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80065ee:	4553      	cmp	r3, sl
 80065f0:	bfa8      	it	ge
 80065f2:	4653      	movge	r3, sl
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	4699      	mov	r9, r3
 80065f8:	dc36      	bgt.n	8006668 <_printf_float+0x364>
 80065fa:	f04f 0b00 	mov.w	fp, #0
 80065fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006602:	f104 021a 	add.w	r2, r4, #26
 8006606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006608:	930a      	str	r3, [sp, #40]	@ 0x28
 800660a:	eba3 0309 	sub.w	r3, r3, r9
 800660e:	455b      	cmp	r3, fp
 8006610:	dc31      	bgt.n	8006676 <_printf_float+0x372>
 8006612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006614:	459a      	cmp	sl, r3
 8006616:	dc3a      	bgt.n	800668e <_printf_float+0x38a>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07da      	lsls	r2, r3, #31
 800661c:	d437      	bmi.n	800668e <_printf_float+0x38a>
 800661e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006620:	ebaa 0903 	sub.w	r9, sl, r3
 8006624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006626:	ebaa 0303 	sub.w	r3, sl, r3
 800662a:	4599      	cmp	r9, r3
 800662c:	bfa8      	it	ge
 800662e:	4699      	movge	r9, r3
 8006630:	f1b9 0f00 	cmp.w	r9, #0
 8006634:	dc33      	bgt.n	800669e <_printf_float+0x39a>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800663e:	f104 0b1a 	add.w	fp, r4, #26
 8006642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006644:	ebaa 0303 	sub.w	r3, sl, r3
 8006648:	eba3 0309 	sub.w	r3, r3, r9
 800664c:	4543      	cmp	r3, r8
 800664e:	f77f af7a 	ble.w	8006546 <_printf_float+0x242>
 8006652:	2301      	movs	r3, #1
 8006654:	465a      	mov	r2, fp
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f aeac 	beq.w	80063ba <_printf_float+0xb6>
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	e7ec      	b.n	8006642 <_printf_float+0x33e>
 8006668:	4642      	mov	r2, r8
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d1c2      	bne.n	80065fa <_printf_float+0x2f6>
 8006674:	e6a1      	b.n	80063ba <_printf_float+0xb6>
 8006676:	2301      	movs	r3, #1
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	920a      	str	r2, [sp, #40]	@ 0x28
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f ae9a 	beq.w	80063ba <_printf_float+0xb6>
 8006686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006688:	f10b 0b01 	add.w	fp, fp, #1
 800668c:	e7bb      	b.n	8006606 <_printf_float+0x302>
 800668e:	4631      	mov	r1, r6
 8006690:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d1c0      	bne.n	800661e <_printf_float+0x31a>
 800669c:	e68d      	b.n	80063ba <_printf_float+0xb6>
 800669e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066a0:	464b      	mov	r3, r9
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	4442      	add	r2, r8
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	d1c3      	bne.n	8006636 <_printf_float+0x332>
 80066ae:	e684      	b.n	80063ba <_printf_float+0xb6>
 80066b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066b4:	f1ba 0f01 	cmp.w	sl, #1
 80066b8:	dc01      	bgt.n	80066be <_printf_float+0x3ba>
 80066ba:	07db      	lsls	r3, r3, #31
 80066bc:	d536      	bpl.n	800672c <_printf_float+0x428>
 80066be:	2301      	movs	r3, #1
 80066c0:	4642      	mov	r2, r8
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f ae76 	beq.w	80063ba <_printf_float+0xb6>
 80066ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f ae6e 	beq.w	80063ba <_printf_float+0xb6>
 80066de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ea:	f7fa f95d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ee:	b9c0      	cbnz	r0, 8006722 <_printf_float+0x41e>
 80066f0:	4653      	mov	r3, sl
 80066f2:	f108 0201 	add.w	r2, r8, #1
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	d10c      	bne.n	800671a <_printf_float+0x416>
 8006700:	e65b      	b.n	80063ba <_printf_float+0xb6>
 8006702:	2301      	movs	r3, #1
 8006704:	465a      	mov	r2, fp
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae54 	beq.w	80063ba <_printf_float+0xb6>
 8006712:	f108 0801 	add.w	r8, r8, #1
 8006716:	45d0      	cmp	r8, sl
 8006718:	dbf3      	blt.n	8006702 <_printf_float+0x3fe>
 800671a:	464b      	mov	r3, r9
 800671c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006720:	e6e0      	b.n	80064e4 <_printf_float+0x1e0>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	f104 0b1a 	add.w	fp, r4, #26
 800672a:	e7f4      	b.n	8006716 <_printf_float+0x412>
 800672c:	2301      	movs	r3, #1
 800672e:	4642      	mov	r2, r8
 8006730:	e7e1      	b.n	80066f6 <_printf_float+0x3f2>
 8006732:	2301      	movs	r3, #1
 8006734:	464a      	mov	r2, r9
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae3c 	beq.w	80063ba <_printf_float+0xb6>
 8006742:	f108 0801 	add.w	r8, r8, #1
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800674a:	1a5b      	subs	r3, r3, r1
 800674c:	4543      	cmp	r3, r8
 800674e:	dcf0      	bgt.n	8006732 <_printf_float+0x42e>
 8006750:	e6fd      	b.n	800654e <_printf_float+0x24a>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	f104 0919 	add.w	r9, r4, #25
 800675a:	e7f4      	b.n	8006746 <_printf_float+0x442>

0800675c <_printf_common>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	4616      	mov	r6, r2
 8006762:	4698      	mov	r8, r3
 8006764:	688a      	ldr	r2, [r1, #8]
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4607      	mov	r7, r0
 800676a:	4293      	cmp	r3, r2
 800676c:	bfb8      	it	lt
 800676e:	4613      	movlt	r3, r2
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006776:	460c      	mov	r4, r1
 8006778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800677c:	b10a      	cbz	r2, 8006782 <_printf_common+0x26>
 800677e:	3301      	adds	r3, #1
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	0699      	lsls	r1, r3, #26
 8006786:	bf42      	ittt	mi
 8006788:	6833      	ldrmi	r3, [r6, #0]
 800678a:	3302      	addmi	r3, #2
 800678c:	6033      	strmi	r3, [r6, #0]
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	f015 0506 	ands.w	r5, r5, #6
 8006794:	d106      	bne.n	80067a4 <_printf_common+0x48>
 8006796:	f104 0a19 	add.w	sl, r4, #25
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	6832      	ldr	r2, [r6, #0]
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dc2b      	bgt.n	80067fc <_printf_common+0xa0>
 80067a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	3b00      	subs	r3, #0
 80067ac:	bf18      	it	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d430      	bmi.n	8006816 <_printf_common+0xba>
 80067b4:	4641      	mov	r1, r8
 80067b6:	4638      	mov	r0, r7
 80067b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067bc:	47c8      	blx	r9
 80067be:	3001      	adds	r0, #1
 80067c0:	d023      	beq.n	800680a <_printf_common+0xae>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	6922      	ldr	r2, [r4, #16]
 80067c6:	f003 0306 	and.w	r3, r3, #6
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	bf14      	ite	ne
 80067ce:	2500      	movne	r5, #0
 80067d0:	6833      	ldreq	r3, [r6, #0]
 80067d2:	f04f 0600 	mov.w	r6, #0
 80067d6:	bf08      	it	eq
 80067d8:	68e5      	ldreq	r5, [r4, #12]
 80067da:	f104 041a 	add.w	r4, r4, #26
 80067de:	bf08      	it	eq
 80067e0:	1aed      	subeq	r5, r5, r3
 80067e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067e6:	bf08      	it	eq
 80067e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ec:	4293      	cmp	r3, r2
 80067ee:	bfc4      	itt	gt
 80067f0:	1a9b      	subgt	r3, r3, r2
 80067f2:	18ed      	addgt	r5, r5, r3
 80067f4:	42b5      	cmp	r5, r6
 80067f6:	d11a      	bne.n	800682e <_printf_common+0xd2>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e008      	b.n	800680e <_printf_common+0xb2>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4652      	mov	r2, sl
 8006800:	4641      	mov	r1, r8
 8006802:	4638      	mov	r0, r7
 8006804:	47c8      	blx	r9
 8006806:	3001      	adds	r0, #1
 8006808:	d103      	bne.n	8006812 <_printf_common+0xb6>
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006812:	3501      	adds	r5, #1
 8006814:	e7c1      	b.n	800679a <_printf_common+0x3e>
 8006816:	2030      	movs	r0, #48	@ 0x30
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006824:	4422      	add	r2, r4
 8006826:	3302      	adds	r3, #2
 8006828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800682c:	e7c2      	b.n	80067b4 <_printf_common+0x58>
 800682e:	2301      	movs	r3, #1
 8006830:	4622      	mov	r2, r4
 8006832:	4641      	mov	r1, r8
 8006834:	4638      	mov	r0, r7
 8006836:	47c8      	blx	r9
 8006838:	3001      	adds	r0, #1
 800683a:	d0e6      	beq.n	800680a <_printf_common+0xae>
 800683c:	3601      	adds	r6, #1
 800683e:	e7d9      	b.n	80067f4 <_printf_common+0x98>

08006840 <_printf_i>:
 8006840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	7e0f      	ldrb	r7, [r1, #24]
 8006846:	4691      	mov	r9, r2
 8006848:	2f78      	cmp	r7, #120	@ 0x78
 800684a:	4680      	mov	r8, r0
 800684c:	460c      	mov	r4, r1
 800684e:	469a      	mov	sl, r3
 8006850:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006856:	d807      	bhi.n	8006868 <_printf_i+0x28>
 8006858:	2f62      	cmp	r7, #98	@ 0x62
 800685a:	d80a      	bhi.n	8006872 <_printf_i+0x32>
 800685c:	2f00      	cmp	r7, #0
 800685e:	f000 80d3 	beq.w	8006a08 <_printf_i+0x1c8>
 8006862:	2f58      	cmp	r7, #88	@ 0x58
 8006864:	f000 80ba 	beq.w	80069dc <_printf_i+0x19c>
 8006868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800686c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006870:	e03a      	b.n	80068e8 <_printf_i+0xa8>
 8006872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006876:	2b15      	cmp	r3, #21
 8006878:	d8f6      	bhi.n	8006868 <_printf_i+0x28>
 800687a:	a101      	add	r1, pc, #4	@ (adr r1, 8006880 <_printf_i+0x40>)
 800687c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068ed 	.word	0x080068ed
 8006888:	08006869 	.word	0x08006869
 800688c:	08006869 	.word	0x08006869
 8006890:	08006869 	.word	0x08006869
 8006894:	08006869 	.word	0x08006869
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006869 	.word	0x08006869
 80068a0:	08006869 	.word	0x08006869
 80068a4:	08006869 	.word	0x08006869
 80068a8:	08006869 	.word	0x08006869
 80068ac:	080069ef 	.word	0x080069ef
 80068b0:	08006917 	.word	0x08006917
 80068b4:	080069a9 	.word	0x080069a9
 80068b8:	08006869 	.word	0x08006869
 80068bc:	08006869 	.word	0x08006869
 80068c0:	08006a11 	.word	0x08006a11
 80068c4:	08006869 	.word	0x08006869
 80068c8:	08006917 	.word	0x08006917
 80068cc:	08006869 	.word	0x08006869
 80068d0:	08006869 	.word	0x08006869
 80068d4:	080069b1 	.word	0x080069b1
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6032      	str	r2, [r6, #0]
 80068e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068e8:	2301      	movs	r3, #1
 80068ea:	e09e      	b.n	8006a2a <_printf_i+0x1ea>
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	1d19      	adds	r1, r3, #4
 80068f2:	6031      	str	r1, [r6, #0]
 80068f4:	0606      	lsls	r6, r0, #24
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0xbc>
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	e003      	b.n	8006904 <_printf_i+0xc4>
 80068fc:	0645      	lsls	r5, r0, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0xb8>
 8006900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006904:	2d00      	cmp	r5, #0
 8006906:	da03      	bge.n	8006910 <_printf_i+0xd0>
 8006908:	232d      	movs	r3, #45	@ 0x2d
 800690a:	426d      	negs	r5, r5
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006910:	230a      	movs	r3, #10
 8006912:	4859      	ldr	r0, [pc, #356]	@ (8006a78 <_printf_i+0x238>)
 8006914:	e011      	b.n	800693a <_printf_i+0xfa>
 8006916:	6821      	ldr	r1, [r4, #0]
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	0608      	lsls	r0, r1, #24
 800691c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006920:	d402      	bmi.n	8006928 <_printf_i+0xe8>
 8006922:	0649      	lsls	r1, r1, #25
 8006924:	bf48      	it	mi
 8006926:	b2ad      	uxthmi	r5, r5
 8006928:	2f6f      	cmp	r7, #111	@ 0x6f
 800692a:	6033      	str	r3, [r6, #0]
 800692c:	bf14      	ite	ne
 800692e:	230a      	movne	r3, #10
 8006930:	2308      	moveq	r3, #8
 8006932:	4851      	ldr	r0, [pc, #324]	@ (8006a78 <_printf_i+0x238>)
 8006934:	2100      	movs	r1, #0
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800693a:	6866      	ldr	r6, [r4, #4]
 800693c:	2e00      	cmp	r6, #0
 800693e:	bfa8      	it	ge
 8006940:	6821      	ldrge	r1, [r4, #0]
 8006942:	60a6      	str	r6, [r4, #8]
 8006944:	bfa4      	itt	ge
 8006946:	f021 0104 	bicge.w	r1, r1, #4
 800694a:	6021      	strge	r1, [r4, #0]
 800694c:	b90d      	cbnz	r5, 8006952 <_printf_i+0x112>
 800694e:	2e00      	cmp	r6, #0
 8006950:	d04b      	beq.n	80069ea <_printf_i+0x1aa>
 8006952:	4616      	mov	r6, r2
 8006954:	fbb5 f1f3 	udiv	r1, r5, r3
 8006958:	fb03 5711 	mls	r7, r3, r1, r5
 800695c:	5dc7      	ldrb	r7, [r0, r7]
 800695e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006962:	462f      	mov	r7, r5
 8006964:	42bb      	cmp	r3, r7
 8006966:	460d      	mov	r5, r1
 8006968:	d9f4      	bls.n	8006954 <_printf_i+0x114>
 800696a:	2b08      	cmp	r3, #8
 800696c:	d10b      	bne.n	8006986 <_printf_i+0x146>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	07df      	lsls	r7, r3, #31
 8006972:	d508      	bpl.n	8006986 <_printf_i+0x146>
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	6861      	ldr	r1, [r4, #4]
 8006978:	4299      	cmp	r1, r3
 800697a:	bfde      	ittt	le
 800697c:	2330      	movle	r3, #48	@ 0x30
 800697e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006982:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006986:	1b92      	subs	r2, r2, r6
 8006988:	6122      	str	r2, [r4, #16]
 800698a:	464b      	mov	r3, r9
 800698c:	4621      	mov	r1, r4
 800698e:	4640      	mov	r0, r8
 8006990:	f8cd a000 	str.w	sl, [sp]
 8006994:	aa03      	add	r2, sp, #12
 8006996:	f7ff fee1 	bl	800675c <_printf_common>
 800699a:	3001      	adds	r0, #1
 800699c:	d14a      	bne.n	8006a34 <_printf_i+0x1f4>
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	b004      	add	sp, #16
 80069a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	f043 0320 	orr.w	r3, r3, #32
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	2778      	movs	r7, #120	@ 0x78
 80069b2:	4832      	ldr	r0, [pc, #200]	@ (8006a7c <_printf_i+0x23c>)
 80069b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	6831      	ldr	r1, [r6, #0]
 80069bc:	061f      	lsls	r7, r3, #24
 80069be:	f851 5b04 	ldr.w	r5, [r1], #4
 80069c2:	d402      	bmi.n	80069ca <_printf_i+0x18a>
 80069c4:	065f      	lsls	r7, r3, #25
 80069c6:	bf48      	it	mi
 80069c8:	b2ad      	uxthmi	r5, r5
 80069ca:	6031      	str	r1, [r6, #0]
 80069cc:	07d9      	lsls	r1, r3, #31
 80069ce:	bf44      	itt	mi
 80069d0:	f043 0320 	orrmi.w	r3, r3, #32
 80069d4:	6023      	strmi	r3, [r4, #0]
 80069d6:	b11d      	cbz	r5, 80069e0 <_printf_i+0x1a0>
 80069d8:	2310      	movs	r3, #16
 80069da:	e7ab      	b.n	8006934 <_printf_i+0xf4>
 80069dc:	4826      	ldr	r0, [pc, #152]	@ (8006a78 <_printf_i+0x238>)
 80069de:	e7e9      	b.n	80069b4 <_printf_i+0x174>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	f023 0320 	bic.w	r3, r3, #32
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	e7f6      	b.n	80069d8 <_printf_i+0x198>
 80069ea:	4616      	mov	r6, r2
 80069ec:	e7bd      	b.n	800696a <_printf_i+0x12a>
 80069ee:	6833      	ldr	r3, [r6, #0]
 80069f0:	6825      	ldr	r5, [r4, #0]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6961      	ldr	r1, [r4, #20]
 80069f6:	6030      	str	r0, [r6, #0]
 80069f8:	062e      	lsls	r6, r5, #24
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	d501      	bpl.n	8006a02 <_printf_i+0x1c2>
 80069fe:	6019      	str	r1, [r3, #0]
 8006a00:	e002      	b.n	8006a08 <_printf_i+0x1c8>
 8006a02:	0668      	lsls	r0, r5, #25
 8006a04:	d5fb      	bpl.n	80069fe <_printf_i+0x1be>
 8006a06:	8019      	strh	r1, [r3, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4616      	mov	r6, r2
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	e7bc      	b.n	800698a <_printf_i+0x14a>
 8006a10:	6833      	ldr	r3, [r6, #0]
 8006a12:	2100      	movs	r1, #0
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	6032      	str	r2, [r6, #0]
 8006a18:	681e      	ldr	r6, [r3, #0]
 8006a1a:	6862      	ldr	r2, [r4, #4]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 fa0c 	bl	8006e3a <memchr>
 8006a22:	b108      	cbz	r0, 8006a28 <_printf_i+0x1e8>
 8006a24:	1b80      	subs	r0, r0, r6
 8006a26:	6060      	str	r0, [r4, #4]
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a32:	e7aa      	b.n	800698a <_printf_i+0x14a>
 8006a34:	4632      	mov	r2, r6
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	47d0      	blx	sl
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d0ad      	beq.n	800699e <_printf_i+0x15e>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	079b      	lsls	r3, r3, #30
 8006a46:	d413      	bmi.n	8006a70 <_printf_i+0x230>
 8006a48:	68e0      	ldr	r0, [r4, #12]
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	4298      	cmp	r0, r3
 8006a4e:	bfb8      	it	lt
 8006a50:	4618      	movlt	r0, r3
 8006a52:	e7a6      	b.n	80069a2 <_printf_i+0x162>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4632      	mov	r2, r6
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	47d0      	blx	sl
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d09d      	beq.n	800699e <_printf_i+0x15e>
 8006a62:	3501      	adds	r5, #1
 8006a64:	68e3      	ldr	r3, [r4, #12]
 8006a66:	9903      	ldr	r1, [sp, #12]
 8006a68:	1a5b      	subs	r3, r3, r1
 8006a6a:	42ab      	cmp	r3, r5
 8006a6c:	dcf2      	bgt.n	8006a54 <_printf_i+0x214>
 8006a6e:	e7eb      	b.n	8006a48 <_printf_i+0x208>
 8006a70:	2500      	movs	r5, #0
 8006a72:	f104 0619 	add.w	r6, r4, #25
 8006a76:	e7f5      	b.n	8006a64 <_printf_i+0x224>
 8006a78:	0800a40b 	.word	0x0800a40b
 8006a7c:	0800a41c 	.word	0x0800a41c

08006a80 <std>:
 8006a80:	2300      	movs	r3, #0
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	e9c0 3300 	strd	r3, r3, [r0]
 8006a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a8e:	6083      	str	r3, [r0, #8]
 8006a90:	8181      	strh	r1, [r0, #12]
 8006a92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a94:	81c2      	strh	r2, [r0, #14]
 8006a96:	6183      	str	r3, [r0, #24]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	305c      	adds	r0, #92	@ 0x5c
 8006a9e:	f000 f924 	bl	8006cea <memset>
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x58>)
 8006aa4:	6224      	str	r4, [r4, #32]
 8006aa6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006adc <std+0x5c>)
 8006aaa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006aac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <std+0x60>)
 8006aae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <std+0x64>)
 8006ab2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <std+0x68>)
 8006ab6:	429c      	cmp	r4, r3
 8006ab8:	d006      	beq.n	8006ac8 <std+0x48>
 8006aba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006abe:	4294      	cmp	r4, r2
 8006ac0:	d002      	beq.n	8006ac8 <std+0x48>
 8006ac2:	33d0      	adds	r3, #208	@ 0xd0
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	d105      	bne.n	8006ad4 <std+0x54>
 8006ac8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad0:	f000 b9b0 	b.w	8006e34 <__retarget_lock_init_recursive>
 8006ad4:	bd10      	pop	{r4, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08006c45 	.word	0x08006c45
 8006adc:	08006c67 	.word	0x08006c67
 8006ae0:	08006c9f 	.word	0x08006c9f
 8006ae4:	08006cc3 	.word	0x08006cc3
 8006ae8:	200008d4 	.word	0x200008d4

08006aec <stdio_exit_handler>:
 8006aec:	4a02      	ldr	r2, [pc, #8]	@ (8006af8 <stdio_exit_handler+0xc>)
 8006aee:	4903      	ldr	r1, [pc, #12]	@ (8006afc <stdio_exit_handler+0x10>)
 8006af0:	4803      	ldr	r0, [pc, #12]	@ (8006b00 <stdio_exit_handler+0x14>)
 8006af2:	f000 b869 	b.w	8006bc8 <_fwalk_sglue>
 8006af6:	bf00      	nop
 8006af8:	2000002c 	.word	0x2000002c
 8006afc:	080090c9 	.word	0x080090c9
 8006b00:	200001a8 	.word	0x200001a8

08006b04 <cleanup_stdio>:
 8006b04:	6841      	ldr	r1, [r0, #4]
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <cleanup_stdio+0x34>)
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	d001      	beq.n	8006b14 <cleanup_stdio+0x10>
 8006b10:	f002 fada 	bl	80090c8 <_fflush_r>
 8006b14:	68a1      	ldr	r1, [r4, #8]
 8006b16:	4b09      	ldr	r3, [pc, #36]	@ (8006b3c <cleanup_stdio+0x38>)
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	d002      	beq.n	8006b22 <cleanup_stdio+0x1e>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f002 fad3 	bl	80090c8 <_fflush_r>
 8006b22:	68e1      	ldr	r1, [r4, #12]
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <cleanup_stdio+0x3c>)
 8006b26:	4299      	cmp	r1, r3
 8006b28:	d004      	beq.n	8006b34 <cleanup_stdio+0x30>
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b30:	f002 baca 	b.w	80090c8 <_fflush_r>
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	200008d4 	.word	0x200008d4
 8006b3c:	2000093c 	.word	0x2000093c
 8006b40:	200009a4 	.word	0x200009a4

08006b44 <global_stdio_init.part.0>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <global_stdio_init.part.0+0x30>)
 8006b48:	4c0b      	ldr	r4, [pc, #44]	@ (8006b78 <global_stdio_init.part.0+0x34>)
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b7c <global_stdio_init.part.0+0x38>)
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	2104      	movs	r1, #4
 8006b52:	2200      	movs	r2, #0
 8006b54:	f7ff ff94 	bl	8006a80 <std>
 8006b58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2109      	movs	r1, #9
 8006b60:	f7ff ff8e 	bl	8006a80 <std>
 8006b64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b68:	2202      	movs	r2, #2
 8006b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6e:	2112      	movs	r1, #18
 8006b70:	f7ff bf86 	b.w	8006a80 <std>
 8006b74:	20000a0c 	.word	0x20000a0c
 8006b78:	200008d4 	.word	0x200008d4
 8006b7c:	08006aed 	.word	0x08006aed

08006b80 <__sfp_lock_acquire>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__sfp_lock_acquire+0x8>)
 8006b82:	f000 b958 	b.w	8006e36 <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000a15 	.word	0x20000a15

08006b8c <__sfp_lock_release>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__sfp_lock_release+0x8>)
 8006b8e:	f000 b953 	b.w	8006e38 <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20000a15 	.word	0x20000a15

08006b98 <__sinit>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	f7ff fff0 	bl	8006b80 <__sfp_lock_acquire>
 8006ba0:	6a23      	ldr	r3, [r4, #32]
 8006ba2:	b11b      	cbz	r3, 8006bac <__sinit+0x14>
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f7ff bff0 	b.w	8006b8c <__sfp_lock_release>
 8006bac:	4b04      	ldr	r3, [pc, #16]	@ (8006bc0 <__sinit+0x28>)
 8006bae:	6223      	str	r3, [r4, #32]
 8006bb0:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <__sinit+0x2c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f5      	bne.n	8006ba4 <__sinit+0xc>
 8006bb8:	f7ff ffc4 	bl	8006b44 <global_stdio_init.part.0>
 8006bbc:	e7f2      	b.n	8006ba4 <__sinit+0xc>
 8006bbe:	bf00      	nop
 8006bc0:	08006b05 	.word	0x08006b05
 8006bc4:	20000a0c 	.word	0x20000a0c

08006bc8 <_fwalk_sglue>:
 8006bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bcc:	4607      	mov	r7, r0
 8006bce:	4688      	mov	r8, r1
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006bdc:	d505      	bpl.n	8006bea <_fwalk_sglue+0x22>
 8006bde:	6824      	ldr	r4, [r4, #0]
 8006be0:	2c00      	cmp	r4, #0
 8006be2:	d1f7      	bne.n	8006bd4 <_fwalk_sglue+0xc>
 8006be4:	4630      	mov	r0, r6
 8006be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d907      	bls.n	8006c00 <_fwalk_sglue+0x38>
 8006bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	d003      	beq.n	8006c00 <_fwalk_sglue+0x38>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	47c0      	blx	r8
 8006bfe:	4306      	orrs	r6, r0
 8006c00:	3568      	adds	r5, #104	@ 0x68
 8006c02:	e7e9      	b.n	8006bd8 <_fwalk_sglue+0x10>

08006c04 <siprintf>:
 8006c04:	b40e      	push	{r1, r2, r3}
 8006c06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c0a:	b500      	push	{lr}
 8006c0c:	b09c      	sub	sp, #112	@ 0x70
 8006c0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c10:	9002      	str	r0, [sp, #8]
 8006c12:	9006      	str	r0, [sp, #24]
 8006c14:	9107      	str	r1, [sp, #28]
 8006c16:	9104      	str	r1, [sp, #16]
 8006c18:	4808      	ldr	r0, [pc, #32]	@ (8006c3c <siprintf+0x38>)
 8006c1a:	4909      	ldr	r1, [pc, #36]	@ (8006c40 <siprintf+0x3c>)
 8006c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c20:	9105      	str	r1, [sp, #20]
 8006c22:	6800      	ldr	r0, [r0, #0]
 8006c24:	a902      	add	r1, sp, #8
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	f002 f8d2 	bl	8008dd0 <_svfiprintf_r>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	9b02      	ldr	r3, [sp, #8]
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	b01c      	add	sp, #112	@ 0x70
 8006c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c38:	b003      	add	sp, #12
 8006c3a:	4770      	bx	lr
 8006c3c:	200001a4 	.word	0x200001a4
 8006c40:	ffff0208 	.word	0xffff0208

08006c44 <__sread>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4c:	f000 f8a4 	bl	8006d98 <_read_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	bfab      	itete	ge
 8006c54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c56:	89a3      	ldrhlt	r3, [r4, #12]
 8006c58:	181b      	addge	r3, r3, r0
 8006c5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c5e:	bfac      	ite	ge
 8006c60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c62:	81a3      	strhlt	r3, [r4, #12]
 8006c64:	bd10      	pop	{r4, pc}

08006c66 <__swrite>:
 8006c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	461f      	mov	r7, r3
 8006c6c:	898b      	ldrh	r3, [r1, #12]
 8006c6e:	4605      	mov	r5, r0
 8006c70:	05db      	lsls	r3, r3, #23
 8006c72:	460c      	mov	r4, r1
 8006c74:	4616      	mov	r6, r2
 8006c76:	d505      	bpl.n	8006c84 <__swrite+0x1e>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c80:	f000 f878 	bl	8006d74 <_lseek_r>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	4632      	mov	r2, r6
 8006c88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	4628      	mov	r0, r5
 8006c90:	463b      	mov	r3, r7
 8006c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9a:	f000 b88f 	b.w	8006dbc <_write_r>

08006c9e <__sseek>:
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca6:	f000 f865 	bl	8006d74 <_lseek_r>
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	bf15      	itete	ne
 8006cb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cba:	81a3      	strheq	r3, [r4, #12]
 8006cbc:	bf18      	it	ne
 8006cbe:	81a3      	strhne	r3, [r4, #12]
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <__sclose>:
 8006cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc6:	f000 b845 	b.w	8006d54 <_close_r>

08006cca <memcmp>:
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	3901      	subs	r1, #1
 8006cce:	4402      	add	r2, r0
 8006cd0:	4290      	cmp	r0, r2
 8006cd2:	d101      	bne.n	8006cd8 <memcmp+0xe>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e005      	b.n	8006ce4 <memcmp+0x1a>
 8006cd8:	7803      	ldrb	r3, [r0, #0]
 8006cda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	d001      	beq.n	8006ce6 <memcmp+0x1c>
 8006ce2:	1b18      	subs	r0, r3, r4
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	e7f2      	b.n	8006cd0 <memcmp+0x6>

08006cea <memset>:
 8006cea:	4603      	mov	r3, r0
 8006cec:	4402      	add	r2, r0
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d100      	bne.n	8006cf4 <memset+0xa>
 8006cf2:	4770      	bx	lr
 8006cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf8:	e7f9      	b.n	8006cee <memset+0x4>

08006cfa <strncmp>:
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	b16a      	cbz	r2, 8006d1a <strncmp+0x20>
 8006cfe:	3901      	subs	r1, #1
 8006d00:	1884      	adds	r4, r0, r2
 8006d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d103      	bne.n	8006d16 <strncmp+0x1c>
 8006d0e:	42a0      	cmp	r0, r4
 8006d10:	d001      	beq.n	8006d16 <strncmp+0x1c>
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d1f5      	bne.n	8006d02 <strncmp+0x8>
 8006d16:	1ad0      	subs	r0, r2, r3
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	e7fc      	b.n	8006d18 <strncmp+0x1e>

08006d1e <strstr>:
 8006d1e:	780a      	ldrb	r2, [r1, #0]
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	b96a      	cbnz	r2, 8006d40 <strstr+0x22>
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d109      	bne.n	8006d3e <strstr+0x20>
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f6      	beq.n	8006d24 <strstr+0x6>
 8006d36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	d0f7      	beq.n	8006d2e <strstr+0x10>
 8006d3e:	3001      	adds	r0, #1
 8006d40:	7803      	ldrb	r3, [r0, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1ef      	bne.n	8006d26 <strstr+0x8>
 8006d46:	4618      	mov	r0, r3
 8006d48:	e7ec      	b.n	8006d24 <strstr+0x6>
	...

08006d4c <_localeconv_r>:
 8006d4c:	4800      	ldr	r0, [pc, #0]	@ (8006d50 <_localeconv_r+0x4>)
 8006d4e:	4770      	bx	lr
 8006d50:	20000128 	.word	0x20000128

08006d54 <_close_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	2300      	movs	r3, #0
 8006d58:	4d05      	ldr	r5, [pc, #20]	@ (8006d70 <_close_r+0x1c>)
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fb f9b7 	bl	80020d2 <_close>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_close_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_close_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000a10 	.word	0x20000a10

08006d74 <_lseek_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4d05      	ldr	r5, [pc, #20]	@ (8006d94 <_lseek_r+0x20>)
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fb f9c9 	bl	800211a <_lseek>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_lseek_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_lseek_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000a10 	.word	0x20000a10

08006d98 <_read_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	2200      	movs	r2, #0
 8006da2:	4d05      	ldr	r5, [pc, #20]	@ (8006db8 <_read_r+0x20>)
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fb f95a 	bl	8002060 <_read>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_read_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_read_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	20000a10 	.word	0x20000a10

08006dbc <_write_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4d05      	ldr	r5, [pc, #20]	@ (8006ddc <_write_r+0x20>)
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7fb f965 	bl	800209a <_write>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_write_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_write_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20000a10 	.word	0x20000a10

08006de0 <__errno>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	@ (8006de8 <__errno+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	200001a4 	.word	0x200001a4

08006dec <__libc_init_array>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	2600      	movs	r6, #0
 8006df0:	4d0c      	ldr	r5, [pc, #48]	@ (8006e24 <__libc_init_array+0x38>)
 8006df2:	4c0d      	ldr	r4, [pc, #52]	@ (8006e28 <__libc_init_array+0x3c>)
 8006df4:	1b64      	subs	r4, r4, r5
 8006df6:	10a4      	asrs	r4, r4, #2
 8006df8:	42a6      	cmp	r6, r4
 8006dfa:	d109      	bne.n	8006e10 <__libc_init_array+0x24>
 8006dfc:	f002 fcd2 	bl	80097a4 <_init>
 8006e00:	2600      	movs	r6, #0
 8006e02:	4d0a      	ldr	r5, [pc, #40]	@ (8006e2c <__libc_init_array+0x40>)
 8006e04:	4c0a      	ldr	r4, [pc, #40]	@ (8006e30 <__libc_init_array+0x44>)
 8006e06:	1b64      	subs	r4, r4, r5
 8006e08:	10a4      	asrs	r4, r4, #2
 8006e0a:	42a6      	cmp	r6, r4
 8006e0c:	d105      	bne.n	8006e1a <__libc_init_array+0x2e>
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e14:	4798      	blx	r3
 8006e16:	3601      	adds	r6, #1
 8006e18:	e7ee      	b.n	8006df8 <__libc_init_array+0xc>
 8006e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1e:	4798      	blx	r3
 8006e20:	3601      	adds	r6, #1
 8006e22:	e7f2      	b.n	8006e0a <__libc_init_array+0x1e>
 8006e24:	0800a6d0 	.word	0x0800a6d0
 8006e28:	0800a6d0 	.word	0x0800a6d0
 8006e2c:	0800a6d0 	.word	0x0800a6d0
 8006e30:	0800a6d4 	.word	0x0800a6d4

08006e34 <__retarget_lock_init_recursive>:
 8006e34:	4770      	bx	lr

08006e36 <__retarget_lock_acquire_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_release_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <memchr>:
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	b2c9      	uxtb	r1, r1
 8006e40:	4402      	add	r2, r0
 8006e42:	4293      	cmp	r3, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	d101      	bne.n	8006e4c <memchr+0x12>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	e003      	b.n	8006e54 <memchr+0x1a>
 8006e4c:	7804      	ldrb	r4, [r0, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	428c      	cmp	r4, r1
 8006e52:	d1f6      	bne.n	8006e42 <memchr+0x8>
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <memcpy>:
 8006e56:	440a      	add	r2, r1
 8006e58:	4291      	cmp	r1, r2
 8006e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e5e:	d100      	bne.n	8006e62 <memcpy+0xc>
 8006e60:	4770      	bx	lr
 8006e62:	b510      	push	{r4, lr}
 8006e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e68:	4291      	cmp	r1, r2
 8006e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6e:	d1f9      	bne.n	8006e64 <memcpy+0xe>
 8006e70:	bd10      	pop	{r4, pc}
	...

08006e74 <nan>:
 8006e74:	2000      	movs	r0, #0
 8006e76:	4901      	ldr	r1, [pc, #4]	@ (8006e7c <nan+0x8>)
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	7ff80000 	.word	0x7ff80000

08006e80 <quorem>:
 8006e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	6903      	ldr	r3, [r0, #16]
 8006e86:	690c      	ldr	r4, [r1, #16]
 8006e88:	4607      	mov	r7, r0
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	db7e      	blt.n	8006f8c <quorem+0x10c>
 8006e8e:	3c01      	subs	r4, #1
 8006e90:	00a3      	lsls	r3, r4, #2
 8006e92:	f100 0514 	add.w	r5, r0, #20
 8006e96:	f101 0814 	add.w	r8, r1, #20
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	429a      	cmp	r2, r3
 8006eae:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb6:	d32e      	bcc.n	8006f16 <quorem+0x96>
 8006eb8:	f04f 0a00 	mov.w	sl, #0
 8006ebc:	46c4      	mov	ip, r8
 8006ebe:	46ae      	mov	lr, r5
 8006ec0:	46d3      	mov	fp, sl
 8006ec2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ec6:	b298      	uxth	r0, r3
 8006ec8:	fb06 a000 	mla	r0, r6, r0, sl
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	0c02      	lsrs	r2, r0, #16
 8006ed0:	fb06 2303 	mla	r3, r6, r3, r2
 8006ed4:	f8de 2000 	ldr.w	r2, [lr]
 8006ed8:	b280      	uxth	r0, r0
 8006eda:	b292      	uxth	r2, r2
 8006edc:	1a12      	subs	r2, r2, r0
 8006ede:	445a      	add	r2, fp
 8006ee0:	f8de 0000 	ldr.w	r0, [lr]
 8006ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006eee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ef8:	45e1      	cmp	r9, ip
 8006efa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006efe:	f84e 2b04 	str.w	r2, [lr], #4
 8006f02:	d2de      	bcs.n	8006ec2 <quorem+0x42>
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	58eb      	ldr	r3, [r5, r3]
 8006f08:	b92b      	cbnz	r3, 8006f16 <quorem+0x96>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d32f      	bcc.n	8006f74 <quorem+0xf4>
 8006f14:	613c      	str	r4, [r7, #16]
 8006f16:	4638      	mov	r0, r7
 8006f18:	f001 fd0e 	bl	8008938 <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	db25      	blt.n	8006f6c <quorem+0xec>
 8006f20:	4629      	mov	r1, r5
 8006f22:	2000      	movs	r0, #0
 8006f24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f28:	f8d1 c000 	ldr.w	ip, [r1]
 8006f2c:	fa1f fe82 	uxth.w	lr, r2
 8006f30:	fa1f f38c 	uxth.w	r3, ip
 8006f34:	eba3 030e 	sub.w	r3, r3, lr
 8006f38:	4403      	add	r3, r0
 8006f3a:	0c12      	lsrs	r2, r2, #16
 8006f3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4a:	45c1      	cmp	r9, r8
 8006f4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f50:	f841 3b04 	str.w	r3, [r1], #4
 8006f54:	d2e6      	bcs.n	8006f24 <quorem+0xa4>
 8006f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5e:	b922      	cbnz	r2, 8006f6a <quorem+0xea>
 8006f60:	3b04      	subs	r3, #4
 8006f62:	429d      	cmp	r5, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	d30b      	bcc.n	8006f80 <quorem+0x100>
 8006f68:	613c      	str	r4, [r7, #16]
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	b003      	add	sp, #12
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	3b04      	subs	r3, #4
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	d1cb      	bne.n	8006f14 <quorem+0x94>
 8006f7c:	3c01      	subs	r4, #1
 8006f7e:	e7c6      	b.n	8006f0e <quorem+0x8e>
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	3b04      	subs	r3, #4
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d1ef      	bne.n	8006f68 <quorem+0xe8>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	e7ea      	b.n	8006f62 <quorem+0xe2>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e7ee      	b.n	8006f6e <quorem+0xee>

08006f90 <_dtoa_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	4614      	mov	r4, r2
 8006f96:	461d      	mov	r5, r3
 8006f98:	69c7      	ldr	r7, [r0, #28]
 8006f9a:	b097      	sub	sp, #92	@ 0x5c
 8006f9c:	4683      	mov	fp, r0
 8006f9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006fa2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006fa4:	b97f      	cbnz	r7, 8006fc6 <_dtoa_r+0x36>
 8006fa6:	2010      	movs	r0, #16
 8006fa8:	f001 f93c 	bl	8008224 <malloc>
 8006fac:	4602      	mov	r2, r0
 8006fae:	f8cb 001c 	str.w	r0, [fp, #28]
 8006fb2:	b920      	cbnz	r0, 8006fbe <_dtoa_r+0x2e>
 8006fb4:	21ef      	movs	r1, #239	@ 0xef
 8006fb6:	4ba8      	ldr	r3, [pc, #672]	@ (8007258 <_dtoa_r+0x2c8>)
 8006fb8:	48a8      	ldr	r0, [pc, #672]	@ (800725c <_dtoa_r+0x2cc>)
 8006fba:	f002 f8d7 	bl	800916c <__assert_func>
 8006fbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fc2:	6007      	str	r7, [r0, #0]
 8006fc4:	60c7      	str	r7, [r0, #12]
 8006fc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fca:	6819      	ldr	r1, [r3, #0]
 8006fcc:	b159      	cbz	r1, 8006fe6 <_dtoa_r+0x56>
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4093      	lsls	r3, r2
 8006fd4:	604a      	str	r2, [r1, #4]
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	4658      	mov	r0, fp
 8006fda:	f001 fa2b 	bl	8008434 <_Bfree>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	1e2b      	subs	r3, r5, #0
 8006fe8:	bfaf      	iteee	ge
 8006fea:	2300      	movge	r3, #0
 8006fec:	2201      	movlt	r2, #1
 8006fee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ff2:	9303      	strlt	r3, [sp, #12]
 8006ff4:	bfa8      	it	ge
 8006ff6:	6033      	strge	r3, [r6, #0]
 8006ff8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ffc:	4b98      	ldr	r3, [pc, #608]	@ (8007260 <_dtoa_r+0x2d0>)
 8006ffe:	bfb8      	it	lt
 8007000:	6032      	strlt	r2, [r6, #0]
 8007002:	ea33 0308 	bics.w	r3, r3, r8
 8007006:	d112      	bne.n	800702e <_dtoa_r+0x9e>
 8007008:	f242 730f 	movw	r3, #9999	@ 0x270f
 800700c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007014:	4323      	orrs	r3, r4
 8007016:	f000 8550 	beq.w	8007aba <_dtoa_r+0xb2a>
 800701a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800701c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007264 <_dtoa_r+0x2d4>
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8552 	beq.w	8007aca <_dtoa_r+0xb3a>
 8007026:	f10a 0303 	add.w	r3, sl, #3
 800702a:	f000 bd4c 	b.w	8007ac6 <_dtoa_r+0xb36>
 800702e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007032:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	f7f9 fcb3 	bl	80009a8 <__aeabi_dcmpeq>
 8007042:	4607      	mov	r7, r0
 8007044:	b158      	cbz	r0, 800705e <_dtoa_r+0xce>
 8007046:	2301      	movs	r3, #1
 8007048:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800704e:	b113      	cbz	r3, 8007056 <_dtoa_r+0xc6>
 8007050:	4b85      	ldr	r3, [pc, #532]	@ (8007268 <_dtoa_r+0x2d8>)
 8007052:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800726c <_dtoa_r+0x2dc>
 800705a:	f000 bd36 	b.w	8007aca <_dtoa_r+0xb3a>
 800705e:	ab14      	add	r3, sp, #80	@ 0x50
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	ab15      	add	r3, sp, #84	@ 0x54
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4658      	mov	r0, fp
 8007068:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800706c:	f001 fd7c 	bl	8008b68 <__d2b>
 8007070:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007074:	4681      	mov	r9, r0
 8007076:	2e00      	cmp	r6, #0
 8007078:	d077      	beq.n	800716a <_dtoa_r+0x1da>
 800707a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800707e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007080:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007088:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800708c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007090:	9712      	str	r7, [sp, #72]	@ 0x48
 8007092:	4619      	mov	r1, r3
 8007094:	2200      	movs	r2, #0
 8007096:	4b76      	ldr	r3, [pc, #472]	@ (8007270 <_dtoa_r+0x2e0>)
 8007098:	f7f9 f866 	bl	8000168 <__aeabi_dsub>
 800709c:	a368      	add	r3, pc, #416	@ (adr r3, 8007240 <_dtoa_r+0x2b0>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 fa19 	bl	80004d8 <__aeabi_dmul>
 80070a6:	a368      	add	r3, pc, #416	@ (adr r3, 8007248 <_dtoa_r+0x2b8>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f85e 	bl	800016c <__adddf3>
 80070b0:	4604      	mov	r4, r0
 80070b2:	4630      	mov	r0, r6
 80070b4:	460d      	mov	r5, r1
 80070b6:	f7f9 f9a5 	bl	8000404 <__aeabi_i2d>
 80070ba:	a365      	add	r3, pc, #404	@ (adr r3, 8007250 <_dtoa_r+0x2c0>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f7f9 fa0a 	bl	80004d8 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 f84e 	bl	800016c <__adddf3>
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	f7f9 fcb0 	bl	8000a38 <__aeabi_d2iz>
 80070d8:	2200      	movs	r2, #0
 80070da:	4607      	mov	r7, r0
 80070dc:	2300      	movs	r3, #0
 80070de:	4620      	mov	r0, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	f7f9 fc6b 	bl	80009bc <__aeabi_dcmplt>
 80070e6:	b140      	cbz	r0, 80070fa <_dtoa_r+0x16a>
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7f9 f98b 	bl	8000404 <__aeabi_i2d>
 80070ee:	4622      	mov	r2, r4
 80070f0:	462b      	mov	r3, r5
 80070f2:	f7f9 fc59 	bl	80009a8 <__aeabi_dcmpeq>
 80070f6:	b900      	cbnz	r0, 80070fa <_dtoa_r+0x16a>
 80070f8:	3f01      	subs	r7, #1
 80070fa:	2f16      	cmp	r7, #22
 80070fc:	d853      	bhi.n	80071a6 <_dtoa_r+0x216>
 80070fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007102:	4b5c      	ldr	r3, [pc, #368]	@ (8007274 <_dtoa_r+0x2e4>)
 8007104:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	f7f9 fc56 	bl	80009bc <__aeabi_dcmplt>
 8007110:	2800      	cmp	r0, #0
 8007112:	d04a      	beq.n	80071aa <_dtoa_r+0x21a>
 8007114:	2300      	movs	r3, #0
 8007116:	3f01      	subs	r7, #1
 8007118:	930f      	str	r3, [sp, #60]	@ 0x3c
 800711a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800711c:	1b9b      	subs	r3, r3, r6
 800711e:	1e5a      	subs	r2, r3, #1
 8007120:	bf46      	itte	mi
 8007122:	f1c3 0801 	rsbmi	r8, r3, #1
 8007126:	2300      	movmi	r3, #0
 8007128:	f04f 0800 	movpl.w	r8, #0
 800712c:	9209      	str	r2, [sp, #36]	@ 0x24
 800712e:	bf48      	it	mi
 8007130:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007132:	2f00      	cmp	r7, #0
 8007134:	db3b      	blt.n	80071ae <_dtoa_r+0x21e>
 8007136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007138:	970e      	str	r7, [sp, #56]	@ 0x38
 800713a:	443b      	add	r3, r7
 800713c:	9309      	str	r3, [sp, #36]	@ 0x24
 800713e:	2300      	movs	r3, #0
 8007140:	930a      	str	r3, [sp, #40]	@ 0x28
 8007142:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007144:	2b09      	cmp	r3, #9
 8007146:	d866      	bhi.n	8007216 <_dtoa_r+0x286>
 8007148:	2b05      	cmp	r3, #5
 800714a:	bfc4      	itt	gt
 800714c:	3b04      	subgt	r3, #4
 800714e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007150:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007152:	bfc8      	it	gt
 8007154:	2400      	movgt	r4, #0
 8007156:	f1a3 0302 	sub.w	r3, r3, #2
 800715a:	bfd8      	it	le
 800715c:	2401      	movle	r4, #1
 800715e:	2b03      	cmp	r3, #3
 8007160:	d864      	bhi.n	800722c <_dtoa_r+0x29c>
 8007162:	e8df f003 	tbb	[pc, r3]
 8007166:	382b      	.short	0x382b
 8007168:	5636      	.short	0x5636
 800716a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800716e:	441e      	add	r6, r3
 8007170:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007174:	2b20      	cmp	r3, #32
 8007176:	bfc1      	itttt	gt
 8007178:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800717c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007180:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007184:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007188:	bfd6      	itet	le
 800718a:	f1c3 0320 	rsble	r3, r3, #32
 800718e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007192:	fa04 f003 	lslle.w	r0, r4, r3
 8007196:	f7f9 f925 	bl	80003e4 <__aeabi_ui2d>
 800719a:	2201      	movs	r2, #1
 800719c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071a0:	3e01      	subs	r6, #1
 80071a2:	9212      	str	r2, [sp, #72]	@ 0x48
 80071a4:	e775      	b.n	8007092 <_dtoa_r+0x102>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e7b6      	b.n	8007118 <_dtoa_r+0x188>
 80071aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80071ac:	e7b5      	b.n	800711a <_dtoa_r+0x18a>
 80071ae:	427b      	negs	r3, r7
 80071b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b2:	2300      	movs	r3, #0
 80071b4:	eba8 0807 	sub.w	r8, r8, r7
 80071b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80071ba:	e7c2      	b.n	8007142 <_dtoa_r+0x1b2>
 80071bc:	2300      	movs	r3, #0
 80071be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dc35      	bgt.n	8007232 <_dtoa_r+0x2a2>
 80071c6:	2301      	movs	r3, #1
 80071c8:	461a      	mov	r2, r3
 80071ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80071ce:	9221      	str	r2, [sp, #132]	@ 0x84
 80071d0:	e00b      	b.n	80071ea <_dtoa_r+0x25a>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7f3      	b.n	80071be <_dtoa_r+0x22e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	9308      	str	r3, [sp, #32]
 80071e0:	3301      	adds	r3, #1
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	9307      	str	r3, [sp, #28]
 80071e6:	bfb8      	it	lt
 80071e8:	2301      	movlt	r3, #1
 80071ea:	2100      	movs	r1, #0
 80071ec:	2204      	movs	r2, #4
 80071ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071f2:	f102 0514 	add.w	r5, r2, #20
 80071f6:	429d      	cmp	r5, r3
 80071f8:	d91f      	bls.n	800723a <_dtoa_r+0x2aa>
 80071fa:	6041      	str	r1, [r0, #4]
 80071fc:	4658      	mov	r0, fp
 80071fe:	f001 f8d9 	bl	80083b4 <_Balloc>
 8007202:	4682      	mov	sl, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d139      	bne.n	800727c <_dtoa_r+0x2ec>
 8007208:	4602      	mov	r2, r0
 800720a:	f240 11af 	movw	r1, #431	@ 0x1af
 800720e:	4b1a      	ldr	r3, [pc, #104]	@ (8007278 <_dtoa_r+0x2e8>)
 8007210:	e6d2      	b.n	8006fb8 <_dtoa_r+0x28>
 8007212:	2301      	movs	r3, #1
 8007214:	e7e0      	b.n	80071d8 <_dtoa_r+0x248>
 8007216:	2401      	movs	r4, #1
 8007218:	2300      	movs	r3, #0
 800721a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800721c:	9320      	str	r3, [sp, #128]	@ 0x80
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	2200      	movs	r2, #0
 8007224:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007228:	2312      	movs	r3, #18
 800722a:	e7d0      	b.n	80071ce <_dtoa_r+0x23e>
 800722c:	2301      	movs	r3, #1
 800722e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007230:	e7f5      	b.n	800721e <_dtoa_r+0x28e>
 8007232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007234:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007238:	e7d7      	b.n	80071ea <_dtoa_r+0x25a>
 800723a:	3101      	adds	r1, #1
 800723c:	0052      	lsls	r2, r2, #1
 800723e:	e7d8      	b.n	80071f2 <_dtoa_r+0x262>
 8007240:	636f4361 	.word	0x636f4361
 8007244:	3fd287a7 	.word	0x3fd287a7
 8007248:	8b60c8b3 	.word	0x8b60c8b3
 800724c:	3fc68a28 	.word	0x3fc68a28
 8007250:	509f79fb 	.word	0x509f79fb
 8007254:	3fd34413 	.word	0x3fd34413
 8007258:	0800a442 	.word	0x0800a442
 800725c:	0800a459 	.word	0x0800a459
 8007260:	7ff00000 	.word	0x7ff00000
 8007264:	0800a43e 	.word	0x0800a43e
 8007268:	0800a40a 	.word	0x0800a40a
 800726c:	0800a409 	.word	0x0800a409
 8007270:	3ff80000 	.word	0x3ff80000
 8007274:	0800a5b0 	.word	0x0800a5b0
 8007278:	0800a4b1 	.word	0x0800a4b1
 800727c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007280:	6018      	str	r0, [r3, #0]
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	2b0e      	cmp	r3, #14
 8007286:	f200 80a4 	bhi.w	80073d2 <_dtoa_r+0x442>
 800728a:	2c00      	cmp	r4, #0
 800728c:	f000 80a1 	beq.w	80073d2 <_dtoa_r+0x442>
 8007290:	2f00      	cmp	r7, #0
 8007292:	dd33      	ble.n	80072fc <_dtoa_r+0x36c>
 8007294:	4b86      	ldr	r3, [pc, #536]	@ (80074b0 <_dtoa_r+0x520>)
 8007296:	f007 020f 	and.w	r2, r7, #15
 800729a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729e:	05f8      	lsls	r0, r7, #23
 80072a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072ac:	d516      	bpl.n	80072dc <_dtoa_r+0x34c>
 80072ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072b2:	4b80      	ldr	r3, [pc, #512]	@ (80074b4 <_dtoa_r+0x524>)
 80072b4:	2603      	movs	r6, #3
 80072b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072ba:	f7f9 fa37 	bl	800072c <__aeabi_ddiv>
 80072be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c2:	f004 040f 	and.w	r4, r4, #15
 80072c6:	4d7b      	ldr	r5, [pc, #492]	@ (80074b4 <_dtoa_r+0x524>)
 80072c8:	b954      	cbnz	r4, 80072e0 <_dtoa_r+0x350>
 80072ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d2:	f7f9 fa2b 	bl	800072c <__aeabi_ddiv>
 80072d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072da:	e028      	b.n	800732e <_dtoa_r+0x39e>
 80072dc:	2602      	movs	r6, #2
 80072de:	e7f2      	b.n	80072c6 <_dtoa_r+0x336>
 80072e0:	07e1      	lsls	r1, r4, #31
 80072e2:	d508      	bpl.n	80072f6 <_dtoa_r+0x366>
 80072e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072ec:	f7f9 f8f4 	bl	80004d8 <__aeabi_dmul>
 80072f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072f4:	3601      	adds	r6, #1
 80072f6:	1064      	asrs	r4, r4, #1
 80072f8:	3508      	adds	r5, #8
 80072fa:	e7e5      	b.n	80072c8 <_dtoa_r+0x338>
 80072fc:	f000 80d2 	beq.w	80074a4 <_dtoa_r+0x514>
 8007300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007304:	427c      	negs	r4, r7
 8007306:	4b6a      	ldr	r3, [pc, #424]	@ (80074b0 <_dtoa_r+0x520>)
 8007308:	f004 020f 	and.w	r2, r4, #15
 800730c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	2602      	movs	r6, #2
 800731a:	2300      	movs	r3, #0
 800731c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007320:	4d64      	ldr	r5, [pc, #400]	@ (80074b4 <_dtoa_r+0x524>)
 8007322:	1124      	asrs	r4, r4, #4
 8007324:	2c00      	cmp	r4, #0
 8007326:	f040 80b2 	bne.w	800748e <_dtoa_r+0x4fe>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1d3      	bne.n	80072d6 <_dtoa_r+0x346>
 800732e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80b7 	beq.w	80074a8 <_dtoa_r+0x518>
 800733a:	2200      	movs	r2, #0
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	4b5d      	ldr	r3, [pc, #372]	@ (80074b8 <_dtoa_r+0x528>)
 8007342:	f7f9 fb3b 	bl	80009bc <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f000 80ae 	beq.w	80074a8 <_dtoa_r+0x518>
 800734c:	9b07      	ldr	r3, [sp, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80aa 	beq.w	80074a8 <_dtoa_r+0x518>
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd37      	ble.n	80073ca <_dtoa_r+0x43a>
 800735a:	1e7b      	subs	r3, r7, #1
 800735c:	4620      	mov	r0, r4
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	2200      	movs	r2, #0
 8007362:	4629      	mov	r1, r5
 8007364:	4b55      	ldr	r3, [pc, #340]	@ (80074bc <_dtoa_r+0x52c>)
 8007366:	f7f9 f8b7 	bl	80004d8 <__aeabi_dmul>
 800736a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736e:	9c08      	ldr	r4, [sp, #32]
 8007370:	3601      	adds	r6, #1
 8007372:	4630      	mov	r0, r6
 8007374:	f7f9 f846 	bl	8000404 <__aeabi_i2d>
 8007378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	2200      	movs	r2, #0
 8007382:	4b4f      	ldr	r3, [pc, #316]	@ (80074c0 <_dtoa_r+0x530>)
 8007384:	f7f8 fef2 	bl	800016c <__adddf3>
 8007388:	4605      	mov	r5, r0
 800738a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800738e:	2c00      	cmp	r4, #0
 8007390:	f040 809a 	bne.w	80074c8 <_dtoa_r+0x538>
 8007394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	4b4a      	ldr	r3, [pc, #296]	@ (80074c4 <_dtoa_r+0x534>)
 800739c:	f7f8 fee4 	bl	8000168 <__aeabi_dsub>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4633      	mov	r3, r6
 80073ac:	f7f9 fb24 	bl	80009f8 <__aeabi_dcmpgt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f040 828e 	bne.w	80078d2 <_dtoa_r+0x942>
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	462a      	mov	r2, r5
 80073bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073c0:	f7f9 fafc 	bl	80009bc <__aeabi_dcmplt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f040 8127 	bne.w	8007618 <_dtoa_r+0x688>
 80073ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80073ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f2c0 8163 	blt.w	80076a0 <_dtoa_r+0x710>
 80073da:	2f0e      	cmp	r7, #14
 80073dc:	f300 8160 	bgt.w	80076a0 <_dtoa_r+0x710>
 80073e0:	4b33      	ldr	r3, [pc, #204]	@ (80074b0 <_dtoa_r+0x520>)
 80073e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da03      	bge.n	80073fc <_dtoa_r+0x46c>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f340 8100 	ble.w	80075fc <_dtoa_r+0x66c>
 80073fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007400:	4656      	mov	r6, sl
 8007402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 f98f 	bl	800072c <__aeabi_ddiv>
 800740e:	f7f9 fb13 	bl	8000a38 <__aeabi_d2iz>
 8007412:	4680      	mov	r8, r0
 8007414:	f7f8 fff6 	bl	8000404 <__aeabi_i2d>
 8007418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741c:	f7f9 f85c 	bl	80004d8 <__aeabi_dmul>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f8 fe9e 	bl	8000168 <__aeabi_dsub>
 800742c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007430:	9d07      	ldr	r5, [sp, #28]
 8007432:	f806 4b01 	strb.w	r4, [r6], #1
 8007436:	eba6 040a 	sub.w	r4, r6, sl
 800743a:	42a5      	cmp	r5, r4
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	f040 8116 	bne.w	8007670 <_dtoa_r+0x6e0>
 8007444:	f7f8 fe92 	bl	800016c <__adddf3>
 8007448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	f7f9 fad2 	bl	80009f8 <__aeabi_dcmpgt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 80f8 	bne.w	800764a <_dtoa_r+0x6ba>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f9 faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8007466:	b118      	cbz	r0, 8007470 <_dtoa_r+0x4e0>
 8007468:	f018 0f01 	tst.w	r8, #1
 800746c:	f040 80ed 	bne.w	800764a <_dtoa_r+0x6ba>
 8007470:	4649      	mov	r1, r9
 8007472:	4658      	mov	r0, fp
 8007474:	f000 ffde 	bl	8008434 <_Bfree>
 8007478:	2300      	movs	r3, #0
 800747a:	7033      	strb	r3, [r6, #0]
 800747c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800747e:	3701      	adds	r7, #1
 8007480:	601f      	str	r7, [r3, #0]
 8007482:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8320 	beq.w	8007aca <_dtoa_r+0xb3a>
 800748a:	601e      	str	r6, [r3, #0]
 800748c:	e31d      	b.n	8007aca <_dtoa_r+0xb3a>
 800748e:	07e2      	lsls	r2, r4, #31
 8007490:	d505      	bpl.n	800749e <_dtoa_r+0x50e>
 8007492:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007496:	f7f9 f81f 	bl	80004d8 <__aeabi_dmul>
 800749a:	2301      	movs	r3, #1
 800749c:	3601      	adds	r6, #1
 800749e:	1064      	asrs	r4, r4, #1
 80074a0:	3508      	adds	r5, #8
 80074a2:	e73f      	b.n	8007324 <_dtoa_r+0x394>
 80074a4:	2602      	movs	r6, #2
 80074a6:	e742      	b.n	800732e <_dtoa_r+0x39e>
 80074a8:	9c07      	ldr	r4, [sp, #28]
 80074aa:	9704      	str	r7, [sp, #16]
 80074ac:	e761      	b.n	8007372 <_dtoa_r+0x3e2>
 80074ae:	bf00      	nop
 80074b0:	0800a5b0 	.word	0x0800a5b0
 80074b4:	0800a588 	.word	0x0800a588
 80074b8:	3ff00000 	.word	0x3ff00000
 80074bc:	40240000 	.word	0x40240000
 80074c0:	401c0000 	.word	0x401c0000
 80074c4:	40140000 	.word	0x40140000
 80074c8:	4b70      	ldr	r3, [pc, #448]	@ (800768c <_dtoa_r+0x6fc>)
 80074ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074d4:	4454      	add	r4, sl
 80074d6:	2900      	cmp	r1, #0
 80074d8:	d045      	beq.n	8007566 <_dtoa_r+0x5d6>
 80074da:	2000      	movs	r0, #0
 80074dc:	496c      	ldr	r1, [pc, #432]	@ (8007690 <_dtoa_r+0x700>)
 80074de:	f7f9 f925 	bl	800072c <__aeabi_ddiv>
 80074e2:	4633      	mov	r3, r6
 80074e4:	462a      	mov	r2, r5
 80074e6:	f7f8 fe3f 	bl	8000168 <__aeabi_dsub>
 80074ea:	4656      	mov	r6, sl
 80074ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f4:	f7f9 faa0 	bl	8000a38 <__aeabi_d2iz>
 80074f8:	4605      	mov	r5, r0
 80074fa:	f7f8 ff83 	bl	8000404 <__aeabi_i2d>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007506:	f7f8 fe2f 	bl	8000168 <__aeabi_dsub>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	3530      	adds	r5, #48	@ 0x30
 8007510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007514:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007518:	f806 5b01 	strb.w	r5, [r6], #1
 800751c:	f7f9 fa4e 	bl	80009bc <__aeabi_dcmplt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d163      	bne.n	80075ec <_dtoa_r+0x65c>
 8007524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007528:	2000      	movs	r0, #0
 800752a:	495a      	ldr	r1, [pc, #360]	@ (8007694 <_dtoa_r+0x704>)
 800752c:	f7f8 fe1c 	bl	8000168 <__aeabi_dsub>
 8007530:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007534:	f7f9 fa42 	bl	80009bc <__aeabi_dcmplt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 8087 	bne.w	800764c <_dtoa_r+0x6bc>
 800753e:	42a6      	cmp	r6, r4
 8007540:	f43f af43 	beq.w	80073ca <_dtoa_r+0x43a>
 8007544:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007548:	2200      	movs	r2, #0
 800754a:	4b53      	ldr	r3, [pc, #332]	@ (8007698 <_dtoa_r+0x708>)
 800754c:	f7f8 ffc4 	bl	80004d8 <__aeabi_dmul>
 8007550:	2200      	movs	r2, #0
 8007552:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	4b4f      	ldr	r3, [pc, #316]	@ (8007698 <_dtoa_r+0x708>)
 800755c:	f7f8 ffbc 	bl	80004d8 <__aeabi_dmul>
 8007560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007564:	e7c4      	b.n	80074f0 <_dtoa_r+0x560>
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	f7f8 ffb5 	bl	80004d8 <__aeabi_dmul>
 800756e:	4656      	mov	r6, sl
 8007570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007574:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	f7f9 fa5d 	bl	8000a38 <__aeabi_d2iz>
 800757e:	4605      	mov	r5, r0
 8007580:	f7f8 ff40 	bl	8000404 <__aeabi_i2d>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f8 fdec 	bl	8000168 <__aeabi_dsub>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	3530      	adds	r5, #48	@ 0x30
 8007596:	f806 5b01 	strb.w	r5, [r6], #1
 800759a:	42a6      	cmp	r6, r4
 800759c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	d124      	bne.n	80075f0 <_dtoa_r+0x660>
 80075a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075aa:	4b39      	ldr	r3, [pc, #228]	@ (8007690 <_dtoa_r+0x700>)
 80075ac:	f7f8 fdde 	bl	800016c <__adddf3>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b8:	f7f9 fa1e 	bl	80009f8 <__aeabi_dcmpgt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d145      	bne.n	800764c <_dtoa_r+0x6bc>
 80075c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075c4:	2000      	movs	r0, #0
 80075c6:	4932      	ldr	r1, [pc, #200]	@ (8007690 <_dtoa_r+0x700>)
 80075c8:	f7f8 fdce 	bl	8000168 <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d4:	f7f9 f9f2 	bl	80009bc <__aeabi_dcmplt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f43f aef6 	beq.w	80073ca <_dtoa_r+0x43a>
 80075de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80075e0:	1e73      	subs	r3, r6, #1
 80075e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075e8:	2b30      	cmp	r3, #48	@ 0x30
 80075ea:	d0f8      	beq.n	80075de <_dtoa_r+0x64e>
 80075ec:	9f04      	ldr	r7, [sp, #16]
 80075ee:	e73f      	b.n	8007470 <_dtoa_r+0x4e0>
 80075f0:	4b29      	ldr	r3, [pc, #164]	@ (8007698 <_dtoa_r+0x708>)
 80075f2:	f7f8 ff71 	bl	80004d8 <__aeabi_dmul>
 80075f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fa:	e7bc      	b.n	8007576 <_dtoa_r+0x5e6>
 80075fc:	d10c      	bne.n	8007618 <_dtoa_r+0x688>
 80075fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007602:	2200      	movs	r2, #0
 8007604:	4b25      	ldr	r3, [pc, #148]	@ (800769c <_dtoa_r+0x70c>)
 8007606:	f7f8 ff67 	bl	80004d8 <__aeabi_dmul>
 800760a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800760e:	f7f9 f9e9 	bl	80009e4 <__aeabi_dcmpge>
 8007612:	2800      	cmp	r0, #0
 8007614:	f000 815b 	beq.w	80078ce <_dtoa_r+0x93e>
 8007618:	2400      	movs	r4, #0
 800761a:	4625      	mov	r5, r4
 800761c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800761e:	4656      	mov	r6, sl
 8007620:	43db      	mvns	r3, r3
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	2700      	movs	r7, #0
 8007626:	4621      	mov	r1, r4
 8007628:	4658      	mov	r0, fp
 800762a:	f000 ff03 	bl	8008434 <_Bfree>
 800762e:	2d00      	cmp	r5, #0
 8007630:	d0dc      	beq.n	80075ec <_dtoa_r+0x65c>
 8007632:	b12f      	cbz	r7, 8007640 <_dtoa_r+0x6b0>
 8007634:	42af      	cmp	r7, r5
 8007636:	d003      	beq.n	8007640 <_dtoa_r+0x6b0>
 8007638:	4639      	mov	r1, r7
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fefa 	bl	8008434 <_Bfree>
 8007640:	4629      	mov	r1, r5
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fef6 	bl	8008434 <_Bfree>
 8007648:	e7d0      	b.n	80075ec <_dtoa_r+0x65c>
 800764a:	9704      	str	r7, [sp, #16]
 800764c:	4633      	mov	r3, r6
 800764e:	461e      	mov	r6, r3
 8007650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007654:	2a39      	cmp	r2, #57	@ 0x39
 8007656:	d107      	bne.n	8007668 <_dtoa_r+0x6d8>
 8007658:	459a      	cmp	sl, r3
 800765a:	d1f8      	bne.n	800764e <_dtoa_r+0x6be>
 800765c:	9a04      	ldr	r2, [sp, #16]
 800765e:	3201      	adds	r2, #1
 8007660:	9204      	str	r2, [sp, #16]
 8007662:	2230      	movs	r2, #48	@ 0x30
 8007664:	f88a 2000 	strb.w	r2, [sl]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	3201      	adds	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e7bd      	b.n	80075ec <_dtoa_r+0x65c>
 8007670:	2200      	movs	r2, #0
 8007672:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <_dtoa_r+0x708>)
 8007674:	f7f8 ff30 	bl	80004d8 <__aeabi_dmul>
 8007678:	2200      	movs	r2, #0
 800767a:	2300      	movs	r3, #0
 800767c:	4604      	mov	r4, r0
 800767e:	460d      	mov	r5, r1
 8007680:	f7f9 f992 	bl	80009a8 <__aeabi_dcmpeq>
 8007684:	2800      	cmp	r0, #0
 8007686:	f43f aebc 	beq.w	8007402 <_dtoa_r+0x472>
 800768a:	e6f1      	b.n	8007470 <_dtoa_r+0x4e0>
 800768c:	0800a5b0 	.word	0x0800a5b0
 8007690:	3fe00000 	.word	0x3fe00000
 8007694:	3ff00000 	.word	0x3ff00000
 8007698:	40240000 	.word	0x40240000
 800769c:	40140000 	.word	0x40140000
 80076a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	f000 80db 	beq.w	800785e <_dtoa_r+0x8ce>
 80076a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076aa:	2a01      	cmp	r2, #1
 80076ac:	f300 80bf 	bgt.w	800782e <_dtoa_r+0x89e>
 80076b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	f000 80b7 	beq.w	8007826 <_dtoa_r+0x896>
 80076b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076bc:	4646      	mov	r6, r8
 80076be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076c2:	2101      	movs	r1, #1
 80076c4:	441a      	add	r2, r3
 80076c6:	4658      	mov	r0, fp
 80076c8:	4498      	add	r8, r3
 80076ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80076cc:	f000 ffb0 	bl	8008630 <__i2b>
 80076d0:	4605      	mov	r5, r0
 80076d2:	b15e      	cbz	r6, 80076ec <_dtoa_r+0x75c>
 80076d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dd08      	ble.n	80076ec <_dtoa_r+0x75c>
 80076da:	42b3      	cmp	r3, r6
 80076dc:	bfa8      	it	ge
 80076de:	4633      	movge	r3, r6
 80076e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e2:	eba8 0803 	sub.w	r8, r8, r3
 80076e6:	1af6      	subs	r6, r6, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ee:	b1f3      	cbz	r3, 800772e <_dtoa_r+0x79e>
 80076f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80b7 	beq.w	8007866 <_dtoa_r+0x8d6>
 80076f8:	b18c      	cbz	r4, 800771e <_dtoa_r+0x78e>
 80076fa:	4629      	mov	r1, r5
 80076fc:	4622      	mov	r2, r4
 80076fe:	4658      	mov	r0, fp
 8007700:	f001 f854 	bl	80087ac <__pow5mult>
 8007704:	464a      	mov	r2, r9
 8007706:	4601      	mov	r1, r0
 8007708:	4605      	mov	r5, r0
 800770a:	4658      	mov	r0, fp
 800770c:	f000 ffa6 	bl	800865c <__multiply>
 8007710:	4649      	mov	r1, r9
 8007712:	9004      	str	r0, [sp, #16]
 8007714:	4658      	mov	r0, fp
 8007716:	f000 fe8d 	bl	8008434 <_Bfree>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	4699      	mov	r9, r3
 800771e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007720:	1b1a      	subs	r2, r3, r4
 8007722:	d004      	beq.n	800772e <_dtoa_r+0x79e>
 8007724:	4649      	mov	r1, r9
 8007726:	4658      	mov	r0, fp
 8007728:	f001 f840 	bl	80087ac <__pow5mult>
 800772c:	4681      	mov	r9, r0
 800772e:	2101      	movs	r1, #1
 8007730:	4658      	mov	r0, fp
 8007732:	f000 ff7d 	bl	8008630 <__i2b>
 8007736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007738:	4604      	mov	r4, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 81c9 	beq.w	8007ad2 <_dtoa_r+0xb42>
 8007740:	461a      	mov	r2, r3
 8007742:	4601      	mov	r1, r0
 8007744:	4658      	mov	r0, fp
 8007746:	f001 f831 	bl	80087ac <__pow5mult>
 800774a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800774c:	4604      	mov	r4, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	f300 808f 	bgt.w	8007872 <_dtoa_r+0x8e2>
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 8087 	bne.w	800786a <_dtoa_r+0x8da>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 8083 	bne.w	800786e <_dtoa_r+0x8de>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800776e:	0d1b      	lsrs	r3, r3, #20
 8007770:	051b      	lsls	r3, r3, #20
 8007772:	b12b      	cbz	r3, 8007780 <_dtoa_r+0x7f0>
 8007774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	3301      	adds	r3, #1
 800777c:	9309      	str	r3, [sp, #36]	@ 0x24
 800777e:	2301      	movs	r3, #1
 8007780:	930a      	str	r3, [sp, #40]	@ 0x28
 8007782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 81aa 	beq.w	8007ade <_dtoa_r+0xb4e>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007790:	6918      	ldr	r0, [r3, #16]
 8007792:	f000 ff01 	bl	8008598 <__hi0bits>
 8007796:	f1c0 0020 	rsb	r0, r0, #32
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	4418      	add	r0, r3
 800779e:	f010 001f 	ands.w	r0, r0, #31
 80077a2:	d071      	beq.n	8007888 <_dtoa_r+0x8f8>
 80077a4:	f1c0 0320 	rsb	r3, r0, #32
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	dd65      	ble.n	8007878 <_dtoa_r+0x8e8>
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	f1c0 001c 	rsb	r0, r0, #28
 80077b2:	4403      	add	r3, r0
 80077b4:	4480      	add	r8, r0
 80077b6:	4406      	add	r6, r0
 80077b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	dd05      	ble.n	80077cc <_dtoa_r+0x83c>
 80077c0:	4649      	mov	r1, r9
 80077c2:	4642      	mov	r2, r8
 80077c4:	4658      	mov	r0, fp
 80077c6:	f001 f84b 	bl	8008860 <__lshift>
 80077ca:	4681      	mov	r9, r0
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd05      	ble.n	80077de <_dtoa_r+0x84e>
 80077d2:	4621      	mov	r1, r4
 80077d4:	461a      	mov	r2, r3
 80077d6:	4658      	mov	r0, fp
 80077d8:	f001 f842 	bl	8008860 <__lshift>
 80077dc:	4604      	mov	r4, r0
 80077de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d053      	beq.n	800788c <_dtoa_r+0x8fc>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4648      	mov	r0, r9
 80077e8:	f001 f8a6 	bl	8008938 <__mcmp>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	da4d      	bge.n	800788c <_dtoa_r+0x8fc>
 80077f0:	1e7b      	subs	r3, r7, #1
 80077f2:	4649      	mov	r1, r9
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	220a      	movs	r2, #10
 80077f8:	2300      	movs	r3, #0
 80077fa:	4658      	mov	r0, fp
 80077fc:	f000 fe3c 	bl	8008478 <__multadd>
 8007800:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007802:	4681      	mov	r9, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 816c 	beq.w	8007ae2 <_dtoa_r+0xb52>
 800780a:	2300      	movs	r3, #0
 800780c:	4629      	mov	r1, r5
 800780e:	220a      	movs	r2, #10
 8007810:	4658      	mov	r0, fp
 8007812:	f000 fe31 	bl	8008478 <__multadd>
 8007816:	9b08      	ldr	r3, [sp, #32]
 8007818:	4605      	mov	r5, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	dc61      	bgt.n	80078e2 <_dtoa_r+0x952>
 800781e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007820:	2b02      	cmp	r3, #2
 8007822:	dc3b      	bgt.n	800789c <_dtoa_r+0x90c>
 8007824:	e05d      	b.n	80078e2 <_dtoa_r+0x952>
 8007826:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007828:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800782c:	e746      	b.n	80076bc <_dtoa_r+0x72c>
 800782e:	9b07      	ldr	r3, [sp, #28]
 8007830:	1e5c      	subs	r4, r3, #1
 8007832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007834:	42a3      	cmp	r3, r4
 8007836:	bfbf      	itttt	lt
 8007838:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800783a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800783c:	1ae3      	sublt	r3, r4, r3
 800783e:	18d2      	addlt	r2, r2, r3
 8007840:	bfa8      	it	ge
 8007842:	1b1c      	subge	r4, r3, r4
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	bfbe      	ittt	lt
 8007848:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800784a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800784c:	2400      	movlt	r4, #0
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb5      	itete	lt
 8007852:	eba8 0603 	sublt.w	r6, r8, r3
 8007856:	4646      	movge	r6, r8
 8007858:	2300      	movlt	r3, #0
 800785a:	9b07      	ldrge	r3, [sp, #28]
 800785c:	e730      	b.n	80076c0 <_dtoa_r+0x730>
 800785e:	4646      	mov	r6, r8
 8007860:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007862:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007864:	e735      	b.n	80076d2 <_dtoa_r+0x742>
 8007866:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007868:	e75c      	b.n	8007724 <_dtoa_r+0x794>
 800786a:	2300      	movs	r3, #0
 800786c:	e788      	b.n	8007780 <_dtoa_r+0x7f0>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	e786      	b.n	8007780 <_dtoa_r+0x7f0>
 8007872:	2300      	movs	r3, #0
 8007874:	930a      	str	r3, [sp, #40]	@ 0x28
 8007876:	e788      	b.n	800778a <_dtoa_r+0x7fa>
 8007878:	d09f      	beq.n	80077ba <_dtoa_r+0x82a>
 800787a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800787c:	331c      	adds	r3, #28
 800787e:	441a      	add	r2, r3
 8007880:	4498      	add	r8, r3
 8007882:	441e      	add	r6, r3
 8007884:	9209      	str	r2, [sp, #36]	@ 0x24
 8007886:	e798      	b.n	80077ba <_dtoa_r+0x82a>
 8007888:	4603      	mov	r3, r0
 800788a:	e7f6      	b.n	800787a <_dtoa_r+0x8ea>
 800788c:	9b07      	ldr	r3, [sp, #28]
 800788e:	9704      	str	r7, [sp, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc20      	bgt.n	80078d6 <_dtoa_r+0x946>
 8007894:	9308      	str	r3, [sp, #32]
 8007896:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007898:	2b02      	cmp	r3, #2
 800789a:	dd1e      	ble.n	80078da <_dtoa_r+0x94a>
 800789c:	9b08      	ldr	r3, [sp, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f47f aebc 	bne.w	800761c <_dtoa_r+0x68c>
 80078a4:	4621      	mov	r1, r4
 80078a6:	2205      	movs	r2, #5
 80078a8:	4658      	mov	r0, fp
 80078aa:	f000 fde5 	bl	8008478 <__multadd>
 80078ae:	4601      	mov	r1, r0
 80078b0:	4604      	mov	r4, r0
 80078b2:	4648      	mov	r0, r9
 80078b4:	f001 f840 	bl	8008938 <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f77f aeaf 	ble.w	800761c <_dtoa_r+0x68c>
 80078be:	2331      	movs	r3, #49	@ 0x31
 80078c0:	4656      	mov	r6, sl
 80078c2:	f806 3b01 	strb.w	r3, [r6], #1
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	3301      	adds	r3, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	e6aa      	b.n	8007624 <_dtoa_r+0x694>
 80078ce:	9c07      	ldr	r4, [sp, #28]
 80078d0:	9704      	str	r7, [sp, #16]
 80078d2:	4625      	mov	r5, r4
 80078d4:	e7f3      	b.n	80078be <_dtoa_r+0x92e>
 80078d6:	9b07      	ldr	r3, [sp, #28]
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8104 	beq.w	8007aea <_dtoa_r+0xb5a>
 80078e2:	2e00      	cmp	r6, #0
 80078e4:	dd05      	ble.n	80078f2 <_dtoa_r+0x962>
 80078e6:	4629      	mov	r1, r5
 80078e8:	4632      	mov	r2, r6
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 ffb8 	bl	8008860 <__lshift>
 80078f0:	4605      	mov	r5, r0
 80078f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d05a      	beq.n	80079ae <_dtoa_r+0xa1e>
 80078f8:	4658      	mov	r0, fp
 80078fa:	6869      	ldr	r1, [r5, #4]
 80078fc:	f000 fd5a 	bl	80083b4 <_Balloc>
 8007900:	4606      	mov	r6, r0
 8007902:	b928      	cbnz	r0, 8007910 <_dtoa_r+0x980>
 8007904:	4602      	mov	r2, r0
 8007906:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800790a:	4b83      	ldr	r3, [pc, #524]	@ (8007b18 <_dtoa_r+0xb88>)
 800790c:	f7ff bb54 	b.w	8006fb8 <_dtoa_r+0x28>
 8007910:	692a      	ldr	r2, [r5, #16]
 8007912:	f105 010c 	add.w	r1, r5, #12
 8007916:	3202      	adds	r2, #2
 8007918:	0092      	lsls	r2, r2, #2
 800791a:	300c      	adds	r0, #12
 800791c:	f7ff fa9b 	bl	8006e56 <memcpy>
 8007920:	2201      	movs	r2, #1
 8007922:	4631      	mov	r1, r6
 8007924:	4658      	mov	r0, fp
 8007926:	f000 ff9b 	bl	8008860 <__lshift>
 800792a:	462f      	mov	r7, r5
 800792c:	4605      	mov	r5, r0
 800792e:	f10a 0301 	add.w	r3, sl, #1
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	4453      	add	r3, sl
 8007938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800793a:	9b02      	ldr	r3, [sp, #8]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	930a      	str	r3, [sp, #40]	@ 0x28
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	4621      	mov	r1, r4
 8007946:	3b01      	subs	r3, #1
 8007948:	4648      	mov	r0, r9
 800794a:	9302      	str	r3, [sp, #8]
 800794c:	f7ff fa98 	bl	8006e80 <quorem>
 8007950:	4639      	mov	r1, r7
 8007952:	9008      	str	r0, [sp, #32]
 8007954:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007958:	4648      	mov	r0, r9
 800795a:	f000 ffed 	bl	8008938 <__mcmp>
 800795e:	462a      	mov	r2, r5
 8007960:	9009      	str	r0, [sp, #36]	@ 0x24
 8007962:	4621      	mov	r1, r4
 8007964:	4658      	mov	r0, fp
 8007966:	f001 f803 	bl	8008970 <__mdiff>
 800796a:	68c2      	ldr	r2, [r0, #12]
 800796c:	4606      	mov	r6, r0
 800796e:	bb02      	cbnz	r2, 80079b2 <_dtoa_r+0xa22>
 8007970:	4601      	mov	r1, r0
 8007972:	4648      	mov	r0, r9
 8007974:	f000 ffe0 	bl	8008938 <__mcmp>
 8007978:	4602      	mov	r2, r0
 800797a:	4631      	mov	r1, r6
 800797c:	4658      	mov	r0, fp
 800797e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007980:	f000 fd58 	bl	8008434 <_Bfree>
 8007984:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007986:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007988:	9e07      	ldr	r6, [sp, #28]
 800798a:	ea43 0102 	orr.w	r1, r3, r2
 800798e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007990:	4319      	orrs	r1, r3
 8007992:	d110      	bne.n	80079b6 <_dtoa_r+0xa26>
 8007994:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007998:	d029      	beq.n	80079ee <_dtoa_r+0xa5e>
 800799a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd02      	ble.n	80079a6 <_dtoa_r+0xa16>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	f883 8000 	strb.w	r8, [r3]
 80079ac:	e63b      	b.n	8007626 <_dtoa_r+0x696>
 80079ae:	4628      	mov	r0, r5
 80079b0:	e7bb      	b.n	800792a <_dtoa_r+0x99a>
 80079b2:	2201      	movs	r2, #1
 80079b4:	e7e1      	b.n	800797a <_dtoa_r+0x9ea>
 80079b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db04      	blt.n	80079c6 <_dtoa_r+0xa36>
 80079bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80079be:	430b      	orrs	r3, r1
 80079c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079c2:	430b      	orrs	r3, r1
 80079c4:	d120      	bne.n	8007a08 <_dtoa_r+0xa78>
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	dded      	ble.n	80079a6 <_dtoa_r+0xa16>
 80079ca:	4649      	mov	r1, r9
 80079cc:	2201      	movs	r2, #1
 80079ce:	4658      	mov	r0, fp
 80079d0:	f000 ff46 	bl	8008860 <__lshift>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4681      	mov	r9, r0
 80079d8:	f000 ffae 	bl	8008938 <__mcmp>
 80079dc:	2800      	cmp	r0, #0
 80079de:	dc03      	bgt.n	80079e8 <_dtoa_r+0xa58>
 80079e0:	d1e1      	bne.n	80079a6 <_dtoa_r+0xa16>
 80079e2:	f018 0f01 	tst.w	r8, #1
 80079e6:	d0de      	beq.n	80079a6 <_dtoa_r+0xa16>
 80079e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079ec:	d1d8      	bne.n	80079a0 <_dtoa_r+0xa10>
 80079ee:	2339      	movs	r3, #57	@ 0x39
 80079f0:	9a02      	ldr	r2, [sp, #8]
 80079f2:	7013      	strb	r3, [r2, #0]
 80079f4:	4633      	mov	r3, r6
 80079f6:	461e      	mov	r6, r3
 80079f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	2a39      	cmp	r2, #57	@ 0x39
 8007a00:	d052      	beq.n	8007aa8 <_dtoa_r+0xb18>
 8007a02:	3201      	adds	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e60e      	b.n	8007626 <_dtoa_r+0x696>
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	dd07      	ble.n	8007a1c <_dtoa_r+0xa8c>
 8007a0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a10:	d0ed      	beq.n	80079ee <_dtoa_r+0xa5e>
 8007a12:	9a02      	ldr	r2, [sp, #8]
 8007a14:	f108 0301 	add.w	r3, r8, #1
 8007a18:	7013      	strb	r3, [r2, #0]
 8007a1a:	e604      	b.n	8007626 <_dtoa_r+0x696>
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	9a07      	ldr	r2, [sp, #28]
 8007a20:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d028      	beq.n	8007a7c <_dtoa_r+0xaec>
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	220a      	movs	r2, #10
 8007a30:	4658      	mov	r0, fp
 8007a32:	f000 fd21 	bl	8008478 <__multadd>
 8007a36:	42af      	cmp	r7, r5
 8007a38:	4681      	mov	r9, r0
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	f04f 020a 	mov.w	r2, #10
 8007a42:	4639      	mov	r1, r7
 8007a44:	4658      	mov	r0, fp
 8007a46:	d107      	bne.n	8007a58 <_dtoa_r+0xac8>
 8007a48:	f000 fd16 	bl	8008478 <__multadd>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	4605      	mov	r5, r0
 8007a50:	9b07      	ldr	r3, [sp, #28]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9307      	str	r3, [sp, #28]
 8007a56:	e774      	b.n	8007942 <_dtoa_r+0x9b2>
 8007a58:	f000 fd0e 	bl	8008478 <__multadd>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4607      	mov	r7, r0
 8007a60:	2300      	movs	r3, #0
 8007a62:	220a      	movs	r2, #10
 8007a64:	4658      	mov	r0, fp
 8007a66:	f000 fd07 	bl	8008478 <__multadd>
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	e7f0      	b.n	8007a50 <_dtoa_r+0xac0>
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	2700      	movs	r7, #0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfcc      	ite	gt
 8007a76:	461e      	movgt	r6, r3
 8007a78:	2601      	movle	r6, #1
 8007a7a:	4456      	add	r6, sl
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4658      	mov	r0, fp
 8007a82:	f000 feed 	bl	8008860 <__lshift>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4681      	mov	r9, r0
 8007a8a:	f000 ff55 	bl	8008938 <__mcmp>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	dcb0      	bgt.n	80079f4 <_dtoa_r+0xa64>
 8007a92:	d102      	bne.n	8007a9a <_dtoa_r+0xb0a>
 8007a94:	f018 0f01 	tst.w	r8, #1
 8007a98:	d1ac      	bne.n	80079f4 <_dtoa_r+0xa64>
 8007a9a:	4633      	mov	r3, r6
 8007a9c:	461e      	mov	r6, r3
 8007a9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aa2:	2a30      	cmp	r2, #48	@ 0x30
 8007aa4:	d0fa      	beq.n	8007a9c <_dtoa_r+0xb0c>
 8007aa6:	e5be      	b.n	8007626 <_dtoa_r+0x696>
 8007aa8:	459a      	cmp	sl, r3
 8007aaa:	d1a4      	bne.n	80079f6 <_dtoa_r+0xa66>
 8007aac:	9b04      	ldr	r3, [sp, #16]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	2331      	movs	r3, #49	@ 0x31
 8007ab4:	f88a 3000 	strb.w	r3, [sl]
 8007ab8:	e5b5      	b.n	8007626 <_dtoa_r+0x696>
 8007aba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007abc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b1c <_dtoa_r+0xb8c>
 8007ac0:	b11b      	cbz	r3, 8007aca <_dtoa_r+0xb3a>
 8007ac2:	f10a 0308 	add.w	r3, sl, #8
 8007ac6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	4650      	mov	r0, sl
 8007acc:	b017      	add	sp, #92	@ 0x5c
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	f77f ae3d 	ble.w	8007754 <_dtoa_r+0x7c4>
 8007ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e65b      	b.n	800779a <_dtoa_r+0x80a>
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f77f aed6 	ble.w	8007896 <_dtoa_r+0x906>
 8007aea:	4656      	mov	r6, sl
 8007aec:	4621      	mov	r1, r4
 8007aee:	4648      	mov	r0, r9
 8007af0:	f7ff f9c6 	bl	8006e80 <quorem>
 8007af4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	f806 8b01 	strb.w	r8, [r6], #1
 8007afe:	eba6 020a 	sub.w	r2, r6, sl
 8007b02:	4293      	cmp	r3, r2
 8007b04:	ddb3      	ble.n	8007a6e <_dtoa_r+0xade>
 8007b06:	4649      	mov	r1, r9
 8007b08:	2300      	movs	r3, #0
 8007b0a:	220a      	movs	r2, #10
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fcb3 	bl	8008478 <__multadd>
 8007b12:	4681      	mov	r9, r0
 8007b14:	e7ea      	b.n	8007aec <_dtoa_r+0xb5c>
 8007b16:	bf00      	nop
 8007b18:	0800a4b1 	.word	0x0800a4b1
 8007b1c:	0800a435 	.word	0x0800a435

08007b20 <_free_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4605      	mov	r5, r0
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d040      	beq.n	8007baa <_free_r+0x8a>
 8007b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2c:	1f0c      	subs	r4, r1, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bfb8      	it	lt
 8007b32:	18e4      	addlt	r4, r4, r3
 8007b34:	f000 fc32 	bl	800839c <__malloc_lock>
 8007b38:	4a1c      	ldr	r2, [pc, #112]	@ (8007bac <_free_r+0x8c>)
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	b933      	cbnz	r3, 8007b4c <_free_r+0x2c>
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	6014      	str	r4, [r2, #0]
 8007b42:	4628      	mov	r0, r5
 8007b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b48:	f000 bc2e 	b.w	80083a8 <__malloc_unlock>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d908      	bls.n	8007b62 <_free_r+0x42>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	1821      	adds	r1, r4, r0
 8007b54:	428b      	cmp	r3, r1
 8007b56:	bf01      	itttt	eq
 8007b58:	6819      	ldreq	r1, [r3, #0]
 8007b5a:	685b      	ldreq	r3, [r3, #4]
 8007b5c:	1809      	addeq	r1, r1, r0
 8007b5e:	6021      	streq	r1, [r4, #0]
 8007b60:	e7ed      	b.n	8007b3e <_free_r+0x1e>
 8007b62:	461a      	mov	r2, r3
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b10b      	cbz	r3, 8007b6c <_free_r+0x4c>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d9fa      	bls.n	8007b62 <_free_r+0x42>
 8007b6c:	6811      	ldr	r1, [r2, #0]
 8007b6e:	1850      	adds	r0, r2, r1
 8007b70:	42a0      	cmp	r0, r4
 8007b72:	d10b      	bne.n	8007b8c <_free_r+0x6c>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	4401      	add	r1, r0
 8007b78:	1850      	adds	r0, r2, r1
 8007b7a:	4283      	cmp	r3, r0
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	d1e0      	bne.n	8007b42 <_free_r+0x22>
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4408      	add	r0, r1
 8007b86:	6010      	str	r0, [r2, #0]
 8007b88:	6053      	str	r3, [r2, #4]
 8007b8a:	e7da      	b.n	8007b42 <_free_r+0x22>
 8007b8c:	d902      	bls.n	8007b94 <_free_r+0x74>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	e7d6      	b.n	8007b42 <_free_r+0x22>
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	1821      	adds	r1, r4, r0
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	bf01      	itttt	eq
 8007b9c:	6819      	ldreq	r1, [r3, #0]
 8007b9e:	685b      	ldreq	r3, [r3, #4]
 8007ba0:	1809      	addeq	r1, r1, r0
 8007ba2:	6021      	streq	r1, [r4, #0]
 8007ba4:	6063      	str	r3, [r4, #4]
 8007ba6:	6054      	str	r4, [r2, #4]
 8007ba8:	e7cb      	b.n	8007b42 <_free_r+0x22>
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20000a1c 	.word	0x20000a1c

08007bb0 <rshift>:
 8007bb0:	6903      	ldr	r3, [r0, #16]
 8007bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007bba:	f100 0414 	add.w	r4, r0, #20
 8007bbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bc2:	dd46      	ble.n	8007c52 <rshift+0xa2>
 8007bc4:	f011 011f 	ands.w	r1, r1, #31
 8007bc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007bcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007bd0:	d10c      	bne.n	8007bec <rshift+0x3c>
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f100 0710 	add.w	r7, r0, #16
 8007bd8:	42b1      	cmp	r1, r6
 8007bda:	d335      	bcc.n	8007c48 <rshift+0x98>
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	1eea      	subs	r2, r5, #3
 8007be2:	4296      	cmp	r6, r2
 8007be4:	bf38      	it	cc
 8007be6:	2300      	movcc	r3, #0
 8007be8:	4423      	add	r3, r4
 8007bea:	e015      	b.n	8007c18 <rshift+0x68>
 8007bec:	46a1      	mov	r9, r4
 8007bee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bf2:	f1c1 0820 	rsb	r8, r1, #32
 8007bf6:	40cf      	lsrs	r7, r1
 8007bf8:	f105 0e04 	add.w	lr, r5, #4
 8007bfc:	4576      	cmp	r6, lr
 8007bfe:	46f4      	mov	ip, lr
 8007c00:	d816      	bhi.n	8007c30 <rshift+0x80>
 8007c02:	1a9a      	subs	r2, r3, r2
 8007c04:	0092      	lsls	r2, r2, #2
 8007c06:	3a04      	subs	r2, #4
 8007c08:	3501      	adds	r5, #1
 8007c0a:	42ae      	cmp	r6, r5
 8007c0c:	bf38      	it	cc
 8007c0e:	2200      	movcc	r2, #0
 8007c10:	18a3      	adds	r3, r4, r2
 8007c12:	50a7      	str	r7, [r4, r2]
 8007c14:	b107      	cbz	r7, 8007c18 <rshift+0x68>
 8007c16:	3304      	adds	r3, #4
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	eba3 0204 	sub.w	r2, r3, r4
 8007c1e:	bf08      	it	eq
 8007c20:	2300      	moveq	r3, #0
 8007c22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c26:	6102      	str	r2, [r0, #16]
 8007c28:	bf08      	it	eq
 8007c2a:	6143      	streq	r3, [r0, #20]
 8007c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c30:	f8dc c000 	ldr.w	ip, [ip]
 8007c34:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c38:	ea4c 0707 	orr.w	r7, ip, r7
 8007c3c:	f849 7b04 	str.w	r7, [r9], #4
 8007c40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c44:	40cf      	lsrs	r7, r1
 8007c46:	e7d9      	b.n	8007bfc <rshift+0x4c>
 8007c48:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c50:	e7c2      	b.n	8007bd8 <rshift+0x28>
 8007c52:	4623      	mov	r3, r4
 8007c54:	e7e0      	b.n	8007c18 <rshift+0x68>

08007c56 <__hexdig_fun>:
 8007c56:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c5a:	2b09      	cmp	r3, #9
 8007c5c:	d802      	bhi.n	8007c64 <__hexdig_fun+0xe>
 8007c5e:	3820      	subs	r0, #32
 8007c60:	b2c0      	uxtb	r0, r0
 8007c62:	4770      	bx	lr
 8007c64:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d801      	bhi.n	8007c70 <__hexdig_fun+0x1a>
 8007c6c:	3847      	subs	r0, #71	@ 0x47
 8007c6e:	e7f7      	b.n	8007c60 <__hexdig_fun+0xa>
 8007c70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d801      	bhi.n	8007c7c <__hexdig_fun+0x26>
 8007c78:	3827      	subs	r0, #39	@ 0x27
 8007c7a:	e7f1      	b.n	8007c60 <__hexdig_fun+0xa>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	4770      	bx	lr

08007c80 <__gethex>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	468a      	mov	sl, r1
 8007c86:	4690      	mov	r8, r2
 8007c88:	b085      	sub	sp, #20
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	680b      	ldr	r3, [r1, #0]
 8007c8e:	9001      	str	r0, [sp, #4]
 8007c90:	1c9c      	adds	r4, r3, #2
 8007c92:	46a1      	mov	r9, r4
 8007c94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c98:	2830      	cmp	r0, #48	@ 0x30
 8007c9a:	d0fa      	beq.n	8007c92 <__gethex+0x12>
 8007c9c:	eba9 0303 	sub.w	r3, r9, r3
 8007ca0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ca4:	f7ff ffd7 	bl	8007c56 <__hexdig_fun>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d168      	bne.n	8007d80 <__gethex+0x100>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	499f      	ldr	r1, [pc, #636]	@ (8007f30 <__gethex+0x2b0>)
 8007cb4:	f7ff f821 	bl	8006cfa <strncmp>
 8007cb8:	4607      	mov	r7, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d167      	bne.n	8007d8e <__gethex+0x10e>
 8007cbe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007cc2:	4626      	mov	r6, r4
 8007cc4:	f7ff ffc7 	bl	8007c56 <__hexdig_fun>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d062      	beq.n	8007d92 <__gethex+0x112>
 8007ccc:	4623      	mov	r3, r4
 8007cce:	7818      	ldrb	r0, [r3, #0]
 8007cd0:	4699      	mov	r9, r3
 8007cd2:	2830      	cmp	r0, #48	@ 0x30
 8007cd4:	f103 0301 	add.w	r3, r3, #1
 8007cd8:	d0f9      	beq.n	8007cce <__gethex+0x4e>
 8007cda:	f7ff ffbc 	bl	8007c56 <__hexdig_fun>
 8007cde:	fab0 f580 	clz	r5, r0
 8007ce2:	f04f 0b01 	mov.w	fp, #1
 8007ce6:	096d      	lsrs	r5, r5, #5
 8007ce8:	464a      	mov	r2, r9
 8007cea:	4616      	mov	r6, r2
 8007cec:	7830      	ldrb	r0, [r6, #0]
 8007cee:	3201      	adds	r2, #1
 8007cf0:	f7ff ffb1 	bl	8007c56 <__hexdig_fun>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1f8      	bne.n	8007cea <__gethex+0x6a>
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	498c      	ldr	r1, [pc, #560]	@ (8007f30 <__gethex+0x2b0>)
 8007cfe:	f7fe fffc 	bl	8006cfa <strncmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d13f      	bne.n	8007d86 <__gethex+0x106>
 8007d06:	b944      	cbnz	r4, 8007d1a <__gethex+0x9a>
 8007d08:	1c74      	adds	r4, r6, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4616      	mov	r6, r2
 8007d0e:	7830      	ldrb	r0, [r6, #0]
 8007d10:	3201      	adds	r2, #1
 8007d12:	f7ff ffa0 	bl	8007c56 <__hexdig_fun>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d1f8      	bne.n	8007d0c <__gethex+0x8c>
 8007d1a:	1ba4      	subs	r4, r4, r6
 8007d1c:	00a7      	lsls	r7, r4, #2
 8007d1e:	7833      	ldrb	r3, [r6, #0]
 8007d20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007d24:	2b50      	cmp	r3, #80	@ 0x50
 8007d26:	d13e      	bne.n	8007da6 <__gethex+0x126>
 8007d28:	7873      	ldrb	r3, [r6, #1]
 8007d2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d2c:	d033      	beq.n	8007d96 <__gethex+0x116>
 8007d2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d30:	d034      	beq.n	8007d9c <__gethex+0x11c>
 8007d32:	2400      	movs	r4, #0
 8007d34:	1c71      	adds	r1, r6, #1
 8007d36:	7808      	ldrb	r0, [r1, #0]
 8007d38:	f7ff ff8d 	bl	8007c56 <__hexdig_fun>
 8007d3c:	1e43      	subs	r3, r0, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b18      	cmp	r3, #24
 8007d42:	d830      	bhi.n	8007da6 <__gethex+0x126>
 8007d44:	f1a0 0210 	sub.w	r2, r0, #16
 8007d48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d4c:	f7ff ff83 	bl	8007c56 <__hexdig_fun>
 8007d50:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d54:	fa5f fc8c 	uxtb.w	ip, ip
 8007d58:	f1bc 0f18 	cmp.w	ip, #24
 8007d5c:	f04f 030a 	mov.w	r3, #10
 8007d60:	d91e      	bls.n	8007da0 <__gethex+0x120>
 8007d62:	b104      	cbz	r4, 8007d66 <__gethex+0xe6>
 8007d64:	4252      	negs	r2, r2
 8007d66:	4417      	add	r7, r2
 8007d68:	f8ca 1000 	str.w	r1, [sl]
 8007d6c:	b1ed      	cbz	r5, 8007daa <__gethex+0x12a>
 8007d6e:	f1bb 0f00 	cmp.w	fp, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2506      	moveq	r5, #6
 8007d76:	2500      	movne	r5, #0
 8007d78:	4628      	mov	r0, r5
 8007d7a:	b005      	add	sp, #20
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	2500      	movs	r5, #0
 8007d82:	462c      	mov	r4, r5
 8007d84:	e7b0      	b.n	8007ce8 <__gethex+0x68>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d1c7      	bne.n	8007d1a <__gethex+0x9a>
 8007d8a:	4627      	mov	r7, r4
 8007d8c:	e7c7      	b.n	8007d1e <__gethex+0x9e>
 8007d8e:	464e      	mov	r6, r9
 8007d90:	462f      	mov	r7, r5
 8007d92:	2501      	movs	r5, #1
 8007d94:	e7c3      	b.n	8007d1e <__gethex+0x9e>
 8007d96:	2400      	movs	r4, #0
 8007d98:	1cb1      	adds	r1, r6, #2
 8007d9a:	e7cc      	b.n	8007d36 <__gethex+0xb6>
 8007d9c:	2401      	movs	r4, #1
 8007d9e:	e7fb      	b.n	8007d98 <__gethex+0x118>
 8007da0:	fb03 0002 	mla	r0, r3, r2, r0
 8007da4:	e7ce      	b.n	8007d44 <__gethex+0xc4>
 8007da6:	4631      	mov	r1, r6
 8007da8:	e7de      	b.n	8007d68 <__gethex+0xe8>
 8007daa:	4629      	mov	r1, r5
 8007dac:	eba6 0309 	sub.w	r3, r6, r9
 8007db0:	3b01      	subs	r3, #1
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	dc0a      	bgt.n	8007dcc <__gethex+0x14c>
 8007db6:	9801      	ldr	r0, [sp, #4]
 8007db8:	f000 fafc 	bl	80083b4 <_Balloc>
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	b940      	cbnz	r0, 8007dd2 <__gethex+0x152>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	21e4      	movs	r1, #228	@ 0xe4
 8007dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007f34 <__gethex+0x2b4>)
 8007dc6:	485c      	ldr	r0, [pc, #368]	@ (8007f38 <__gethex+0x2b8>)
 8007dc8:	f001 f9d0 	bl	800916c <__assert_func>
 8007dcc:	3101      	adds	r1, #1
 8007dce:	105b      	asrs	r3, r3, #1
 8007dd0:	e7ef      	b.n	8007db2 <__gethex+0x132>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f100 0a14 	add.w	sl, r0, #20
 8007dd8:	4655      	mov	r5, sl
 8007dda:	469b      	mov	fp, r3
 8007ddc:	45b1      	cmp	r9, r6
 8007dde:	d337      	bcc.n	8007e50 <__gethex+0x1d0>
 8007de0:	f845 bb04 	str.w	fp, [r5], #4
 8007de4:	eba5 050a 	sub.w	r5, r5, sl
 8007de8:	10ad      	asrs	r5, r5, #2
 8007dea:	6125      	str	r5, [r4, #16]
 8007dec:	4658      	mov	r0, fp
 8007dee:	f000 fbd3 	bl	8008598 <__hi0bits>
 8007df2:	016d      	lsls	r5, r5, #5
 8007df4:	f8d8 6000 	ldr.w	r6, [r8]
 8007df8:	1a2d      	subs	r5, r5, r0
 8007dfa:	42b5      	cmp	r5, r6
 8007dfc:	dd54      	ble.n	8007ea8 <__gethex+0x228>
 8007dfe:	1bad      	subs	r5, r5, r6
 8007e00:	4629      	mov	r1, r5
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 ff5b 	bl	8008cbe <__any_on>
 8007e08:	4681      	mov	r9, r0
 8007e0a:	b178      	cbz	r0, 8007e2c <__gethex+0x1ac>
 8007e0c:	f04f 0901 	mov.w	r9, #1
 8007e10:	1e6b      	subs	r3, r5, #1
 8007e12:	1159      	asrs	r1, r3, #5
 8007e14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e18:	f003 021f 	and.w	r2, r3, #31
 8007e1c:	fa09 f202 	lsl.w	r2, r9, r2
 8007e20:	420a      	tst	r2, r1
 8007e22:	d003      	beq.n	8007e2c <__gethex+0x1ac>
 8007e24:	454b      	cmp	r3, r9
 8007e26:	dc36      	bgt.n	8007e96 <__gethex+0x216>
 8007e28:	f04f 0902 	mov.w	r9, #2
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7ff febe 	bl	8007bb0 <rshift>
 8007e34:	442f      	add	r7, r5
 8007e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e3a:	42bb      	cmp	r3, r7
 8007e3c:	da42      	bge.n	8007ec4 <__gethex+0x244>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	9801      	ldr	r0, [sp, #4]
 8007e42:	f000 faf7 	bl	8008434 <_Bfree>
 8007e46:	2300      	movs	r3, #0
 8007e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e4a:	25a3      	movs	r5, #163	@ 0xa3
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e793      	b.n	8007d78 <__gethex+0xf8>
 8007e50:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e54:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e56:	d012      	beq.n	8007e7e <__gethex+0x1fe>
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d104      	bne.n	8007e66 <__gethex+0x1e6>
 8007e5c:	f845 bb04 	str.w	fp, [r5], #4
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	465b      	mov	r3, fp
 8007e66:	7830      	ldrb	r0, [r6, #0]
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	f7ff fef4 	bl	8007c56 <__hexdig_fun>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	f000 000f 	and.w	r0, r0, #15
 8007e74:	4098      	lsls	r0, r3
 8007e76:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	e7ae      	b.n	8007ddc <__gethex+0x15c>
 8007e7e:	45b1      	cmp	r9, r6
 8007e80:	d8ea      	bhi.n	8007e58 <__gethex+0x1d8>
 8007e82:	2201      	movs	r2, #1
 8007e84:	4630      	mov	r0, r6
 8007e86:	492a      	ldr	r1, [pc, #168]	@ (8007f30 <__gethex+0x2b0>)
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	f7fe ff36 	bl	8006cfa <strncmp>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d1e1      	bne.n	8007e58 <__gethex+0x1d8>
 8007e94:	e7a2      	b.n	8007ddc <__gethex+0x15c>
 8007e96:	4620      	mov	r0, r4
 8007e98:	1ea9      	subs	r1, r5, #2
 8007e9a:	f000 ff10 	bl	8008cbe <__any_on>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0c2      	beq.n	8007e28 <__gethex+0x1a8>
 8007ea2:	f04f 0903 	mov.w	r9, #3
 8007ea6:	e7c1      	b.n	8007e2c <__gethex+0x1ac>
 8007ea8:	da09      	bge.n	8007ebe <__gethex+0x23e>
 8007eaa:	1b75      	subs	r5, r6, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	462a      	mov	r2, r5
 8007eb0:	9801      	ldr	r0, [sp, #4]
 8007eb2:	f000 fcd5 	bl	8008860 <__lshift>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	1b7f      	subs	r7, r7, r5
 8007eba:	f100 0a14 	add.w	sl, r0, #20
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	e7b8      	b.n	8007e36 <__gethex+0x1b6>
 8007ec4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ec8:	42bd      	cmp	r5, r7
 8007eca:	dd6f      	ble.n	8007fac <__gethex+0x32c>
 8007ecc:	1bed      	subs	r5, r5, r7
 8007ece:	42ae      	cmp	r6, r5
 8007ed0:	dc34      	bgt.n	8007f3c <__gethex+0x2bc>
 8007ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d022      	beq.n	8007f20 <__gethex+0x2a0>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d024      	beq.n	8007f28 <__gethex+0x2a8>
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d115      	bne.n	8007f0e <__gethex+0x28e>
 8007ee2:	42ae      	cmp	r6, r5
 8007ee4:	d113      	bne.n	8007f0e <__gethex+0x28e>
 8007ee6:	2e01      	cmp	r6, #1
 8007ee8:	d10b      	bne.n	8007f02 <__gethex+0x282>
 8007eea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007eee:	9a02      	ldr	r2, [sp, #8]
 8007ef0:	2562      	movs	r5, #98	@ 0x62
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	f8ca 3000 	str.w	r3, [sl]
 8007efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007efe:	601c      	str	r4, [r3, #0]
 8007f00:	e73a      	b.n	8007d78 <__gethex+0xf8>
 8007f02:	4620      	mov	r0, r4
 8007f04:	1e71      	subs	r1, r6, #1
 8007f06:	f000 feda 	bl	8008cbe <__any_on>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1ed      	bne.n	8007eea <__gethex+0x26a>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	9801      	ldr	r0, [sp, #4]
 8007f12:	f000 fa8f 	bl	8008434 <_Bfree>
 8007f16:	2300      	movs	r3, #0
 8007f18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f1a:	2550      	movs	r5, #80	@ 0x50
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	e72b      	b.n	8007d78 <__gethex+0xf8>
 8007f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f3      	bne.n	8007f0e <__gethex+0x28e>
 8007f26:	e7e0      	b.n	8007eea <__gethex+0x26a>
 8007f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1dd      	bne.n	8007eea <__gethex+0x26a>
 8007f2e:	e7ee      	b.n	8007f0e <__gethex+0x28e>
 8007f30:	0800a2a2 	.word	0x0800a2a2
 8007f34:	0800a4b1 	.word	0x0800a4b1
 8007f38:	0800a4c2 	.word	0x0800a4c2
 8007f3c:	1e6f      	subs	r7, r5, #1
 8007f3e:	f1b9 0f00 	cmp.w	r9, #0
 8007f42:	d130      	bne.n	8007fa6 <__gethex+0x326>
 8007f44:	b127      	cbz	r7, 8007f50 <__gethex+0x2d0>
 8007f46:	4639      	mov	r1, r7
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 feb8 	bl	8008cbe <__any_on>
 8007f4e:	4681      	mov	r9, r0
 8007f50:	2301      	movs	r3, #1
 8007f52:	4629      	mov	r1, r5
 8007f54:	1b76      	subs	r6, r6, r5
 8007f56:	2502      	movs	r5, #2
 8007f58:	117a      	asrs	r2, r7, #5
 8007f5a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f5e:	f007 071f 	and.w	r7, r7, #31
 8007f62:	40bb      	lsls	r3, r7
 8007f64:	4213      	tst	r3, r2
 8007f66:	4620      	mov	r0, r4
 8007f68:	bf18      	it	ne
 8007f6a:	f049 0902 	orrne.w	r9, r9, #2
 8007f6e:	f7ff fe1f 	bl	8007bb0 <rshift>
 8007f72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f76:	f1b9 0f00 	cmp.w	r9, #0
 8007f7a:	d047      	beq.n	800800c <__gethex+0x38c>
 8007f7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d015      	beq.n	8007fb0 <__gethex+0x330>
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d017      	beq.n	8007fb8 <__gethex+0x338>
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d109      	bne.n	8007fa0 <__gethex+0x320>
 8007f8c:	f019 0f02 	tst.w	r9, #2
 8007f90:	d006      	beq.n	8007fa0 <__gethex+0x320>
 8007f92:	f8da 3000 	ldr.w	r3, [sl]
 8007f96:	ea49 0903 	orr.w	r9, r9, r3
 8007f9a:	f019 0f01 	tst.w	r9, #1
 8007f9e:	d10e      	bne.n	8007fbe <__gethex+0x33e>
 8007fa0:	f045 0510 	orr.w	r5, r5, #16
 8007fa4:	e032      	b.n	800800c <__gethex+0x38c>
 8007fa6:	f04f 0901 	mov.w	r9, #1
 8007faa:	e7d1      	b.n	8007f50 <__gethex+0x2d0>
 8007fac:	2501      	movs	r5, #1
 8007fae:	e7e2      	b.n	8007f76 <__gethex+0x2f6>
 8007fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb2:	f1c3 0301 	rsb	r3, r3, #1
 8007fb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <__gethex+0x320>
 8007fbe:	f04f 0c00 	mov.w	ip, #0
 8007fc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fc6:	f104 0314 	add.w	r3, r4, #20
 8007fca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007fce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007fdc:	d01b      	beq.n	8008016 <__gethex+0x396>
 8007fde:	3201      	adds	r2, #1
 8007fe0:	6002      	str	r2, [r0, #0]
 8007fe2:	2d02      	cmp	r5, #2
 8007fe4:	f104 0314 	add.w	r3, r4, #20
 8007fe8:	d13c      	bne.n	8008064 <__gethex+0x3e4>
 8007fea:	f8d8 2000 	ldr.w	r2, [r8]
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	42b2      	cmp	r2, r6
 8007ff2:	d109      	bne.n	8008008 <__gethex+0x388>
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	1171      	asrs	r1, r6, #5
 8007ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ffc:	f006 061f 	and.w	r6, r6, #31
 8008000:	fa02 f606 	lsl.w	r6, r2, r6
 8008004:	421e      	tst	r6, r3
 8008006:	d13a      	bne.n	800807e <__gethex+0x3fe>
 8008008:	f045 0520 	orr.w	r5, r5, #32
 800800c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800e:	601c      	str	r4, [r3, #0]
 8008010:	9b02      	ldr	r3, [sp, #8]
 8008012:	601f      	str	r7, [r3, #0]
 8008014:	e6b0      	b.n	8007d78 <__gethex+0xf8>
 8008016:	4299      	cmp	r1, r3
 8008018:	f843 cc04 	str.w	ip, [r3, #-4]
 800801c:	d8d9      	bhi.n	8007fd2 <__gethex+0x352>
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	459b      	cmp	fp, r3
 8008022:	db17      	blt.n	8008054 <__gethex+0x3d4>
 8008024:	6861      	ldr	r1, [r4, #4]
 8008026:	9801      	ldr	r0, [sp, #4]
 8008028:	3101      	adds	r1, #1
 800802a:	f000 f9c3 	bl	80083b4 <_Balloc>
 800802e:	4681      	mov	r9, r0
 8008030:	b918      	cbnz	r0, 800803a <__gethex+0x3ba>
 8008032:	4602      	mov	r2, r0
 8008034:	2184      	movs	r1, #132	@ 0x84
 8008036:	4b19      	ldr	r3, [pc, #100]	@ (800809c <__gethex+0x41c>)
 8008038:	e6c5      	b.n	8007dc6 <__gethex+0x146>
 800803a:	6922      	ldr	r2, [r4, #16]
 800803c:	f104 010c 	add.w	r1, r4, #12
 8008040:	3202      	adds	r2, #2
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	300c      	adds	r0, #12
 8008046:	f7fe ff06 	bl	8006e56 <memcpy>
 800804a:	4621      	mov	r1, r4
 800804c:	9801      	ldr	r0, [sp, #4]
 800804e:	f000 f9f1 	bl	8008434 <_Bfree>
 8008052:	464c      	mov	r4, r9
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	6122      	str	r2, [r4, #16]
 800805a:	2201      	movs	r2, #1
 800805c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008060:	615a      	str	r2, [r3, #20]
 8008062:	e7be      	b.n	8007fe2 <__gethex+0x362>
 8008064:	6922      	ldr	r2, [r4, #16]
 8008066:	455a      	cmp	r2, fp
 8008068:	dd0b      	ble.n	8008082 <__gethex+0x402>
 800806a:	2101      	movs	r1, #1
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff fd9f 	bl	8007bb0 <rshift>
 8008072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008076:	3701      	adds	r7, #1
 8008078:	42bb      	cmp	r3, r7
 800807a:	f6ff aee0 	blt.w	8007e3e <__gethex+0x1be>
 800807e:	2501      	movs	r5, #1
 8008080:	e7c2      	b.n	8008008 <__gethex+0x388>
 8008082:	f016 061f 	ands.w	r6, r6, #31
 8008086:	d0fa      	beq.n	800807e <__gethex+0x3fe>
 8008088:	4453      	add	r3, sl
 800808a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800808e:	f000 fa83 	bl	8008598 <__hi0bits>
 8008092:	f1c6 0620 	rsb	r6, r6, #32
 8008096:	42b0      	cmp	r0, r6
 8008098:	dbe7      	blt.n	800806a <__gethex+0x3ea>
 800809a:	e7f0      	b.n	800807e <__gethex+0x3fe>
 800809c:	0800a4b1 	.word	0x0800a4b1

080080a0 <L_shift>:
 80080a0:	f1c2 0208 	rsb	r2, r2, #8
 80080a4:	0092      	lsls	r2, r2, #2
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	f1c2 0620 	rsb	r6, r2, #32
 80080ac:	6843      	ldr	r3, [r0, #4]
 80080ae:	6804      	ldr	r4, [r0, #0]
 80080b0:	fa03 f506 	lsl.w	r5, r3, r6
 80080b4:	432c      	orrs	r4, r5
 80080b6:	40d3      	lsrs	r3, r2
 80080b8:	6004      	str	r4, [r0, #0]
 80080ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80080be:	4288      	cmp	r0, r1
 80080c0:	d3f4      	bcc.n	80080ac <L_shift+0xc>
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <__match>:
 80080c4:	b530      	push	{r4, r5, lr}
 80080c6:	6803      	ldr	r3, [r0, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ce:	b914      	cbnz	r4, 80080d6 <__match+0x12>
 80080d0:	6003      	str	r3, [r0, #0]
 80080d2:	2001      	movs	r0, #1
 80080d4:	bd30      	pop	{r4, r5, pc}
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80080de:	2d19      	cmp	r5, #25
 80080e0:	bf98      	it	ls
 80080e2:	3220      	addls	r2, #32
 80080e4:	42a2      	cmp	r2, r4
 80080e6:	d0f0      	beq.n	80080ca <__match+0x6>
 80080e8:	2000      	movs	r0, #0
 80080ea:	e7f3      	b.n	80080d4 <__match+0x10>

080080ec <__hexnan>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	2500      	movs	r5, #0
 80080f2:	680b      	ldr	r3, [r1, #0]
 80080f4:	4682      	mov	sl, r0
 80080f6:	115e      	asrs	r6, r3, #5
 80080f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080fc:	f013 031f 	ands.w	r3, r3, #31
 8008100:	bf18      	it	ne
 8008102:	3604      	addne	r6, #4
 8008104:	1f37      	subs	r7, r6, #4
 8008106:	4690      	mov	r8, r2
 8008108:	46b9      	mov	r9, r7
 800810a:	463c      	mov	r4, r7
 800810c:	46ab      	mov	fp, r5
 800810e:	b087      	sub	sp, #28
 8008110:	6801      	ldr	r1, [r0, #0]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	f846 5c04 	str.w	r5, [r6, #-4]
 8008118:	9502      	str	r5, [sp, #8]
 800811a:	784a      	ldrb	r2, [r1, #1]
 800811c:	1c4b      	adds	r3, r1, #1
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	b342      	cbz	r2, 8008174 <__hexnan+0x88>
 8008122:	4610      	mov	r0, r2
 8008124:	9105      	str	r1, [sp, #20]
 8008126:	9204      	str	r2, [sp, #16]
 8008128:	f7ff fd95 	bl	8007c56 <__hexdig_fun>
 800812c:	2800      	cmp	r0, #0
 800812e:	d151      	bne.n	80081d4 <__hexnan+0xe8>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	9905      	ldr	r1, [sp, #20]
 8008134:	2a20      	cmp	r2, #32
 8008136:	d818      	bhi.n	800816a <__hexnan+0x7e>
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	459b      	cmp	fp, r3
 800813c:	dd13      	ble.n	8008166 <__hexnan+0x7a>
 800813e:	454c      	cmp	r4, r9
 8008140:	d206      	bcs.n	8008150 <__hexnan+0x64>
 8008142:	2d07      	cmp	r5, #7
 8008144:	dc04      	bgt.n	8008150 <__hexnan+0x64>
 8008146:	462a      	mov	r2, r5
 8008148:	4649      	mov	r1, r9
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff ffa8 	bl	80080a0 <L_shift>
 8008150:	4544      	cmp	r4, r8
 8008152:	d952      	bls.n	80081fa <__hexnan+0x10e>
 8008154:	2300      	movs	r3, #0
 8008156:	f1a4 0904 	sub.w	r9, r4, #4
 800815a:	f844 3c04 	str.w	r3, [r4, #-4]
 800815e:	461d      	mov	r5, r3
 8008160:	464c      	mov	r4, r9
 8008162:	f8cd b008 	str.w	fp, [sp, #8]
 8008166:	9903      	ldr	r1, [sp, #12]
 8008168:	e7d7      	b.n	800811a <__hexnan+0x2e>
 800816a:	2a29      	cmp	r2, #41	@ 0x29
 800816c:	d157      	bne.n	800821e <__hexnan+0x132>
 800816e:	3102      	adds	r1, #2
 8008170:	f8ca 1000 	str.w	r1, [sl]
 8008174:	f1bb 0f00 	cmp.w	fp, #0
 8008178:	d051      	beq.n	800821e <__hexnan+0x132>
 800817a:	454c      	cmp	r4, r9
 800817c:	d206      	bcs.n	800818c <__hexnan+0xa0>
 800817e:	2d07      	cmp	r5, #7
 8008180:	dc04      	bgt.n	800818c <__hexnan+0xa0>
 8008182:	462a      	mov	r2, r5
 8008184:	4649      	mov	r1, r9
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff ff8a 	bl	80080a0 <L_shift>
 800818c:	4544      	cmp	r4, r8
 800818e:	d936      	bls.n	80081fe <__hexnan+0x112>
 8008190:	4623      	mov	r3, r4
 8008192:	f1a8 0204 	sub.w	r2, r8, #4
 8008196:	f853 1b04 	ldr.w	r1, [r3], #4
 800819a:	429f      	cmp	r7, r3
 800819c:	f842 1f04 	str.w	r1, [r2, #4]!
 80081a0:	d2f9      	bcs.n	8008196 <__hexnan+0xaa>
 80081a2:	1b3b      	subs	r3, r7, r4
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	3304      	adds	r3, #4
 80081aa:	3401      	adds	r4, #1
 80081ac:	3e03      	subs	r6, #3
 80081ae:	42b4      	cmp	r4, r6
 80081b0:	bf88      	it	hi
 80081b2:	2304      	movhi	r3, #4
 80081b4:	2200      	movs	r2, #0
 80081b6:	4443      	add	r3, r8
 80081b8:	f843 2b04 	str.w	r2, [r3], #4
 80081bc:	429f      	cmp	r7, r3
 80081be:	d2fb      	bcs.n	80081b8 <__hexnan+0xcc>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	b91b      	cbnz	r3, 80081cc <__hexnan+0xe0>
 80081c4:	4547      	cmp	r7, r8
 80081c6:	d128      	bne.n	800821a <__hexnan+0x12e>
 80081c8:	2301      	movs	r3, #1
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	2005      	movs	r0, #5
 80081ce:	b007      	add	sp, #28
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	3501      	adds	r5, #1
 80081d6:	2d08      	cmp	r5, #8
 80081d8:	f10b 0b01 	add.w	fp, fp, #1
 80081dc:	dd06      	ble.n	80081ec <__hexnan+0x100>
 80081de:	4544      	cmp	r4, r8
 80081e0:	d9c1      	bls.n	8008166 <__hexnan+0x7a>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2501      	movs	r5, #1
 80081e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ea:	3c04      	subs	r4, #4
 80081ec:	6822      	ldr	r2, [r4, #0]
 80081ee:	f000 000f 	and.w	r0, r0, #15
 80081f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	e7b5      	b.n	8008166 <__hexnan+0x7a>
 80081fa:	2508      	movs	r5, #8
 80081fc:	e7b3      	b.n	8008166 <__hexnan+0x7a>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0dd      	beq.n	80081c0 <__hexnan+0xd4>
 8008204:	f04f 32ff 	mov.w	r2, #4294967295
 8008208:	f1c3 0320 	rsb	r3, r3, #32
 800820c:	40da      	lsrs	r2, r3
 800820e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008212:	4013      	ands	r3, r2
 8008214:	f846 3c04 	str.w	r3, [r6, #-4]
 8008218:	e7d2      	b.n	80081c0 <__hexnan+0xd4>
 800821a:	3f04      	subs	r7, #4
 800821c:	e7d0      	b.n	80081c0 <__hexnan+0xd4>
 800821e:	2004      	movs	r0, #4
 8008220:	e7d5      	b.n	80081ce <__hexnan+0xe2>
	...

08008224 <malloc>:
 8008224:	4b02      	ldr	r3, [pc, #8]	@ (8008230 <malloc+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f000 b825 	b.w	8008278 <_malloc_r>
 800822e:	bf00      	nop
 8008230:	200001a4 	.word	0x200001a4

08008234 <sbrk_aligned>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4e0f      	ldr	r6, [pc, #60]	@ (8008274 <sbrk_aligned+0x40>)
 8008238:	460c      	mov	r4, r1
 800823a:	6831      	ldr	r1, [r6, #0]
 800823c:	4605      	mov	r5, r0
 800823e:	b911      	cbnz	r1, 8008246 <sbrk_aligned+0x12>
 8008240:	f000 ff84 	bl	800914c <_sbrk_r>
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f000 ff7f 	bl	800914c <_sbrk_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d103      	bne.n	800825a <sbrk_aligned+0x26>
 8008252:	f04f 34ff 	mov.w	r4, #4294967295
 8008256:	4620      	mov	r0, r4
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	1cc4      	adds	r4, r0, #3
 800825c:	f024 0403 	bic.w	r4, r4, #3
 8008260:	42a0      	cmp	r0, r4
 8008262:	d0f8      	beq.n	8008256 <sbrk_aligned+0x22>
 8008264:	1a21      	subs	r1, r4, r0
 8008266:	4628      	mov	r0, r5
 8008268:	f000 ff70 	bl	800914c <_sbrk_r>
 800826c:	3001      	adds	r0, #1
 800826e:	d1f2      	bne.n	8008256 <sbrk_aligned+0x22>
 8008270:	e7ef      	b.n	8008252 <sbrk_aligned+0x1e>
 8008272:	bf00      	nop
 8008274:	20000a18 	.word	0x20000a18

08008278 <_malloc_r>:
 8008278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800827c:	1ccd      	adds	r5, r1, #3
 800827e:	f025 0503 	bic.w	r5, r5, #3
 8008282:	3508      	adds	r5, #8
 8008284:	2d0c      	cmp	r5, #12
 8008286:	bf38      	it	cc
 8008288:	250c      	movcc	r5, #12
 800828a:	2d00      	cmp	r5, #0
 800828c:	4606      	mov	r6, r0
 800828e:	db01      	blt.n	8008294 <_malloc_r+0x1c>
 8008290:	42a9      	cmp	r1, r5
 8008292:	d904      	bls.n	800829e <_malloc_r+0x26>
 8008294:	230c      	movs	r3, #12
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	2000      	movs	r0, #0
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008374 <_malloc_r+0xfc>
 80082a2:	f000 f87b 	bl	800839c <__malloc_lock>
 80082a6:	f8d8 3000 	ldr.w	r3, [r8]
 80082aa:	461c      	mov	r4, r3
 80082ac:	bb44      	cbnz	r4, 8008300 <_malloc_r+0x88>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff ffbf 	bl	8008234 <sbrk_aligned>
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	4604      	mov	r4, r0
 80082ba:	d158      	bne.n	800836e <_malloc_r+0xf6>
 80082bc:	f8d8 4000 	ldr.w	r4, [r8]
 80082c0:	4627      	mov	r7, r4
 80082c2:	2f00      	cmp	r7, #0
 80082c4:	d143      	bne.n	800834e <_malloc_r+0xd6>
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	d04b      	beq.n	8008362 <_malloc_r+0xea>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4639      	mov	r1, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	eb04 0903 	add.w	r9, r4, r3
 80082d4:	f000 ff3a 	bl	800914c <_sbrk_r>
 80082d8:	4581      	cmp	r9, r0
 80082da:	d142      	bne.n	8008362 <_malloc_r+0xea>
 80082dc:	6821      	ldr	r1, [r4, #0]
 80082de:	4630      	mov	r0, r6
 80082e0:	1a6d      	subs	r5, r5, r1
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7ff ffa6 	bl	8008234 <sbrk_aligned>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d03a      	beq.n	8008362 <_malloc_r+0xea>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	442b      	add	r3, r5
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	f8d8 3000 	ldr.w	r3, [r8]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	bb62      	cbnz	r2, 8008354 <_malloc_r+0xdc>
 80082fa:	f8c8 7000 	str.w	r7, [r8]
 80082fe:	e00f      	b.n	8008320 <_malloc_r+0xa8>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	1b52      	subs	r2, r2, r5
 8008304:	d420      	bmi.n	8008348 <_malloc_r+0xd0>
 8008306:	2a0b      	cmp	r2, #11
 8008308:	d917      	bls.n	800833a <_malloc_r+0xc2>
 800830a:	1961      	adds	r1, r4, r5
 800830c:	42a3      	cmp	r3, r4
 800830e:	6025      	str	r5, [r4, #0]
 8008310:	bf18      	it	ne
 8008312:	6059      	strne	r1, [r3, #4]
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	bf08      	it	eq
 8008318:	f8c8 1000 	streq.w	r1, [r8]
 800831c:	5162      	str	r2, [r4, r5]
 800831e:	604b      	str	r3, [r1, #4]
 8008320:	4630      	mov	r0, r6
 8008322:	f000 f841 	bl	80083a8 <__malloc_unlock>
 8008326:	f104 000b 	add.w	r0, r4, #11
 800832a:	1d23      	adds	r3, r4, #4
 800832c:	f020 0007 	bic.w	r0, r0, #7
 8008330:	1ac2      	subs	r2, r0, r3
 8008332:	bf1c      	itt	ne
 8008334:	1a1b      	subne	r3, r3, r0
 8008336:	50a3      	strne	r3, [r4, r2]
 8008338:	e7af      	b.n	800829a <_malloc_r+0x22>
 800833a:	6862      	ldr	r2, [r4, #4]
 800833c:	42a3      	cmp	r3, r4
 800833e:	bf0c      	ite	eq
 8008340:	f8c8 2000 	streq.w	r2, [r8]
 8008344:	605a      	strne	r2, [r3, #4]
 8008346:	e7eb      	b.n	8008320 <_malloc_r+0xa8>
 8008348:	4623      	mov	r3, r4
 800834a:	6864      	ldr	r4, [r4, #4]
 800834c:	e7ae      	b.n	80082ac <_malloc_r+0x34>
 800834e:	463c      	mov	r4, r7
 8008350:	687f      	ldr	r7, [r7, #4]
 8008352:	e7b6      	b.n	80082c2 <_malloc_r+0x4a>
 8008354:	461a      	mov	r2, r3
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	42a3      	cmp	r3, r4
 800835a:	d1fb      	bne.n	8008354 <_malloc_r+0xdc>
 800835c:	2300      	movs	r3, #0
 800835e:	6053      	str	r3, [r2, #4]
 8008360:	e7de      	b.n	8008320 <_malloc_r+0xa8>
 8008362:	230c      	movs	r3, #12
 8008364:	4630      	mov	r0, r6
 8008366:	6033      	str	r3, [r6, #0]
 8008368:	f000 f81e 	bl	80083a8 <__malloc_unlock>
 800836c:	e794      	b.n	8008298 <_malloc_r+0x20>
 800836e:	6005      	str	r5, [r0, #0]
 8008370:	e7d6      	b.n	8008320 <_malloc_r+0xa8>
 8008372:	bf00      	nop
 8008374:	20000a1c 	.word	0x20000a1c

08008378 <__ascii_mbtowc>:
 8008378:	b082      	sub	sp, #8
 800837a:	b901      	cbnz	r1, 800837e <__ascii_mbtowc+0x6>
 800837c:	a901      	add	r1, sp, #4
 800837e:	b142      	cbz	r2, 8008392 <__ascii_mbtowc+0x1a>
 8008380:	b14b      	cbz	r3, 8008396 <__ascii_mbtowc+0x1e>
 8008382:	7813      	ldrb	r3, [r2, #0]
 8008384:	600b      	str	r3, [r1, #0]
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	1e10      	subs	r0, r2, #0
 800838a:	bf18      	it	ne
 800838c:	2001      	movne	r0, #1
 800838e:	b002      	add	sp, #8
 8008390:	4770      	bx	lr
 8008392:	4610      	mov	r0, r2
 8008394:	e7fb      	b.n	800838e <__ascii_mbtowc+0x16>
 8008396:	f06f 0001 	mvn.w	r0, #1
 800839a:	e7f8      	b.n	800838e <__ascii_mbtowc+0x16>

0800839c <__malloc_lock>:
 800839c:	4801      	ldr	r0, [pc, #4]	@ (80083a4 <__malloc_lock+0x8>)
 800839e:	f7fe bd4a 	b.w	8006e36 <__retarget_lock_acquire_recursive>
 80083a2:	bf00      	nop
 80083a4:	20000a14 	.word	0x20000a14

080083a8 <__malloc_unlock>:
 80083a8:	4801      	ldr	r0, [pc, #4]	@ (80083b0 <__malloc_unlock+0x8>)
 80083aa:	f7fe bd45 	b.w	8006e38 <__retarget_lock_release_recursive>
 80083ae:	bf00      	nop
 80083b0:	20000a14 	.word	0x20000a14

080083b4 <_Balloc>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	69c6      	ldr	r6, [r0, #28]
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	b976      	cbnz	r6, 80083dc <_Balloc+0x28>
 80083be:	2010      	movs	r0, #16
 80083c0:	f7ff ff30 	bl	8008224 <malloc>
 80083c4:	4602      	mov	r2, r0
 80083c6:	61e0      	str	r0, [r4, #28]
 80083c8:	b920      	cbnz	r0, 80083d4 <_Balloc+0x20>
 80083ca:	216b      	movs	r1, #107	@ 0x6b
 80083cc:	4b17      	ldr	r3, [pc, #92]	@ (800842c <_Balloc+0x78>)
 80083ce:	4818      	ldr	r0, [pc, #96]	@ (8008430 <_Balloc+0x7c>)
 80083d0:	f000 fecc 	bl	800916c <__assert_func>
 80083d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d8:	6006      	str	r6, [r0, #0]
 80083da:	60c6      	str	r6, [r0, #12]
 80083dc:	69e6      	ldr	r6, [r4, #28]
 80083de:	68f3      	ldr	r3, [r6, #12]
 80083e0:	b183      	cbz	r3, 8008404 <_Balloc+0x50>
 80083e2:	69e3      	ldr	r3, [r4, #28]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ea:	b9b8      	cbnz	r0, 800841c <_Balloc+0x68>
 80083ec:	2101      	movs	r1, #1
 80083ee:	fa01 f605 	lsl.w	r6, r1, r5
 80083f2:	1d72      	adds	r2, r6, #5
 80083f4:	4620      	mov	r0, r4
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	f000 fed6 	bl	80091a8 <_calloc_r>
 80083fc:	b160      	cbz	r0, 8008418 <_Balloc+0x64>
 80083fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008402:	e00e      	b.n	8008422 <_Balloc+0x6e>
 8008404:	2221      	movs	r2, #33	@ 0x21
 8008406:	2104      	movs	r1, #4
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fecd 	bl	80091a8 <_calloc_r>
 800840e:	69e3      	ldr	r3, [r4, #28]
 8008410:	60f0      	str	r0, [r6, #12]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e4      	bne.n	80083e2 <_Balloc+0x2e>
 8008418:	2000      	movs	r0, #0
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	6802      	ldr	r2, [r0, #0]
 800841e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008422:	2300      	movs	r3, #0
 8008424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008428:	e7f7      	b.n	800841a <_Balloc+0x66>
 800842a:	bf00      	nop
 800842c:	0800a442 	.word	0x0800a442
 8008430:	0800a522 	.word	0x0800a522

08008434 <_Bfree>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	69c6      	ldr	r6, [r0, #28]
 8008438:	4605      	mov	r5, r0
 800843a:	460c      	mov	r4, r1
 800843c:	b976      	cbnz	r6, 800845c <_Bfree+0x28>
 800843e:	2010      	movs	r0, #16
 8008440:	f7ff fef0 	bl	8008224 <malloc>
 8008444:	4602      	mov	r2, r0
 8008446:	61e8      	str	r0, [r5, #28]
 8008448:	b920      	cbnz	r0, 8008454 <_Bfree+0x20>
 800844a:	218f      	movs	r1, #143	@ 0x8f
 800844c:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <_Bfree+0x3c>)
 800844e:	4809      	ldr	r0, [pc, #36]	@ (8008474 <_Bfree+0x40>)
 8008450:	f000 fe8c 	bl	800916c <__assert_func>
 8008454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008458:	6006      	str	r6, [r0, #0]
 800845a:	60c6      	str	r6, [r0, #12]
 800845c:	b13c      	cbz	r4, 800846e <_Bfree+0x3a>
 800845e:	69eb      	ldr	r3, [r5, #28]
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008468:	6021      	str	r1, [r4, #0]
 800846a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	0800a442 	.word	0x0800a442
 8008474:	0800a522 	.word	0x0800a522

08008478 <__multadd>:
 8008478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800847c:	4607      	mov	r7, r0
 800847e:	460c      	mov	r4, r1
 8008480:	461e      	mov	r6, r3
 8008482:	2000      	movs	r0, #0
 8008484:	690d      	ldr	r5, [r1, #16]
 8008486:	f101 0c14 	add.w	ip, r1, #20
 800848a:	f8dc 3000 	ldr.w	r3, [ip]
 800848e:	3001      	adds	r0, #1
 8008490:	b299      	uxth	r1, r3
 8008492:	fb02 6101 	mla	r1, r2, r1, r6
 8008496:	0c1e      	lsrs	r6, r3, #16
 8008498:	0c0b      	lsrs	r3, r1, #16
 800849a:	fb02 3306 	mla	r3, r2, r6, r3
 800849e:	b289      	uxth	r1, r1
 80084a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084a4:	4285      	cmp	r5, r0
 80084a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084aa:	f84c 1b04 	str.w	r1, [ip], #4
 80084ae:	dcec      	bgt.n	800848a <__multadd+0x12>
 80084b0:	b30e      	cbz	r6, 80084f6 <__multadd+0x7e>
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	42ab      	cmp	r3, r5
 80084b6:	dc19      	bgt.n	80084ec <__multadd+0x74>
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	4638      	mov	r0, r7
 80084bc:	3101      	adds	r1, #1
 80084be:	f7ff ff79 	bl	80083b4 <_Balloc>
 80084c2:	4680      	mov	r8, r0
 80084c4:	b928      	cbnz	r0, 80084d2 <__multadd+0x5a>
 80084c6:	4602      	mov	r2, r0
 80084c8:	21ba      	movs	r1, #186	@ 0xba
 80084ca:	4b0c      	ldr	r3, [pc, #48]	@ (80084fc <__multadd+0x84>)
 80084cc:	480c      	ldr	r0, [pc, #48]	@ (8008500 <__multadd+0x88>)
 80084ce:	f000 fe4d 	bl	800916c <__assert_func>
 80084d2:	6922      	ldr	r2, [r4, #16]
 80084d4:	f104 010c 	add.w	r1, r4, #12
 80084d8:	3202      	adds	r2, #2
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	300c      	adds	r0, #12
 80084de:	f7fe fcba 	bl	8006e56 <memcpy>
 80084e2:	4621      	mov	r1, r4
 80084e4:	4638      	mov	r0, r7
 80084e6:	f7ff ffa5 	bl	8008434 <_Bfree>
 80084ea:	4644      	mov	r4, r8
 80084ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084f0:	3501      	adds	r5, #1
 80084f2:	615e      	str	r6, [r3, #20]
 80084f4:	6125      	str	r5, [r4, #16]
 80084f6:	4620      	mov	r0, r4
 80084f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084fc:	0800a4b1 	.word	0x0800a4b1
 8008500:	0800a522 	.word	0x0800a522

08008504 <__s2b>:
 8008504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	4615      	mov	r5, r2
 800850a:	2209      	movs	r2, #9
 800850c:	461f      	mov	r7, r3
 800850e:	3308      	adds	r3, #8
 8008510:	460c      	mov	r4, r1
 8008512:	fb93 f3f2 	sdiv	r3, r3, r2
 8008516:	4606      	mov	r6, r0
 8008518:	2201      	movs	r2, #1
 800851a:	2100      	movs	r1, #0
 800851c:	429a      	cmp	r2, r3
 800851e:	db09      	blt.n	8008534 <__s2b+0x30>
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff ff47 	bl	80083b4 <_Balloc>
 8008526:	b940      	cbnz	r0, 800853a <__s2b+0x36>
 8008528:	4602      	mov	r2, r0
 800852a:	21d3      	movs	r1, #211	@ 0xd3
 800852c:	4b18      	ldr	r3, [pc, #96]	@ (8008590 <__s2b+0x8c>)
 800852e:	4819      	ldr	r0, [pc, #100]	@ (8008594 <__s2b+0x90>)
 8008530:	f000 fe1c 	bl	800916c <__assert_func>
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	3101      	adds	r1, #1
 8008538:	e7f0      	b.n	800851c <__s2b+0x18>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	2d09      	cmp	r5, #9
 800853e:	6143      	str	r3, [r0, #20]
 8008540:	f04f 0301 	mov.w	r3, #1
 8008544:	6103      	str	r3, [r0, #16]
 8008546:	dd16      	ble.n	8008576 <__s2b+0x72>
 8008548:	f104 0909 	add.w	r9, r4, #9
 800854c:	46c8      	mov	r8, r9
 800854e:	442c      	add	r4, r5
 8008550:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008554:	4601      	mov	r1, r0
 8008556:	220a      	movs	r2, #10
 8008558:	4630      	mov	r0, r6
 800855a:	3b30      	subs	r3, #48	@ 0x30
 800855c:	f7ff ff8c 	bl	8008478 <__multadd>
 8008560:	45a0      	cmp	r8, r4
 8008562:	d1f5      	bne.n	8008550 <__s2b+0x4c>
 8008564:	f1a5 0408 	sub.w	r4, r5, #8
 8008568:	444c      	add	r4, r9
 800856a:	1b2d      	subs	r5, r5, r4
 800856c:	1963      	adds	r3, r4, r5
 800856e:	42bb      	cmp	r3, r7
 8008570:	db04      	blt.n	800857c <__s2b+0x78>
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	2509      	movs	r5, #9
 8008578:	340a      	adds	r4, #10
 800857a:	e7f6      	b.n	800856a <__s2b+0x66>
 800857c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008580:	4601      	mov	r1, r0
 8008582:	220a      	movs	r2, #10
 8008584:	4630      	mov	r0, r6
 8008586:	3b30      	subs	r3, #48	@ 0x30
 8008588:	f7ff ff76 	bl	8008478 <__multadd>
 800858c:	e7ee      	b.n	800856c <__s2b+0x68>
 800858e:	bf00      	nop
 8008590:	0800a4b1 	.word	0x0800a4b1
 8008594:	0800a522 	.word	0x0800a522

08008598 <__hi0bits>:
 8008598:	4603      	mov	r3, r0
 800859a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800859e:	bf3a      	itte	cc
 80085a0:	0403      	lslcc	r3, r0, #16
 80085a2:	2010      	movcc	r0, #16
 80085a4:	2000      	movcs	r0, #0
 80085a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085aa:	bf3c      	itt	cc
 80085ac:	021b      	lslcc	r3, r3, #8
 80085ae:	3008      	addcc	r0, #8
 80085b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b4:	bf3c      	itt	cc
 80085b6:	011b      	lslcc	r3, r3, #4
 80085b8:	3004      	addcc	r0, #4
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085be:	bf3c      	itt	cc
 80085c0:	009b      	lslcc	r3, r3, #2
 80085c2:	3002      	addcc	r0, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	db05      	blt.n	80085d4 <__hi0bits+0x3c>
 80085c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085cc:	f100 0001 	add.w	r0, r0, #1
 80085d0:	bf08      	it	eq
 80085d2:	2020      	moveq	r0, #32
 80085d4:	4770      	bx	lr

080085d6 <__lo0bits>:
 80085d6:	6803      	ldr	r3, [r0, #0]
 80085d8:	4602      	mov	r2, r0
 80085da:	f013 0007 	ands.w	r0, r3, #7
 80085de:	d00b      	beq.n	80085f8 <__lo0bits+0x22>
 80085e0:	07d9      	lsls	r1, r3, #31
 80085e2:	d421      	bmi.n	8008628 <__lo0bits+0x52>
 80085e4:	0798      	lsls	r0, r3, #30
 80085e6:	bf49      	itett	mi
 80085e8:	085b      	lsrmi	r3, r3, #1
 80085ea:	089b      	lsrpl	r3, r3, #2
 80085ec:	2001      	movmi	r0, #1
 80085ee:	6013      	strmi	r3, [r2, #0]
 80085f0:	bf5c      	itt	pl
 80085f2:	2002      	movpl	r0, #2
 80085f4:	6013      	strpl	r3, [r2, #0]
 80085f6:	4770      	bx	lr
 80085f8:	b299      	uxth	r1, r3
 80085fa:	b909      	cbnz	r1, 8008600 <__lo0bits+0x2a>
 80085fc:	2010      	movs	r0, #16
 80085fe:	0c1b      	lsrs	r3, r3, #16
 8008600:	b2d9      	uxtb	r1, r3
 8008602:	b909      	cbnz	r1, 8008608 <__lo0bits+0x32>
 8008604:	3008      	adds	r0, #8
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	0719      	lsls	r1, r3, #28
 800860a:	bf04      	itt	eq
 800860c:	091b      	lsreq	r3, r3, #4
 800860e:	3004      	addeq	r0, #4
 8008610:	0799      	lsls	r1, r3, #30
 8008612:	bf04      	itt	eq
 8008614:	089b      	lsreq	r3, r3, #2
 8008616:	3002      	addeq	r0, #2
 8008618:	07d9      	lsls	r1, r3, #31
 800861a:	d403      	bmi.n	8008624 <__lo0bits+0x4e>
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	f100 0001 	add.w	r0, r0, #1
 8008622:	d003      	beq.n	800862c <__lo0bits+0x56>
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	4770      	bx	lr
 8008628:	2000      	movs	r0, #0
 800862a:	4770      	bx	lr
 800862c:	2020      	movs	r0, #32
 800862e:	4770      	bx	lr

08008630 <__i2b>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	2101      	movs	r1, #1
 8008636:	f7ff febd 	bl	80083b4 <_Balloc>
 800863a:	4602      	mov	r2, r0
 800863c:	b928      	cbnz	r0, 800864a <__i2b+0x1a>
 800863e:	f240 1145 	movw	r1, #325	@ 0x145
 8008642:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <__i2b+0x24>)
 8008644:	4804      	ldr	r0, [pc, #16]	@ (8008658 <__i2b+0x28>)
 8008646:	f000 fd91 	bl	800916c <__assert_func>
 800864a:	2301      	movs	r3, #1
 800864c:	6144      	str	r4, [r0, #20]
 800864e:	6103      	str	r3, [r0, #16]
 8008650:	bd10      	pop	{r4, pc}
 8008652:	bf00      	nop
 8008654:	0800a4b1 	.word	0x0800a4b1
 8008658:	0800a522 	.word	0x0800a522

0800865c <__multiply>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4614      	mov	r4, r2
 8008662:	690a      	ldr	r2, [r1, #16]
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	460f      	mov	r7, r1
 8008668:	429a      	cmp	r2, r3
 800866a:	bfa2      	ittt	ge
 800866c:	4623      	movge	r3, r4
 800866e:	460c      	movge	r4, r1
 8008670:	461f      	movge	r7, r3
 8008672:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008676:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	eb0a 0609 	add.w	r6, sl, r9
 8008682:	42b3      	cmp	r3, r6
 8008684:	b085      	sub	sp, #20
 8008686:	bfb8      	it	lt
 8008688:	3101      	addlt	r1, #1
 800868a:	f7ff fe93 	bl	80083b4 <_Balloc>
 800868e:	b930      	cbnz	r0, 800869e <__multiply+0x42>
 8008690:	4602      	mov	r2, r0
 8008692:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008696:	4b43      	ldr	r3, [pc, #268]	@ (80087a4 <__multiply+0x148>)
 8008698:	4843      	ldr	r0, [pc, #268]	@ (80087a8 <__multiply+0x14c>)
 800869a:	f000 fd67 	bl	800916c <__assert_func>
 800869e:	f100 0514 	add.w	r5, r0, #20
 80086a2:	462b      	mov	r3, r5
 80086a4:	2200      	movs	r2, #0
 80086a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086aa:	4543      	cmp	r3, r8
 80086ac:	d321      	bcc.n	80086f2 <__multiply+0x96>
 80086ae:	f107 0114 	add.w	r1, r7, #20
 80086b2:	f104 0214 	add.w	r2, r4, #20
 80086b6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086ba:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	1b13      	subs	r3, r2, r4
 80086c2:	3b15      	subs	r3, #21
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	3304      	adds	r3, #4
 80086ca:	f104 0715 	add.w	r7, r4, #21
 80086ce:	42ba      	cmp	r2, r7
 80086d0:	bf38      	it	cc
 80086d2:	2304      	movcc	r3, #4
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	9b02      	ldr	r3, [sp, #8]
 80086d8:	9103      	str	r1, [sp, #12]
 80086da:	428b      	cmp	r3, r1
 80086dc:	d80c      	bhi.n	80086f8 <__multiply+0x9c>
 80086de:	2e00      	cmp	r6, #0
 80086e0:	dd03      	ble.n	80086ea <__multiply+0x8e>
 80086e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d05a      	beq.n	80087a0 <__multiply+0x144>
 80086ea:	6106      	str	r6, [r0, #16]
 80086ec:	b005      	add	sp, #20
 80086ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f2:	f843 2b04 	str.w	r2, [r3], #4
 80086f6:	e7d8      	b.n	80086aa <__multiply+0x4e>
 80086f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80086fc:	f1ba 0f00 	cmp.w	sl, #0
 8008700:	d023      	beq.n	800874a <__multiply+0xee>
 8008702:	46a9      	mov	r9, r5
 8008704:	f04f 0c00 	mov.w	ip, #0
 8008708:	f104 0e14 	add.w	lr, r4, #20
 800870c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008710:	f8d9 3000 	ldr.w	r3, [r9]
 8008714:	fa1f fb87 	uxth.w	fp, r7
 8008718:	b29b      	uxth	r3, r3
 800871a:	fb0a 330b 	mla	r3, sl, fp, r3
 800871e:	4463      	add	r3, ip
 8008720:	f8d9 c000 	ldr.w	ip, [r9]
 8008724:	0c3f      	lsrs	r7, r7, #16
 8008726:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800872a:	fb0a c707 	mla	r7, sl, r7, ip
 800872e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008732:	b29b      	uxth	r3, r3
 8008734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008738:	4572      	cmp	r2, lr
 800873a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800873e:	f849 3b04 	str.w	r3, [r9], #4
 8008742:	d8e3      	bhi.n	800870c <__multiply+0xb0>
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	f845 c003 	str.w	ip, [r5, r3]
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	3104      	adds	r1, #4
 800874e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008752:	f1b9 0f00 	cmp.w	r9, #0
 8008756:	d021      	beq.n	800879c <__multiply+0x140>
 8008758:	46ae      	mov	lr, r5
 800875a:	f04f 0a00 	mov.w	sl, #0
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	f104 0c14 	add.w	ip, r4, #20
 8008764:	f8bc b000 	ldrh.w	fp, [ip]
 8008768:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800876c:	b29b      	uxth	r3, r3
 800876e:	fb09 770b 	mla	r7, r9, fp, r7
 8008772:	4457      	add	r7, sl
 8008774:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008778:	f84e 3b04 	str.w	r3, [lr], #4
 800877c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008780:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008784:	f8be 3000 	ldrh.w	r3, [lr]
 8008788:	4562      	cmp	r2, ip
 800878a:	fb09 330a 	mla	r3, r9, sl, r3
 800878e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008792:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008796:	d8e5      	bhi.n	8008764 <__multiply+0x108>
 8008798:	9f01      	ldr	r7, [sp, #4]
 800879a:	51eb      	str	r3, [r5, r7]
 800879c:	3504      	adds	r5, #4
 800879e:	e79a      	b.n	80086d6 <__multiply+0x7a>
 80087a0:	3e01      	subs	r6, #1
 80087a2:	e79c      	b.n	80086de <__multiply+0x82>
 80087a4:	0800a4b1 	.word	0x0800a4b1
 80087a8:	0800a522 	.word	0x0800a522

080087ac <__pow5mult>:
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b0:	4615      	mov	r5, r2
 80087b2:	f012 0203 	ands.w	r2, r2, #3
 80087b6:	4607      	mov	r7, r0
 80087b8:	460e      	mov	r6, r1
 80087ba:	d007      	beq.n	80087cc <__pow5mult+0x20>
 80087bc:	4c25      	ldr	r4, [pc, #148]	@ (8008854 <__pow5mult+0xa8>)
 80087be:	3a01      	subs	r2, #1
 80087c0:	2300      	movs	r3, #0
 80087c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087c6:	f7ff fe57 	bl	8008478 <__multadd>
 80087ca:	4606      	mov	r6, r0
 80087cc:	10ad      	asrs	r5, r5, #2
 80087ce:	d03d      	beq.n	800884c <__pow5mult+0xa0>
 80087d0:	69fc      	ldr	r4, [r7, #28]
 80087d2:	b97c      	cbnz	r4, 80087f4 <__pow5mult+0x48>
 80087d4:	2010      	movs	r0, #16
 80087d6:	f7ff fd25 	bl	8008224 <malloc>
 80087da:	4602      	mov	r2, r0
 80087dc:	61f8      	str	r0, [r7, #28]
 80087de:	b928      	cbnz	r0, 80087ec <__pow5mult+0x40>
 80087e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008858 <__pow5mult+0xac>)
 80087e6:	481d      	ldr	r0, [pc, #116]	@ (800885c <__pow5mult+0xb0>)
 80087e8:	f000 fcc0 	bl	800916c <__assert_func>
 80087ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087f0:	6004      	str	r4, [r0, #0]
 80087f2:	60c4      	str	r4, [r0, #12]
 80087f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087fc:	b94c      	cbnz	r4, 8008812 <__pow5mult+0x66>
 80087fe:	f240 2171 	movw	r1, #625	@ 0x271
 8008802:	4638      	mov	r0, r7
 8008804:	f7ff ff14 	bl	8008630 <__i2b>
 8008808:	2300      	movs	r3, #0
 800880a:	4604      	mov	r4, r0
 800880c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	f04f 0900 	mov.w	r9, #0
 8008816:	07eb      	lsls	r3, r5, #31
 8008818:	d50a      	bpl.n	8008830 <__pow5mult+0x84>
 800881a:	4631      	mov	r1, r6
 800881c:	4622      	mov	r2, r4
 800881e:	4638      	mov	r0, r7
 8008820:	f7ff ff1c 	bl	800865c <__multiply>
 8008824:	4680      	mov	r8, r0
 8008826:	4631      	mov	r1, r6
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff fe03 	bl	8008434 <_Bfree>
 800882e:	4646      	mov	r6, r8
 8008830:	106d      	asrs	r5, r5, #1
 8008832:	d00b      	beq.n	800884c <__pow5mult+0xa0>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	b938      	cbnz	r0, 8008848 <__pow5mult+0x9c>
 8008838:	4622      	mov	r2, r4
 800883a:	4621      	mov	r1, r4
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff ff0d 	bl	800865c <__multiply>
 8008842:	6020      	str	r0, [r4, #0]
 8008844:	f8c0 9000 	str.w	r9, [r0]
 8008848:	4604      	mov	r4, r0
 800884a:	e7e4      	b.n	8008816 <__pow5mult+0x6a>
 800884c:	4630      	mov	r0, r6
 800884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008852:	bf00      	nop
 8008854:	0800a57c 	.word	0x0800a57c
 8008858:	0800a442 	.word	0x0800a442
 800885c:	0800a522 	.word	0x0800a522

08008860 <__lshift>:
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	460c      	mov	r4, r1
 8008866:	4607      	mov	r7, r0
 8008868:	4691      	mov	r9, r2
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	6849      	ldr	r1, [r1, #4]
 800886e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008872:	68a3      	ldr	r3, [r4, #8]
 8008874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008878:	f108 0601 	add.w	r6, r8, #1
 800887c:	42b3      	cmp	r3, r6
 800887e:	db0b      	blt.n	8008898 <__lshift+0x38>
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff fd97 	bl	80083b4 <_Balloc>
 8008886:	4605      	mov	r5, r0
 8008888:	b948      	cbnz	r0, 800889e <__lshift+0x3e>
 800888a:	4602      	mov	r2, r0
 800888c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008890:	4b27      	ldr	r3, [pc, #156]	@ (8008930 <__lshift+0xd0>)
 8008892:	4828      	ldr	r0, [pc, #160]	@ (8008934 <__lshift+0xd4>)
 8008894:	f000 fc6a 	bl	800916c <__assert_func>
 8008898:	3101      	adds	r1, #1
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	e7ee      	b.n	800887c <__lshift+0x1c>
 800889e:	2300      	movs	r3, #0
 80088a0:	f100 0114 	add.w	r1, r0, #20
 80088a4:	f100 0210 	add.w	r2, r0, #16
 80088a8:	4618      	mov	r0, r3
 80088aa:	4553      	cmp	r3, sl
 80088ac:	db33      	blt.n	8008916 <__lshift+0xb6>
 80088ae:	6920      	ldr	r0, [r4, #16]
 80088b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088b4:	f104 0314 	add.w	r3, r4, #20
 80088b8:	f019 091f 	ands.w	r9, r9, #31
 80088bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088c4:	d02b      	beq.n	800891e <__lshift+0xbe>
 80088c6:	468a      	mov	sl, r1
 80088c8:	2200      	movs	r2, #0
 80088ca:	f1c9 0e20 	rsb	lr, r9, #32
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	fa00 f009 	lsl.w	r0, r0, r9
 80088d4:	4310      	orrs	r0, r2
 80088d6:	f84a 0b04 	str.w	r0, [sl], #4
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	459c      	cmp	ip, r3
 80088e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088e4:	d8f3      	bhi.n	80088ce <__lshift+0x6e>
 80088e6:	ebac 0304 	sub.w	r3, ip, r4
 80088ea:	3b15      	subs	r3, #21
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	3304      	adds	r3, #4
 80088f2:	f104 0015 	add.w	r0, r4, #21
 80088f6:	4584      	cmp	ip, r0
 80088f8:	bf38      	it	cc
 80088fa:	2304      	movcc	r3, #4
 80088fc:	50ca      	str	r2, [r1, r3]
 80088fe:	b10a      	cbz	r2, 8008904 <__lshift+0xa4>
 8008900:	f108 0602 	add.w	r6, r8, #2
 8008904:	3e01      	subs	r6, #1
 8008906:	4638      	mov	r0, r7
 8008908:	4621      	mov	r1, r4
 800890a:	612e      	str	r6, [r5, #16]
 800890c:	f7ff fd92 	bl	8008434 <_Bfree>
 8008910:	4628      	mov	r0, r5
 8008912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008916:	f842 0f04 	str.w	r0, [r2, #4]!
 800891a:	3301      	adds	r3, #1
 800891c:	e7c5      	b.n	80088aa <__lshift+0x4a>
 800891e:	3904      	subs	r1, #4
 8008920:	f853 2b04 	ldr.w	r2, [r3], #4
 8008924:	459c      	cmp	ip, r3
 8008926:	f841 2f04 	str.w	r2, [r1, #4]!
 800892a:	d8f9      	bhi.n	8008920 <__lshift+0xc0>
 800892c:	e7ea      	b.n	8008904 <__lshift+0xa4>
 800892e:	bf00      	nop
 8008930:	0800a4b1 	.word	0x0800a4b1
 8008934:	0800a522 	.word	0x0800a522

08008938 <__mcmp>:
 8008938:	4603      	mov	r3, r0
 800893a:	690a      	ldr	r2, [r1, #16]
 800893c:	6900      	ldr	r0, [r0, #16]
 800893e:	b530      	push	{r4, r5, lr}
 8008940:	1a80      	subs	r0, r0, r2
 8008942:	d10e      	bne.n	8008962 <__mcmp+0x2a>
 8008944:	3314      	adds	r3, #20
 8008946:	3114      	adds	r1, #20
 8008948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800894c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008958:	4295      	cmp	r5, r2
 800895a:	d003      	beq.n	8008964 <__mcmp+0x2c>
 800895c:	d205      	bcs.n	800896a <__mcmp+0x32>
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	bd30      	pop	{r4, r5, pc}
 8008964:	42a3      	cmp	r3, r4
 8008966:	d3f3      	bcc.n	8008950 <__mcmp+0x18>
 8008968:	e7fb      	b.n	8008962 <__mcmp+0x2a>
 800896a:	2001      	movs	r0, #1
 800896c:	e7f9      	b.n	8008962 <__mcmp+0x2a>
	...

08008970 <__mdiff>:
 8008970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4689      	mov	r9, r1
 8008976:	4606      	mov	r6, r0
 8008978:	4611      	mov	r1, r2
 800897a:	4648      	mov	r0, r9
 800897c:	4614      	mov	r4, r2
 800897e:	f7ff ffdb 	bl	8008938 <__mcmp>
 8008982:	1e05      	subs	r5, r0, #0
 8008984:	d112      	bne.n	80089ac <__mdiff+0x3c>
 8008986:	4629      	mov	r1, r5
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff fd13 	bl	80083b4 <_Balloc>
 800898e:	4602      	mov	r2, r0
 8008990:	b928      	cbnz	r0, 800899e <__mdiff+0x2e>
 8008992:	f240 2137 	movw	r1, #567	@ 0x237
 8008996:	4b3e      	ldr	r3, [pc, #248]	@ (8008a90 <__mdiff+0x120>)
 8008998:	483e      	ldr	r0, [pc, #248]	@ (8008a94 <__mdiff+0x124>)
 800899a:	f000 fbe7 	bl	800916c <__assert_func>
 800899e:	2301      	movs	r3, #1
 80089a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089a4:	4610      	mov	r0, r2
 80089a6:	b003      	add	sp, #12
 80089a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	bfbc      	itt	lt
 80089ae:	464b      	movlt	r3, r9
 80089b0:	46a1      	movlt	r9, r4
 80089b2:	4630      	mov	r0, r6
 80089b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089b8:	bfba      	itte	lt
 80089ba:	461c      	movlt	r4, r3
 80089bc:	2501      	movlt	r5, #1
 80089be:	2500      	movge	r5, #0
 80089c0:	f7ff fcf8 	bl	80083b4 <_Balloc>
 80089c4:	4602      	mov	r2, r0
 80089c6:	b918      	cbnz	r0, 80089d0 <__mdiff+0x60>
 80089c8:	f240 2145 	movw	r1, #581	@ 0x245
 80089cc:	4b30      	ldr	r3, [pc, #192]	@ (8008a90 <__mdiff+0x120>)
 80089ce:	e7e3      	b.n	8008998 <__mdiff+0x28>
 80089d0:	f100 0b14 	add.w	fp, r0, #20
 80089d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089d8:	f109 0310 	add.w	r3, r9, #16
 80089dc:	60c5      	str	r5, [r0, #12]
 80089de:	f04f 0c00 	mov.w	ip, #0
 80089e2:	f109 0514 	add.w	r5, r9, #20
 80089e6:	46d9      	mov	r9, fp
 80089e8:	6926      	ldr	r6, [r4, #16]
 80089ea:	f104 0e14 	add.w	lr, r4, #20
 80089ee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a02:	b281      	uxth	r1, r0
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	fa1f f38a 	uxth.w	r3, sl
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	0c00      	lsrs	r0, r0, #16
 8008a0e:	4463      	add	r3, ip
 8008a10:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a14:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a1e:	4576      	cmp	r6, lr
 8008a20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a24:	f849 3b04 	str.w	r3, [r9], #4
 8008a28:	d8e6      	bhi.n	80089f8 <__mdiff+0x88>
 8008a2a:	1b33      	subs	r3, r6, r4
 8008a2c:	3b15      	subs	r3, #21
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	3415      	adds	r4, #21
 8008a34:	3304      	adds	r3, #4
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	bf38      	it	cc
 8008a3a:	2304      	movcc	r3, #4
 8008a3c:	441d      	add	r5, r3
 8008a3e:	445b      	add	r3, fp
 8008a40:	461e      	mov	r6, r3
 8008a42:	462c      	mov	r4, r5
 8008a44:	4544      	cmp	r4, r8
 8008a46:	d30e      	bcc.n	8008a66 <__mdiff+0xf6>
 8008a48:	f108 0103 	add.w	r1, r8, #3
 8008a4c:	1b49      	subs	r1, r1, r5
 8008a4e:	f021 0103 	bic.w	r1, r1, #3
 8008a52:	3d03      	subs	r5, #3
 8008a54:	45a8      	cmp	r8, r5
 8008a56:	bf38      	it	cc
 8008a58:	2100      	movcc	r1, #0
 8008a5a:	440b      	add	r3, r1
 8008a5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a60:	b199      	cbz	r1, 8008a8a <__mdiff+0x11a>
 8008a62:	6117      	str	r7, [r2, #16]
 8008a64:	e79e      	b.n	80089a4 <__mdiff+0x34>
 8008a66:	46e6      	mov	lr, ip
 8008a68:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a6c:	fa1f fc81 	uxth.w	ip, r1
 8008a70:	44f4      	add	ip, lr
 8008a72:	0c08      	lsrs	r0, r1, #16
 8008a74:	4471      	add	r1, lr
 8008a76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a7a:	b289      	uxth	r1, r1
 8008a7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a84:	f846 1b04 	str.w	r1, [r6], #4
 8008a88:	e7dc      	b.n	8008a44 <__mdiff+0xd4>
 8008a8a:	3f01      	subs	r7, #1
 8008a8c:	e7e6      	b.n	8008a5c <__mdiff+0xec>
 8008a8e:	bf00      	nop
 8008a90:	0800a4b1 	.word	0x0800a4b1
 8008a94:	0800a522 	.word	0x0800a522

08008a98 <__ulp>:
 8008a98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <__ulp+0x3c>)
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc08      	bgt.n	8008ab6 <__ulp+0x1e>
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008aaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008aae:	da04      	bge.n	8008aba <__ulp+0x22>
 8008ab0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ab4:	4113      	asrs	r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e008      	b.n	8008acc <__ulp+0x34>
 8008aba:	f1a2 0314 	sub.w	r3, r2, #20
 8008abe:	2b1e      	cmp	r3, #30
 8008ac0:	bfd6      	itet	le
 8008ac2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ac6:	2201      	movgt	r2, #1
 8008ac8:	40da      	lsrle	r2, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	7ff00000 	.word	0x7ff00000

08008ad8 <__b2d>:
 8008ad8:	6902      	ldr	r2, [r0, #16]
 8008ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008adc:	f100 0614 	add.w	r6, r0, #20
 8008ae0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008ae4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008ae8:	4f1e      	ldr	r7, [pc, #120]	@ (8008b64 <__b2d+0x8c>)
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff fd54 	bl	8008598 <__hi0bits>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f1c0 0020 	rsb	r0, r0, #32
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	f1a2 0504 	sub.w	r5, r2, #4
 8008afc:	6008      	str	r0, [r1, #0]
 8008afe:	dc12      	bgt.n	8008b26 <__b2d+0x4e>
 8008b00:	42ae      	cmp	r6, r5
 8008b02:	bf2c      	ite	cs
 8008b04:	2200      	movcs	r2, #0
 8008b06:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b0a:	f1c3 0c0b 	rsb	ip, r3, #11
 8008b0e:	3315      	adds	r3, #21
 8008b10:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008b14:	fa04 f303 	lsl.w	r3, r4, r3
 8008b18:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b1c:	ea4e 0107 	orr.w	r1, lr, r7
 8008b20:	431a      	orrs	r2, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b26:	42ae      	cmp	r6, r5
 8008b28:	bf36      	itet	cc
 8008b2a:	f1a2 0508 	subcc.w	r5, r2, #8
 8008b2e:	2200      	movcs	r2, #0
 8008b30:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b34:	3b0b      	subs	r3, #11
 8008b36:	d012      	beq.n	8008b5e <__b2d+0x86>
 8008b38:	f1c3 0720 	rsb	r7, r3, #32
 8008b3c:	fa22 f107 	lsr.w	r1, r2, r7
 8008b40:	409c      	lsls	r4, r3
 8008b42:	430c      	orrs	r4, r1
 8008b44:	42b5      	cmp	r5, r6
 8008b46:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008b4a:	bf94      	ite	ls
 8008b4c:	2400      	movls	r4, #0
 8008b4e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008b52:	409a      	lsls	r2, r3
 8008b54:	40fc      	lsrs	r4, r7
 8008b56:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008b5a:	4322      	orrs	r2, r4
 8008b5c:	e7e1      	b.n	8008b22 <__b2d+0x4a>
 8008b5e:	ea44 0107 	orr.w	r1, r4, r7
 8008b62:	e7de      	b.n	8008b22 <__b2d+0x4a>
 8008b64:	3ff00000 	.word	0x3ff00000

08008b68 <__d2b>:
 8008b68:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4690      	mov	r8, r2
 8008b70:	4699      	mov	r9, r3
 8008b72:	9e08      	ldr	r6, [sp, #32]
 8008b74:	f7ff fc1e 	bl	80083b4 <_Balloc>
 8008b78:	4604      	mov	r4, r0
 8008b7a:	b930      	cbnz	r0, 8008b8a <__d2b+0x22>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b82:	4b23      	ldr	r3, [pc, #140]	@ (8008c10 <__d2b+0xa8>)
 8008b84:	4823      	ldr	r0, [pc, #140]	@ (8008c14 <__d2b+0xac>)
 8008b86:	f000 faf1 	bl	800916c <__assert_func>
 8008b8a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b92:	b10d      	cbz	r5, 8008b98 <__d2b+0x30>
 8008b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	f1b8 0300 	subs.w	r3, r8, #0
 8008b9e:	d024      	beq.n	8008bea <__d2b+0x82>
 8008ba0:	4668      	mov	r0, sp
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	f7ff fd17 	bl	80085d6 <__lo0bits>
 8008ba8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bac:	b1d8      	cbz	r0, 8008be6 <__d2b+0x7e>
 8008bae:	f1c0 0320 	rsb	r3, r0, #32
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	40c2      	lsrs	r2, r0
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	9201      	str	r2, [sp, #4]
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2201      	moveq	r2, #1
 8008bc6:	2202      	movne	r2, #2
 8008bc8:	61a3      	str	r3, [r4, #24]
 8008bca:	6122      	str	r2, [r4, #16]
 8008bcc:	b1ad      	cbz	r5, 8008bfa <__d2b+0x92>
 8008bce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bd2:	4405      	add	r5, r0
 8008bd4:	6035      	str	r5, [r6, #0]
 8008bd6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	6018      	str	r0, [r3, #0]
 8008bde:	4620      	mov	r0, r4
 8008be0:	b002      	add	sp, #8
 8008be2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008be6:	6161      	str	r1, [r4, #20]
 8008be8:	e7e9      	b.n	8008bbe <__d2b+0x56>
 8008bea:	a801      	add	r0, sp, #4
 8008bec:	f7ff fcf3 	bl	80085d6 <__lo0bits>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	6163      	str	r3, [r4, #20]
 8008bf6:	3020      	adds	r0, #32
 8008bf8:	e7e7      	b.n	8008bca <__d2b+0x62>
 8008bfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c02:	6030      	str	r0, [r6, #0]
 8008c04:	6918      	ldr	r0, [r3, #16]
 8008c06:	f7ff fcc7 	bl	8008598 <__hi0bits>
 8008c0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c0e:	e7e4      	b.n	8008bda <__d2b+0x72>
 8008c10:	0800a4b1 	.word	0x0800a4b1
 8008c14:	0800a522 	.word	0x0800a522

08008c18 <__ratio>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	e9cd 1000 	strd	r1, r0, [sp]
 8008c22:	a902      	add	r1, sp, #8
 8008c24:	f7ff ff58 	bl	8008ad8 <__b2d>
 8008c28:	468b      	mov	fp, r1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	9800      	ldr	r0, [sp, #0]
 8008c30:	a903      	add	r1, sp, #12
 8008c32:	f7ff ff51 	bl	8008ad8 <__b2d>
 8008c36:	460d      	mov	r5, r1
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	4689      	mov	r9, r1
 8008c3c:	6919      	ldr	r1, [r3, #16]
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	4604      	mov	r4, r0
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	4630      	mov	r0, r6
 8008c46:	1ac9      	subs	r1, r1, r3
 8008c48:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfcd      	iteet	gt
 8008c56:	463a      	movgt	r2, r7
 8008c58:	462a      	movle	r2, r5
 8008c5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c62:	bfd8      	it	le
 8008c64:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c68:	464b      	mov	r3, r9
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	4659      	mov	r1, fp
 8008c6e:	f7f7 fd5d 	bl	800072c <__aeabi_ddiv>
 8008c72:	b005      	add	sp, #20
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c78 <__copybits>:
 8008c78:	3901      	subs	r1, #1
 8008c7a:	b570      	push	{r4, r5, r6, lr}
 8008c7c:	1149      	asrs	r1, r1, #5
 8008c7e:	6914      	ldr	r4, [r2, #16]
 8008c80:	3101      	adds	r1, #1
 8008c82:	f102 0314 	add.w	r3, r2, #20
 8008c86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c8e:	1f05      	subs	r5, r0, #4
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d30c      	bcc.n	8008cae <__copybits+0x36>
 8008c94:	1aa3      	subs	r3, r4, r2
 8008c96:	3b11      	subs	r3, #17
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3211      	adds	r2, #17
 8008c9e:	42a2      	cmp	r2, r4
 8008ca0:	bf88      	it	hi
 8008ca2:	2300      	movhi	r3, #0
 8008ca4:	4418      	add	r0, r3
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4288      	cmp	r0, r1
 8008caa:	d305      	bcc.n	8008cb8 <__copybits+0x40>
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cb2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cb6:	e7eb      	b.n	8008c90 <__copybits+0x18>
 8008cb8:	f840 3b04 	str.w	r3, [r0], #4
 8008cbc:	e7f4      	b.n	8008ca8 <__copybits+0x30>

08008cbe <__any_on>:
 8008cbe:	f100 0214 	add.w	r2, r0, #20
 8008cc2:	6900      	ldr	r0, [r0, #16]
 8008cc4:	114b      	asrs	r3, r1, #5
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	db11      	blt.n	8008cf0 <__any_on+0x32>
 8008ccc:	dd0a      	ble.n	8008ce4 <__any_on+0x26>
 8008cce:	f011 011f 	ands.w	r1, r1, #31
 8008cd2:	d007      	beq.n	8008ce4 <__any_on+0x26>
 8008cd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cd8:	fa24 f001 	lsr.w	r0, r4, r1
 8008cdc:	fa00 f101 	lsl.w	r1, r0, r1
 8008ce0:	428c      	cmp	r4, r1
 8008ce2:	d10b      	bne.n	8008cfc <__any_on+0x3e>
 8008ce4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d803      	bhi.n	8008cf4 <__any_on+0x36>
 8008cec:	2000      	movs	r0, #0
 8008cee:	bd10      	pop	{r4, pc}
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	e7f7      	b.n	8008ce4 <__any_on+0x26>
 8008cf4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d0f5      	beq.n	8008ce8 <__any_on+0x2a>
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	e7f6      	b.n	8008cee <__any_on+0x30>

08008d00 <__ascii_wctomb>:
 8008d00:	4603      	mov	r3, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	b141      	cbz	r1, 8008d18 <__ascii_wctomb+0x18>
 8008d06:	2aff      	cmp	r2, #255	@ 0xff
 8008d08:	d904      	bls.n	8008d14 <__ascii_wctomb+0x14>
 8008d0a:	228a      	movs	r2, #138	@ 0x8a
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	4770      	bx	lr
 8008d14:	2001      	movs	r0, #1
 8008d16:	700a      	strb	r2, [r1, #0]
 8008d18:	4770      	bx	lr

08008d1a <__ssputs_r>:
 8008d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1e:	461f      	mov	r7, r3
 8008d20:	688e      	ldr	r6, [r1, #8]
 8008d22:	4682      	mov	sl, r0
 8008d24:	42be      	cmp	r6, r7
 8008d26:	460c      	mov	r4, r1
 8008d28:	4690      	mov	r8, r2
 8008d2a:	680b      	ldr	r3, [r1, #0]
 8008d2c:	d82d      	bhi.n	8008d8a <__ssputs_r+0x70>
 8008d2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d32:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d36:	d026      	beq.n	8008d86 <__ssputs_r+0x6c>
 8008d38:	6965      	ldr	r5, [r4, #20]
 8008d3a:	6909      	ldr	r1, [r1, #16]
 8008d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d40:	eba3 0901 	sub.w	r9, r3, r1
 8008d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d48:	1c7b      	adds	r3, r7, #1
 8008d4a:	444b      	add	r3, r9
 8008d4c:	106d      	asrs	r5, r5, #1
 8008d4e:	429d      	cmp	r5, r3
 8008d50:	bf38      	it	cc
 8008d52:	461d      	movcc	r5, r3
 8008d54:	0553      	lsls	r3, r2, #21
 8008d56:	d527      	bpl.n	8008da8 <__ssputs_r+0x8e>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7ff fa8d 	bl	8008278 <_malloc_r>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	b360      	cbz	r0, 8008dbc <__ssputs_r+0xa2>
 8008d62:	464a      	mov	r2, r9
 8008d64:	6921      	ldr	r1, [r4, #16]
 8008d66:	f7fe f876 	bl	8006e56 <memcpy>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	6126      	str	r6, [r4, #16]
 8008d78:	444e      	add	r6, r9
 8008d7a:	6026      	str	r6, [r4, #0]
 8008d7c:	463e      	mov	r6, r7
 8008d7e:	6165      	str	r5, [r4, #20]
 8008d80:	eba5 0509 	sub.w	r5, r5, r9
 8008d84:	60a5      	str	r5, [r4, #8]
 8008d86:	42be      	cmp	r6, r7
 8008d88:	d900      	bls.n	8008d8c <__ssputs_r+0x72>
 8008d8a:	463e      	mov	r6, r7
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4641      	mov	r1, r8
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	f000 f9c1 	bl	8009118 <memmove>
 8008d96:	2000      	movs	r0, #0
 8008d98:	68a3      	ldr	r3, [r4, #8]
 8008d9a:	1b9b      	subs	r3, r3, r6
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	4433      	add	r3, r6
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da8:	462a      	mov	r2, r5
 8008daa:	f000 fa11 	bl	80091d0 <_realloc_r>
 8008dae:	4606      	mov	r6, r0
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1e0      	bne.n	8008d76 <__ssputs_r+0x5c>
 8008db4:	4650      	mov	r0, sl
 8008db6:	6921      	ldr	r1, [r4, #16]
 8008db8:	f7fe feb2 	bl	8007b20 <_free_r>
 8008dbc:	230c      	movs	r3, #12
 8008dbe:	f8ca 3000 	str.w	r3, [sl]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7e9      	b.n	8008da4 <__ssputs_r+0x8a>

08008dd0 <_svfiprintf_r>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4698      	mov	r8, r3
 8008dd6:	898b      	ldrh	r3, [r1, #12]
 8008dd8:	4607      	mov	r7, r0
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	460d      	mov	r5, r1
 8008dde:	4614      	mov	r4, r2
 8008de0:	b09d      	sub	sp, #116	@ 0x74
 8008de2:	d510      	bpl.n	8008e06 <_svfiprintf_r+0x36>
 8008de4:	690b      	ldr	r3, [r1, #16]
 8008de6:	b973      	cbnz	r3, 8008e06 <_svfiprintf_r+0x36>
 8008de8:	2140      	movs	r1, #64	@ 0x40
 8008dea:	f7ff fa45 	bl	8008278 <_malloc_r>
 8008dee:	6028      	str	r0, [r5, #0]
 8008df0:	6128      	str	r0, [r5, #16]
 8008df2:	b930      	cbnz	r0, 8008e02 <_svfiprintf_r+0x32>
 8008df4:	230c      	movs	r3, #12
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	b01d      	add	sp, #116	@ 0x74
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	2340      	movs	r3, #64	@ 0x40
 8008e04:	616b      	str	r3, [r5, #20]
 8008e06:	2300      	movs	r3, #0
 8008e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0a:	2320      	movs	r3, #32
 8008e0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e10:	2330      	movs	r3, #48	@ 0x30
 8008e12:	f04f 0901 	mov.w	r9, #1
 8008e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008fb4 <_svfiprintf_r+0x1e4>
 8008e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e22:	4623      	mov	r3, r4
 8008e24:	469a      	mov	sl, r3
 8008e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e2a:	b10a      	cbz	r2, 8008e30 <_svfiprintf_r+0x60>
 8008e2c:	2a25      	cmp	r2, #37	@ 0x25
 8008e2e:	d1f9      	bne.n	8008e24 <_svfiprintf_r+0x54>
 8008e30:	ebba 0b04 	subs.w	fp, sl, r4
 8008e34:	d00b      	beq.n	8008e4e <_svfiprintf_r+0x7e>
 8008e36:	465b      	mov	r3, fp
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f7ff ff6c 	bl	8008d1a <__ssputs_r>
 8008e42:	3001      	adds	r0, #1
 8008e44:	f000 80a7 	beq.w	8008f96 <_svfiprintf_r+0x1c6>
 8008e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e4a:	445a      	add	r2, fp
 8008e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 809f 	beq.w	8008f96 <_svfiprintf_r+0x1c6>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e62:	f10a 0a01 	add.w	sl, sl, #1
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	9307      	str	r3, [sp, #28]
 8008e6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e70:	4654      	mov	r4, sl
 8008e72:	2205      	movs	r2, #5
 8008e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e78:	484e      	ldr	r0, [pc, #312]	@ (8008fb4 <_svfiprintf_r+0x1e4>)
 8008e7a:	f7fd ffde 	bl	8006e3a <memchr>
 8008e7e:	9a04      	ldr	r2, [sp, #16]
 8008e80:	b9d8      	cbnz	r0, 8008eba <_svfiprintf_r+0xea>
 8008e82:	06d0      	lsls	r0, r2, #27
 8008e84:	bf44      	itt	mi
 8008e86:	2320      	movmi	r3, #32
 8008e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8c:	0711      	lsls	r1, r2, #28
 8008e8e:	bf44      	itt	mi
 8008e90:	232b      	movmi	r3, #43	@ 0x2b
 8008e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e96:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9c:	d015      	beq.n	8008eca <_svfiprintf_r+0xfa>
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f04f 0c0a 	mov.w	ip, #10
 8008ea6:	9a07      	ldr	r2, [sp, #28]
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eae:	3b30      	subs	r3, #48	@ 0x30
 8008eb0:	2b09      	cmp	r3, #9
 8008eb2:	d94b      	bls.n	8008f4c <_svfiprintf_r+0x17c>
 8008eb4:	b1b0      	cbz	r0, 8008ee4 <_svfiprintf_r+0x114>
 8008eb6:	9207      	str	r2, [sp, #28]
 8008eb8:	e014      	b.n	8008ee4 <_svfiprintf_r+0x114>
 8008eba:	eba0 0308 	sub.w	r3, r0, r8
 8008ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	46a2      	mov	sl, r4
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	e7d2      	b.n	8008e70 <_svfiprintf_r+0xa0>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	1d19      	adds	r1, r3, #4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	9103      	str	r1, [sp, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bfbb      	ittet	lt
 8008ed6:	425b      	neglt	r3, r3
 8008ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8008edc:	9307      	strge	r3, [sp, #28]
 8008ede:	9307      	strlt	r3, [sp, #28]
 8008ee0:	bfb8      	it	lt
 8008ee2:	9204      	strlt	r2, [sp, #16]
 8008ee4:	7823      	ldrb	r3, [r4, #0]
 8008ee6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee8:	d10a      	bne.n	8008f00 <_svfiprintf_r+0x130>
 8008eea:	7863      	ldrb	r3, [r4, #1]
 8008eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eee:	d132      	bne.n	8008f56 <_svfiprintf_r+0x186>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	3402      	adds	r4, #2
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	9203      	str	r2, [sp, #12]
 8008efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008efe:	9305      	str	r3, [sp, #20]
 8008f00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008fb8 <_svfiprintf_r+0x1e8>
 8008f04:	2203      	movs	r2, #3
 8008f06:	4650      	mov	r0, sl
 8008f08:	7821      	ldrb	r1, [r4, #0]
 8008f0a:	f7fd ff96 	bl	8006e3a <memchr>
 8008f0e:	b138      	cbz	r0, 8008f20 <_svfiprintf_r+0x150>
 8008f10:	2240      	movs	r2, #64	@ 0x40
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	eba0 000a 	sub.w	r0, r0, sl
 8008f18:	4082      	lsls	r2, r0
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	3401      	adds	r4, #1
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f24:	2206      	movs	r2, #6
 8008f26:	4825      	ldr	r0, [pc, #148]	@ (8008fbc <_svfiprintf_r+0x1ec>)
 8008f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f2c:	f7fd ff85 	bl	8006e3a <memchr>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d036      	beq.n	8008fa2 <_svfiprintf_r+0x1d2>
 8008f34:	4b22      	ldr	r3, [pc, #136]	@ (8008fc0 <_svfiprintf_r+0x1f0>)
 8008f36:	bb1b      	cbnz	r3, 8008f80 <_svfiprintf_r+0x1b0>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	3307      	adds	r3, #7
 8008f3c:	f023 0307 	bic.w	r3, r3, #7
 8008f40:	3308      	adds	r3, #8
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f46:	4433      	add	r3, r6
 8008f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f4a:	e76a      	b.n	8008e22 <_svfiprintf_r+0x52>
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	2001      	movs	r0, #1
 8008f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f54:	e7a8      	b.n	8008ea8 <_svfiprintf_r+0xd8>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	3401      	adds	r4, #1
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	4620      	mov	r0, r4
 8008f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f68:	3a30      	subs	r2, #48	@ 0x30
 8008f6a:	2a09      	cmp	r2, #9
 8008f6c:	d903      	bls.n	8008f76 <_svfiprintf_r+0x1a6>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0c6      	beq.n	8008f00 <_svfiprintf_r+0x130>
 8008f72:	9105      	str	r1, [sp, #20]
 8008f74:	e7c4      	b.n	8008f00 <_svfiprintf_r+0x130>
 8008f76:	4604      	mov	r4, r0
 8008f78:	2301      	movs	r3, #1
 8008f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f7e:	e7f0      	b.n	8008f62 <_svfiprintf_r+0x192>
 8008f80:	ab03      	add	r3, sp, #12
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	462a      	mov	r2, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc4 <_svfiprintf_r+0x1f4>)
 8008f8a:	a904      	add	r1, sp, #16
 8008f8c:	f7fd f9ba 	bl	8006304 <_printf_float>
 8008f90:	1c42      	adds	r2, r0, #1
 8008f92:	4606      	mov	r6, r0
 8008f94:	d1d6      	bne.n	8008f44 <_svfiprintf_r+0x174>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	065b      	lsls	r3, r3, #25
 8008f9a:	f53f af2d 	bmi.w	8008df8 <_svfiprintf_r+0x28>
 8008f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa0:	e72c      	b.n	8008dfc <_svfiprintf_r+0x2c>
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4638      	mov	r0, r7
 8008faa:	4b06      	ldr	r3, [pc, #24]	@ (8008fc4 <_svfiprintf_r+0x1f4>)
 8008fac:	a904      	add	r1, sp, #16
 8008fae:	f7fd fc47 	bl	8006840 <_printf_i>
 8008fb2:	e7ed      	b.n	8008f90 <_svfiprintf_r+0x1c0>
 8008fb4:	0800a678 	.word	0x0800a678
 8008fb8:	0800a67e 	.word	0x0800a67e
 8008fbc:	0800a682 	.word	0x0800a682
 8008fc0:	08006305 	.word	0x08006305
 8008fc4:	08008d1b 	.word	0x08008d1b

08008fc8 <__sflush_r>:
 8008fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	0716      	lsls	r6, r2, #28
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	d454      	bmi.n	8009080 <__sflush_r+0xb8>
 8008fd6:	684b      	ldr	r3, [r1, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dc02      	bgt.n	8008fe2 <__sflush_r+0x1a>
 8008fdc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dd48      	ble.n	8009074 <__sflush_r+0xac>
 8008fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	d045      	beq.n	8009074 <__sflush_r+0xac>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fee:	682f      	ldr	r7, [r5, #0]
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	d030      	beq.n	8009058 <__sflush_r+0x90>
 8008ff6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	0759      	lsls	r1, r3, #29
 8008ffc:	d505      	bpl.n	800900a <__sflush_r+0x42>
 8008ffe:	6863      	ldr	r3, [r4, #4]
 8009000:	1ad2      	subs	r2, r2, r3
 8009002:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009004:	b10b      	cbz	r3, 800900a <__sflush_r+0x42>
 8009006:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009008:	1ad2      	subs	r2, r2, r3
 800900a:	2300      	movs	r3, #0
 800900c:	4628      	mov	r0, r5
 800900e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009010:	6a21      	ldr	r1, [r4, #32]
 8009012:	47b0      	blx	r6
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	d106      	bne.n	8009028 <__sflush_r+0x60>
 800901a:	6829      	ldr	r1, [r5, #0]
 800901c:	291d      	cmp	r1, #29
 800901e:	d82b      	bhi.n	8009078 <__sflush_r+0xb0>
 8009020:	4a28      	ldr	r2, [pc, #160]	@ (80090c4 <__sflush_r+0xfc>)
 8009022:	410a      	asrs	r2, r1
 8009024:	07d6      	lsls	r6, r2, #31
 8009026:	d427      	bmi.n	8009078 <__sflush_r+0xb0>
 8009028:	2200      	movs	r2, #0
 800902a:	6062      	str	r2, [r4, #4]
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	04d9      	lsls	r1, r3, #19
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	d504      	bpl.n	800903e <__sflush_r+0x76>
 8009034:	1c42      	adds	r2, r0, #1
 8009036:	d101      	bne.n	800903c <__sflush_r+0x74>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b903      	cbnz	r3, 800903e <__sflush_r+0x76>
 800903c:	6560      	str	r0, [r4, #84]	@ 0x54
 800903e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009040:	602f      	str	r7, [r5, #0]
 8009042:	b1b9      	cbz	r1, 8009074 <__sflush_r+0xac>
 8009044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d002      	beq.n	8009052 <__sflush_r+0x8a>
 800904c:	4628      	mov	r0, r5
 800904e:	f7fe fd67 	bl	8007b20 <_free_r>
 8009052:	2300      	movs	r3, #0
 8009054:	6363      	str	r3, [r4, #52]	@ 0x34
 8009056:	e00d      	b.n	8009074 <__sflush_r+0xac>
 8009058:	2301      	movs	r3, #1
 800905a:	4628      	mov	r0, r5
 800905c:	47b0      	blx	r6
 800905e:	4602      	mov	r2, r0
 8009060:	1c50      	adds	r0, r2, #1
 8009062:	d1c9      	bne.n	8008ff8 <__sflush_r+0x30>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c6      	beq.n	8008ff8 <__sflush_r+0x30>
 800906a:	2b1d      	cmp	r3, #29
 800906c:	d001      	beq.n	8009072 <__sflush_r+0xaa>
 800906e:	2b16      	cmp	r3, #22
 8009070:	d11d      	bne.n	80090ae <__sflush_r+0xe6>
 8009072:	602f      	str	r7, [r5, #0]
 8009074:	2000      	movs	r0, #0
 8009076:	e021      	b.n	80090bc <__sflush_r+0xf4>
 8009078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907c:	b21b      	sxth	r3, r3
 800907e:	e01a      	b.n	80090b6 <__sflush_r+0xee>
 8009080:	690f      	ldr	r7, [r1, #16]
 8009082:	2f00      	cmp	r7, #0
 8009084:	d0f6      	beq.n	8009074 <__sflush_r+0xac>
 8009086:	0793      	lsls	r3, r2, #30
 8009088:	bf18      	it	ne
 800908a:	2300      	movne	r3, #0
 800908c:	680e      	ldr	r6, [r1, #0]
 800908e:	bf08      	it	eq
 8009090:	694b      	ldreq	r3, [r1, #20]
 8009092:	1bf6      	subs	r6, r6, r7
 8009094:	600f      	str	r7, [r1, #0]
 8009096:	608b      	str	r3, [r1, #8]
 8009098:	2e00      	cmp	r6, #0
 800909a:	ddeb      	ble.n	8009074 <__sflush_r+0xac>
 800909c:	4633      	mov	r3, r6
 800909e:	463a      	mov	r2, r7
 80090a0:	4628      	mov	r0, r5
 80090a2:	6a21      	ldr	r1, [r4, #32]
 80090a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80090a8:	47e0      	blx	ip
 80090aa:	2800      	cmp	r0, #0
 80090ac:	dc07      	bgt.n	80090be <__sflush_r+0xf6>
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090be:	4407      	add	r7, r0
 80090c0:	1a36      	subs	r6, r6, r0
 80090c2:	e7e9      	b.n	8009098 <__sflush_r+0xd0>
 80090c4:	dfbffffe 	.word	0xdfbffffe

080090c8 <_fflush_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	690b      	ldr	r3, [r1, #16]
 80090cc:	4605      	mov	r5, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	b913      	cbnz	r3, 80090d8 <_fflush_r+0x10>
 80090d2:	2500      	movs	r5, #0
 80090d4:	4628      	mov	r0, r5
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	b118      	cbz	r0, 80090e2 <_fflush_r+0x1a>
 80090da:	6a03      	ldr	r3, [r0, #32]
 80090dc:	b90b      	cbnz	r3, 80090e2 <_fflush_r+0x1a>
 80090de:	f7fd fd5b 	bl	8006b98 <__sinit>
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f3      	beq.n	80090d2 <_fflush_r+0xa>
 80090ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090ec:	07d0      	lsls	r0, r2, #31
 80090ee:	d404      	bmi.n	80090fa <_fflush_r+0x32>
 80090f0:	0599      	lsls	r1, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_fflush_r+0x32>
 80090f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f6:	f7fd fe9e 	bl	8006e36 <__retarget_lock_acquire_recursive>
 80090fa:	4628      	mov	r0, r5
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7ff ff63 	bl	8008fc8 <__sflush_r>
 8009102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009104:	4605      	mov	r5, r0
 8009106:	07da      	lsls	r2, r3, #31
 8009108:	d4e4      	bmi.n	80090d4 <_fflush_r+0xc>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	059b      	lsls	r3, r3, #22
 800910e:	d4e1      	bmi.n	80090d4 <_fflush_r+0xc>
 8009110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009112:	f7fd fe91 	bl	8006e38 <__retarget_lock_release_recursive>
 8009116:	e7dd      	b.n	80090d4 <_fflush_r+0xc>

08009118 <memmove>:
 8009118:	4288      	cmp	r0, r1
 800911a:	b510      	push	{r4, lr}
 800911c:	eb01 0402 	add.w	r4, r1, r2
 8009120:	d902      	bls.n	8009128 <memmove+0x10>
 8009122:	4284      	cmp	r4, r0
 8009124:	4623      	mov	r3, r4
 8009126:	d807      	bhi.n	8009138 <memmove+0x20>
 8009128:	1e43      	subs	r3, r0, #1
 800912a:	42a1      	cmp	r1, r4
 800912c:	d008      	beq.n	8009140 <memmove+0x28>
 800912e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009136:	e7f8      	b.n	800912a <memmove+0x12>
 8009138:	4601      	mov	r1, r0
 800913a:	4402      	add	r2, r0
 800913c:	428a      	cmp	r2, r1
 800913e:	d100      	bne.n	8009142 <memmove+0x2a>
 8009140:	bd10      	pop	{r4, pc}
 8009142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800914a:	e7f7      	b.n	800913c <memmove+0x24>

0800914c <_sbrk_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	2300      	movs	r3, #0
 8009150:	4d05      	ldr	r5, [pc, #20]	@ (8009168 <_sbrk_r+0x1c>)
 8009152:	4604      	mov	r4, r0
 8009154:	4608      	mov	r0, r1
 8009156:	602b      	str	r3, [r5, #0]
 8009158:	f7f8 ffec 	bl	8002134 <_sbrk>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_sbrk_r+0x1a>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_sbrk_r+0x1a>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	20000a10 	.word	0x20000a10

0800916c <__assert_func>:
 800916c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800916e:	4614      	mov	r4, r2
 8009170:	461a      	mov	r2, r3
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <__assert_func+0x2c>)
 8009174:	4605      	mov	r5, r0
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68d8      	ldr	r0, [r3, #12]
 800917a:	b954      	cbnz	r4, 8009192 <__assert_func+0x26>
 800917c:	4b07      	ldr	r3, [pc, #28]	@ (800919c <__assert_func+0x30>)
 800917e:	461c      	mov	r4, r3
 8009180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009184:	9100      	str	r1, [sp, #0]
 8009186:	462b      	mov	r3, r5
 8009188:	4905      	ldr	r1, [pc, #20]	@ (80091a0 <__assert_func+0x34>)
 800918a:	f000 f84f 	bl	800922c <fiprintf>
 800918e:	f000 f85f 	bl	8009250 <abort>
 8009192:	4b04      	ldr	r3, [pc, #16]	@ (80091a4 <__assert_func+0x38>)
 8009194:	e7f4      	b.n	8009180 <__assert_func+0x14>
 8009196:	bf00      	nop
 8009198:	200001a4 	.word	0x200001a4
 800919c:	0800a6c4 	.word	0x0800a6c4
 80091a0:	0800a696 	.word	0x0800a696
 80091a4:	0800a689 	.word	0x0800a689

080091a8 <_calloc_r>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	fba1 5402 	umull	r5, r4, r1, r2
 80091ae:	b93c      	cbnz	r4, 80091c0 <_calloc_r+0x18>
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7ff f861 	bl	8008278 <_malloc_r>
 80091b6:	4606      	mov	r6, r0
 80091b8:	b928      	cbnz	r0, 80091c6 <_calloc_r+0x1e>
 80091ba:	2600      	movs	r6, #0
 80091bc:	4630      	mov	r0, r6
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	220c      	movs	r2, #12
 80091c2:	6002      	str	r2, [r0, #0]
 80091c4:	e7f9      	b.n	80091ba <_calloc_r+0x12>
 80091c6:	462a      	mov	r2, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	f7fd fd8e 	bl	8006cea <memset>
 80091ce:	e7f5      	b.n	80091bc <_calloc_r+0x14>

080091d0 <_realloc_r>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	4680      	mov	r8, r0
 80091d6:	4615      	mov	r5, r2
 80091d8:	460c      	mov	r4, r1
 80091da:	b921      	cbnz	r1, 80091e6 <_realloc_r+0x16>
 80091dc:	4611      	mov	r1, r2
 80091de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	f7ff b849 	b.w	8008278 <_malloc_r>
 80091e6:	b92a      	cbnz	r2, 80091f4 <_realloc_r+0x24>
 80091e8:	f7fe fc9a 	bl	8007b20 <_free_r>
 80091ec:	2400      	movs	r4, #0
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	f000 f833 	bl	800925e <_malloc_usable_size_r>
 80091f8:	4285      	cmp	r5, r0
 80091fa:	4606      	mov	r6, r0
 80091fc:	d802      	bhi.n	8009204 <_realloc_r+0x34>
 80091fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009202:	d8f4      	bhi.n	80091ee <_realloc_r+0x1e>
 8009204:	4629      	mov	r1, r5
 8009206:	4640      	mov	r0, r8
 8009208:	f7ff f836 	bl	8008278 <_malloc_r>
 800920c:	4607      	mov	r7, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	d0ec      	beq.n	80091ec <_realloc_r+0x1c>
 8009212:	42b5      	cmp	r5, r6
 8009214:	462a      	mov	r2, r5
 8009216:	4621      	mov	r1, r4
 8009218:	bf28      	it	cs
 800921a:	4632      	movcs	r2, r6
 800921c:	f7fd fe1b 	bl	8006e56 <memcpy>
 8009220:	4621      	mov	r1, r4
 8009222:	4640      	mov	r0, r8
 8009224:	f7fe fc7c 	bl	8007b20 <_free_r>
 8009228:	463c      	mov	r4, r7
 800922a:	e7e0      	b.n	80091ee <_realloc_r+0x1e>

0800922c <fiprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	b503      	push	{r0, r1, lr}
 8009230:	4601      	mov	r1, r0
 8009232:	ab03      	add	r3, sp, #12
 8009234:	4805      	ldr	r0, [pc, #20]	@ (800924c <fiprintf+0x20>)
 8009236:	f853 2b04 	ldr.w	r2, [r3], #4
 800923a:	6800      	ldr	r0, [r0, #0]
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	f000 f83d 	bl	80092bc <_vfiprintf_r>
 8009242:	b002      	add	sp, #8
 8009244:	f85d eb04 	ldr.w	lr, [sp], #4
 8009248:	b003      	add	sp, #12
 800924a:	4770      	bx	lr
 800924c:	200001a4 	.word	0x200001a4

08009250 <abort>:
 8009250:	2006      	movs	r0, #6
 8009252:	b508      	push	{r3, lr}
 8009254:	f000 fa06 	bl	8009664 <raise>
 8009258:	2001      	movs	r0, #1
 800925a:	f7f8 fef6 	bl	800204a <_exit>

0800925e <_malloc_usable_size_r>:
 800925e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009262:	1f18      	subs	r0, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbc      	itt	lt
 8009268:	580b      	ldrlt	r3, [r1, r0]
 800926a:	18c0      	addlt	r0, r0, r3
 800926c:	4770      	bx	lr

0800926e <__sfputc_r>:
 800926e:	6893      	ldr	r3, [r2, #8]
 8009270:	b410      	push	{r4}
 8009272:	3b01      	subs	r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	6093      	str	r3, [r2, #8]
 8009278:	da07      	bge.n	800928a <__sfputc_r+0x1c>
 800927a:	6994      	ldr	r4, [r2, #24]
 800927c:	42a3      	cmp	r3, r4
 800927e:	db01      	blt.n	8009284 <__sfputc_r+0x16>
 8009280:	290a      	cmp	r1, #10
 8009282:	d102      	bne.n	800928a <__sfputc_r+0x1c>
 8009284:	bc10      	pop	{r4}
 8009286:	f000 b931 	b.w	80094ec <__swbuf_r>
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	1c58      	adds	r0, r3, #1
 800928e:	6010      	str	r0, [r2, #0]
 8009290:	7019      	strb	r1, [r3, #0]
 8009292:	4608      	mov	r0, r1
 8009294:	bc10      	pop	{r4}
 8009296:	4770      	bx	lr

08009298 <__sfputs_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	4614      	mov	r4, r2
 80092a0:	18d5      	adds	r5, r2, r3
 80092a2:	42ac      	cmp	r4, r5
 80092a4:	d101      	bne.n	80092aa <__sfputs_r+0x12>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e007      	b.n	80092ba <__sfputs_r+0x22>
 80092aa:	463a      	mov	r2, r7
 80092ac:	4630      	mov	r0, r6
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	f7ff ffdc 	bl	800926e <__sfputc_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d1f3      	bne.n	80092a2 <__sfputs_r+0xa>
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	4698      	mov	r8, r3
 80092c6:	4606      	mov	r6, r0
 80092c8:	b09d      	sub	sp, #116	@ 0x74
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f7fd fc62 	bl	8006b98 <__sinit>
 80092d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092d6:	07d9      	lsls	r1, r3, #31
 80092d8:	d405      	bmi.n	80092e6 <_vfiprintf_r+0x2a>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_vfiprintf_r+0x2a>
 80092e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e2:	f7fd fda8 	bl	8006e36 <__retarget_lock_acquire_recursive>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	071b      	lsls	r3, r3, #28
 80092ea:	d501      	bpl.n	80092f0 <_vfiprintf_r+0x34>
 80092ec:	692b      	ldr	r3, [r5, #16]
 80092ee:	b99b      	cbnz	r3, 8009318 <_vfiprintf_r+0x5c>
 80092f0:	4629      	mov	r1, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 f938 	bl	8009568 <__swsetup_r>
 80092f8:	b170      	cbz	r0, 8009318 <_vfiprintf_r+0x5c>
 80092fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092fc:	07dc      	lsls	r4, r3, #31
 80092fe:	d504      	bpl.n	800930a <_vfiprintf_r+0x4e>
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	b01d      	add	sp, #116	@ 0x74
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	0598      	lsls	r0, r3, #22
 800930e:	d4f7      	bmi.n	8009300 <_vfiprintf_r+0x44>
 8009310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009312:	f7fd fd91 	bl	8006e38 <__retarget_lock_release_recursive>
 8009316:	e7f3      	b.n	8009300 <_vfiprintf_r+0x44>
 8009318:	2300      	movs	r3, #0
 800931a:	9309      	str	r3, [sp, #36]	@ 0x24
 800931c:	2320      	movs	r3, #32
 800931e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009322:	2330      	movs	r3, #48	@ 0x30
 8009324:	f04f 0901 	mov.w	r9, #1
 8009328:	f8cd 800c 	str.w	r8, [sp, #12]
 800932c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80094d8 <_vfiprintf_r+0x21c>
 8009330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009334:	4623      	mov	r3, r4
 8009336:	469a      	mov	sl, r3
 8009338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933c:	b10a      	cbz	r2, 8009342 <_vfiprintf_r+0x86>
 800933e:	2a25      	cmp	r2, #37	@ 0x25
 8009340:	d1f9      	bne.n	8009336 <_vfiprintf_r+0x7a>
 8009342:	ebba 0b04 	subs.w	fp, sl, r4
 8009346:	d00b      	beq.n	8009360 <_vfiprintf_r+0xa4>
 8009348:	465b      	mov	r3, fp
 800934a:	4622      	mov	r2, r4
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ffa2 	bl	8009298 <__sfputs_r>
 8009354:	3001      	adds	r0, #1
 8009356:	f000 80a7 	beq.w	80094a8 <_vfiprintf_r+0x1ec>
 800935a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800935c:	445a      	add	r2, fp
 800935e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009360:	f89a 3000 	ldrb.w	r3, [sl]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 809f 	beq.w	80094a8 <_vfiprintf_r+0x1ec>
 800936a:	2300      	movs	r3, #0
 800936c:	f04f 32ff 	mov.w	r2, #4294967295
 8009370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009374:	f10a 0a01 	add.w	sl, sl, #1
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009380:	931a      	str	r3, [sp, #104]	@ 0x68
 8009382:	4654      	mov	r4, sl
 8009384:	2205      	movs	r2, #5
 8009386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938a:	4853      	ldr	r0, [pc, #332]	@ (80094d8 <_vfiprintf_r+0x21c>)
 800938c:	f7fd fd55 	bl	8006e3a <memchr>
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	b9d8      	cbnz	r0, 80093cc <_vfiprintf_r+0x110>
 8009394:	06d1      	lsls	r1, r2, #27
 8009396:	bf44      	itt	mi
 8009398:	2320      	movmi	r3, #32
 800939a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800939e:	0713      	lsls	r3, r2, #28
 80093a0:	bf44      	itt	mi
 80093a2:	232b      	movmi	r3, #43	@ 0x2b
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a8:	f89a 3000 	ldrb.w	r3, [sl]
 80093ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ae:	d015      	beq.n	80093dc <_vfiprintf_r+0x120>
 80093b0:	4654      	mov	r4, sl
 80093b2:	2000      	movs	r0, #0
 80093b4:	f04f 0c0a 	mov.w	ip, #10
 80093b8:	9a07      	ldr	r2, [sp, #28]
 80093ba:	4621      	mov	r1, r4
 80093bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c0:	3b30      	subs	r3, #48	@ 0x30
 80093c2:	2b09      	cmp	r3, #9
 80093c4:	d94b      	bls.n	800945e <_vfiprintf_r+0x1a2>
 80093c6:	b1b0      	cbz	r0, 80093f6 <_vfiprintf_r+0x13a>
 80093c8:	9207      	str	r2, [sp, #28]
 80093ca:	e014      	b.n	80093f6 <_vfiprintf_r+0x13a>
 80093cc:	eba0 0308 	sub.w	r3, r0, r8
 80093d0:	fa09 f303 	lsl.w	r3, r9, r3
 80093d4:	4313      	orrs	r3, r2
 80093d6:	46a2      	mov	sl, r4
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	e7d2      	b.n	8009382 <_vfiprintf_r+0xc6>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1d19      	adds	r1, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9103      	str	r1, [sp, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfbb      	ittet	lt
 80093e8:	425b      	neglt	r3, r3
 80093ea:	f042 0202 	orrlt.w	r2, r2, #2
 80093ee:	9307      	strge	r3, [sp, #28]
 80093f0:	9307      	strlt	r3, [sp, #28]
 80093f2:	bfb8      	it	lt
 80093f4:	9204      	strlt	r2, [sp, #16]
 80093f6:	7823      	ldrb	r3, [r4, #0]
 80093f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093fa:	d10a      	bne.n	8009412 <_vfiprintf_r+0x156>
 80093fc:	7863      	ldrb	r3, [r4, #1]
 80093fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009400:	d132      	bne.n	8009468 <_vfiprintf_r+0x1ac>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	3402      	adds	r4, #2
 8009406:	1d1a      	adds	r2, r3, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	9203      	str	r2, [sp, #12]
 800940c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80094dc <_vfiprintf_r+0x220>
 8009416:	2203      	movs	r2, #3
 8009418:	4650      	mov	r0, sl
 800941a:	7821      	ldrb	r1, [r4, #0]
 800941c:	f7fd fd0d 	bl	8006e3a <memchr>
 8009420:	b138      	cbz	r0, 8009432 <_vfiprintf_r+0x176>
 8009422:	2240      	movs	r2, #64	@ 0x40
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	eba0 000a 	sub.w	r0, r0, sl
 800942a:	4082      	lsls	r2, r0
 800942c:	4313      	orrs	r3, r2
 800942e:	3401      	adds	r4, #1
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	2206      	movs	r2, #6
 8009438:	4829      	ldr	r0, [pc, #164]	@ (80094e0 <_vfiprintf_r+0x224>)
 800943a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800943e:	f7fd fcfc 	bl	8006e3a <memchr>
 8009442:	2800      	cmp	r0, #0
 8009444:	d03f      	beq.n	80094c6 <_vfiprintf_r+0x20a>
 8009446:	4b27      	ldr	r3, [pc, #156]	@ (80094e4 <_vfiprintf_r+0x228>)
 8009448:	bb1b      	cbnz	r3, 8009492 <_vfiprintf_r+0x1d6>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	3307      	adds	r3, #7
 800944e:	f023 0307 	bic.w	r3, r3, #7
 8009452:	3308      	adds	r3, #8
 8009454:	9303      	str	r3, [sp, #12]
 8009456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009458:	443b      	add	r3, r7
 800945a:	9309      	str	r3, [sp, #36]	@ 0x24
 800945c:	e76a      	b.n	8009334 <_vfiprintf_r+0x78>
 800945e:	460c      	mov	r4, r1
 8009460:	2001      	movs	r0, #1
 8009462:	fb0c 3202 	mla	r2, ip, r2, r3
 8009466:	e7a8      	b.n	80093ba <_vfiprintf_r+0xfe>
 8009468:	2300      	movs	r3, #0
 800946a:	f04f 0c0a 	mov.w	ip, #10
 800946e:	4619      	mov	r1, r3
 8009470:	3401      	adds	r4, #1
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	4620      	mov	r0, r4
 8009476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947a:	3a30      	subs	r2, #48	@ 0x30
 800947c:	2a09      	cmp	r2, #9
 800947e:	d903      	bls.n	8009488 <_vfiprintf_r+0x1cc>
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0c6      	beq.n	8009412 <_vfiprintf_r+0x156>
 8009484:	9105      	str	r1, [sp, #20]
 8009486:	e7c4      	b.n	8009412 <_vfiprintf_r+0x156>
 8009488:	4604      	mov	r4, r0
 800948a:	2301      	movs	r3, #1
 800948c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009490:	e7f0      	b.n	8009474 <_vfiprintf_r+0x1b8>
 8009492:	ab03      	add	r3, sp, #12
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	462a      	mov	r2, r5
 8009498:	4630      	mov	r0, r6
 800949a:	4b13      	ldr	r3, [pc, #76]	@ (80094e8 <_vfiprintf_r+0x22c>)
 800949c:	a904      	add	r1, sp, #16
 800949e:	f7fc ff31 	bl	8006304 <_printf_float>
 80094a2:	4607      	mov	r7, r0
 80094a4:	1c78      	adds	r0, r7, #1
 80094a6:	d1d6      	bne.n	8009456 <_vfiprintf_r+0x19a>
 80094a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094aa:	07d9      	lsls	r1, r3, #31
 80094ac:	d405      	bmi.n	80094ba <_vfiprintf_r+0x1fe>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	059a      	lsls	r2, r3, #22
 80094b2:	d402      	bmi.n	80094ba <_vfiprintf_r+0x1fe>
 80094b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b6:	f7fd fcbf 	bl	8006e38 <__retarget_lock_release_recursive>
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	065b      	lsls	r3, r3, #25
 80094be:	f53f af1f 	bmi.w	8009300 <_vfiprintf_r+0x44>
 80094c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c4:	e71e      	b.n	8009304 <_vfiprintf_r+0x48>
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462a      	mov	r2, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	4b06      	ldr	r3, [pc, #24]	@ (80094e8 <_vfiprintf_r+0x22c>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	f7fd f9b5 	bl	8006840 <_printf_i>
 80094d6:	e7e4      	b.n	80094a2 <_vfiprintf_r+0x1e6>
 80094d8:	0800a678 	.word	0x0800a678
 80094dc:	0800a67e 	.word	0x0800a67e
 80094e0:	0800a682 	.word	0x0800a682
 80094e4:	08006305 	.word	0x08006305
 80094e8:	08009299 	.word	0x08009299

080094ec <__swbuf_r>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	460e      	mov	r6, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	4605      	mov	r5, r0
 80094f4:	b118      	cbz	r0, 80094fe <__swbuf_r+0x12>
 80094f6:	6a03      	ldr	r3, [r0, #32]
 80094f8:	b90b      	cbnz	r3, 80094fe <__swbuf_r+0x12>
 80094fa:	f7fd fb4d 	bl	8006b98 <__sinit>
 80094fe:	69a3      	ldr	r3, [r4, #24]
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	071a      	lsls	r2, r3, #28
 8009506:	d501      	bpl.n	800950c <__swbuf_r+0x20>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	b943      	cbnz	r3, 800951e <__swbuf_r+0x32>
 800950c:	4621      	mov	r1, r4
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f82a 	bl	8009568 <__swsetup_r>
 8009514:	b118      	cbz	r0, 800951e <__swbuf_r+0x32>
 8009516:	f04f 37ff 	mov.w	r7, #4294967295
 800951a:	4638      	mov	r0, r7
 800951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	6922      	ldr	r2, [r4, #16]
 8009522:	b2f6      	uxtb	r6, r6
 8009524:	1a98      	subs	r0, r3, r2
 8009526:	6963      	ldr	r3, [r4, #20]
 8009528:	4637      	mov	r7, r6
 800952a:	4283      	cmp	r3, r0
 800952c:	dc05      	bgt.n	800953a <__swbuf_r+0x4e>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f7ff fdc9 	bl	80090c8 <_fflush_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	d1ed      	bne.n	8009516 <__swbuf_r+0x2a>
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	3b01      	subs	r3, #1
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	6022      	str	r2, [r4, #0]
 8009546:	701e      	strb	r6, [r3, #0]
 8009548:	6962      	ldr	r2, [r4, #20]
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	429a      	cmp	r2, r3
 800954e:	d004      	beq.n	800955a <__swbuf_r+0x6e>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	07db      	lsls	r3, r3, #31
 8009554:	d5e1      	bpl.n	800951a <__swbuf_r+0x2e>
 8009556:	2e0a      	cmp	r6, #10
 8009558:	d1df      	bne.n	800951a <__swbuf_r+0x2e>
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f7ff fdb3 	bl	80090c8 <_fflush_r>
 8009562:	2800      	cmp	r0, #0
 8009564:	d0d9      	beq.n	800951a <__swbuf_r+0x2e>
 8009566:	e7d6      	b.n	8009516 <__swbuf_r+0x2a>

08009568 <__swsetup_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4b29      	ldr	r3, [pc, #164]	@ (8009610 <__swsetup_r+0xa8>)
 800956c:	4605      	mov	r5, r0
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	460c      	mov	r4, r1
 8009572:	b118      	cbz	r0, 800957c <__swsetup_r+0x14>
 8009574:	6a03      	ldr	r3, [r0, #32]
 8009576:	b90b      	cbnz	r3, 800957c <__swsetup_r+0x14>
 8009578:	f7fd fb0e 	bl	8006b98 <__sinit>
 800957c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009580:	0719      	lsls	r1, r3, #28
 8009582:	d422      	bmi.n	80095ca <__swsetup_r+0x62>
 8009584:	06da      	lsls	r2, r3, #27
 8009586:	d407      	bmi.n	8009598 <__swsetup_r+0x30>
 8009588:	2209      	movs	r2, #9
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	e033      	b.n	8009600 <__swsetup_r+0x98>
 8009598:	0758      	lsls	r0, r3, #29
 800959a:	d512      	bpl.n	80095c2 <__swsetup_r+0x5a>
 800959c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800959e:	b141      	cbz	r1, 80095b2 <__swsetup_r+0x4a>
 80095a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095a4:	4299      	cmp	r1, r3
 80095a6:	d002      	beq.n	80095ae <__swsetup_r+0x46>
 80095a8:	4628      	mov	r0, r5
 80095aa:	f7fe fab9 	bl	8007b20 <_free_r>
 80095ae:	2300      	movs	r3, #0
 80095b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	2300      	movs	r3, #0
 80095bc:	6063      	str	r3, [r4, #4]
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f043 0308 	orr.w	r3, r3, #8
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	b94b      	cbnz	r3, 80095e2 <__swsetup_r+0x7a>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d8:	d003      	beq.n	80095e2 <__swsetup_r+0x7a>
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 f882 	bl	80096e6 <__smakebuf_r>
 80095e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e6:	f013 0201 	ands.w	r2, r3, #1
 80095ea:	d00a      	beq.n	8009602 <__swsetup_r+0x9a>
 80095ec:	2200      	movs	r2, #0
 80095ee:	60a2      	str	r2, [r4, #8]
 80095f0:	6962      	ldr	r2, [r4, #20]
 80095f2:	4252      	negs	r2, r2
 80095f4:	61a2      	str	r2, [r4, #24]
 80095f6:	6922      	ldr	r2, [r4, #16]
 80095f8:	b942      	cbnz	r2, 800960c <__swsetup_r+0xa4>
 80095fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095fe:	d1c5      	bne.n	800958c <__swsetup_r+0x24>
 8009600:	bd38      	pop	{r3, r4, r5, pc}
 8009602:	0799      	lsls	r1, r3, #30
 8009604:	bf58      	it	pl
 8009606:	6962      	ldrpl	r2, [r4, #20]
 8009608:	60a2      	str	r2, [r4, #8]
 800960a:	e7f4      	b.n	80095f6 <__swsetup_r+0x8e>
 800960c:	2000      	movs	r0, #0
 800960e:	e7f7      	b.n	8009600 <__swsetup_r+0x98>
 8009610:	200001a4 	.word	0x200001a4

08009614 <_raise_r>:
 8009614:	291f      	cmp	r1, #31
 8009616:	b538      	push	{r3, r4, r5, lr}
 8009618:	4605      	mov	r5, r0
 800961a:	460c      	mov	r4, r1
 800961c:	d904      	bls.n	8009628 <_raise_r+0x14>
 800961e:	2316      	movs	r3, #22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800962a:	b112      	cbz	r2, 8009632 <_raise_r+0x1e>
 800962c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009630:	b94b      	cbnz	r3, 8009646 <_raise_r+0x32>
 8009632:	4628      	mov	r0, r5
 8009634:	f000 f830 	bl	8009698 <_getpid_r>
 8009638:	4622      	mov	r2, r4
 800963a:	4601      	mov	r1, r0
 800963c:	4628      	mov	r0, r5
 800963e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009642:	f000 b817 	b.w	8009674 <_kill_r>
 8009646:	2b01      	cmp	r3, #1
 8009648:	d00a      	beq.n	8009660 <_raise_r+0x4c>
 800964a:	1c59      	adds	r1, r3, #1
 800964c:	d103      	bne.n	8009656 <_raise_r+0x42>
 800964e:	2316      	movs	r3, #22
 8009650:	6003      	str	r3, [r0, #0]
 8009652:	2001      	movs	r0, #1
 8009654:	e7e7      	b.n	8009626 <_raise_r+0x12>
 8009656:	2100      	movs	r1, #0
 8009658:	4620      	mov	r0, r4
 800965a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800965e:	4798      	blx	r3
 8009660:	2000      	movs	r0, #0
 8009662:	e7e0      	b.n	8009626 <_raise_r+0x12>

08009664 <raise>:
 8009664:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <raise+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f7ff bfd3 	b.w	8009614 <_raise_r>
 800966e:	bf00      	nop
 8009670:	200001a4 	.word	0x200001a4

08009674 <_kill_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	2300      	movs	r3, #0
 8009678:	4d06      	ldr	r5, [pc, #24]	@ (8009694 <_kill_r+0x20>)
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	f7f8 fcd2 	bl	800202a <_kill>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d102      	bne.n	8009690 <_kill_r+0x1c>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	b103      	cbz	r3, 8009690 <_kill_r+0x1c>
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	20000a10 	.word	0x20000a10

08009698 <_getpid_r>:
 8009698:	f7f8 bcc0 	b.w	800201c <_getpid>

0800969c <__swhatbuf_r>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	460c      	mov	r4, r1
 80096a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a4:	4615      	mov	r5, r2
 80096a6:	2900      	cmp	r1, #0
 80096a8:	461e      	mov	r6, r3
 80096aa:	b096      	sub	sp, #88	@ 0x58
 80096ac:	da0c      	bge.n	80096c8 <__swhatbuf_r+0x2c>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	2100      	movs	r1, #0
 80096b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096b6:	bf14      	ite	ne
 80096b8:	2340      	movne	r3, #64	@ 0x40
 80096ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096be:	2000      	movs	r0, #0
 80096c0:	6031      	str	r1, [r6, #0]
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	b016      	add	sp, #88	@ 0x58
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	466a      	mov	r2, sp
 80096ca:	f000 f849 	bl	8009760 <_fstat_r>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	dbed      	blt.n	80096ae <__swhatbuf_r+0x12>
 80096d2:	9901      	ldr	r1, [sp, #4]
 80096d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096dc:	4259      	negs	r1, r3
 80096de:	4159      	adcs	r1, r3
 80096e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096e4:	e7eb      	b.n	80096be <__swhatbuf_r+0x22>

080096e6 <__smakebuf_r>:
 80096e6:	898b      	ldrh	r3, [r1, #12]
 80096e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ea:	079d      	lsls	r5, r3, #30
 80096ec:	4606      	mov	r6, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	d507      	bpl.n	8009702 <__smakebuf_r+0x1c>
 80096f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	6123      	str	r3, [r4, #16]
 80096fa:	2301      	movs	r3, #1
 80096fc:	6163      	str	r3, [r4, #20]
 80096fe:	b003      	add	sp, #12
 8009700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009702:	466a      	mov	r2, sp
 8009704:	ab01      	add	r3, sp, #4
 8009706:	f7ff ffc9 	bl	800969c <__swhatbuf_r>
 800970a:	9f00      	ldr	r7, [sp, #0]
 800970c:	4605      	mov	r5, r0
 800970e:	4639      	mov	r1, r7
 8009710:	4630      	mov	r0, r6
 8009712:	f7fe fdb1 	bl	8008278 <_malloc_r>
 8009716:	b948      	cbnz	r0, 800972c <__smakebuf_r+0x46>
 8009718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971c:	059a      	lsls	r2, r3, #22
 800971e:	d4ee      	bmi.n	80096fe <__smakebuf_r+0x18>
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	f043 0302 	orr.w	r3, r3, #2
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	e7e2      	b.n	80096f2 <__smakebuf_r+0xc>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009736:	81a3      	strh	r3, [r4, #12]
 8009738:	9b01      	ldr	r3, [sp, #4]
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	b15b      	cbz	r3, 8009756 <__smakebuf_r+0x70>
 800973e:	4630      	mov	r0, r6
 8009740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009744:	f000 f81e 	bl	8009784 <_isatty_r>
 8009748:	b128      	cbz	r0, 8009756 <__smakebuf_r+0x70>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	f023 0303 	bic.w	r3, r3, #3
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	431d      	orrs	r5, r3
 800975a:	81a5      	strh	r5, [r4, #12]
 800975c:	e7cf      	b.n	80096fe <__smakebuf_r+0x18>
	...

08009760 <_fstat_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	2300      	movs	r3, #0
 8009764:	4d06      	ldr	r5, [pc, #24]	@ (8009780 <_fstat_r+0x20>)
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	f7f8 fcbb 	bl	80020e8 <_fstat>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	d102      	bne.n	800977c <_fstat_r+0x1c>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b103      	cbz	r3, 800977c <_fstat_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20000a10 	.word	0x20000a10

08009784 <_isatty_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	2300      	movs	r3, #0
 8009788:	4d05      	ldr	r5, [pc, #20]	@ (80097a0 <_isatty_r+0x1c>)
 800978a:	4604      	mov	r4, r0
 800978c:	4608      	mov	r0, r1
 800978e:	602b      	str	r3, [r5, #0]
 8009790:	f7f8 fcb9 	bl	8002106 <_isatty>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_isatty_r+0x1a>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_isatty_r+0x1a>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20000a10 	.word	0x20000a10

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr
